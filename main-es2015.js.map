{"version":3,"sources":["./src/generated/api/api/sampleTypes.service.ts","./src/generated/api/model/userAssessmentProductRecommendation.ts","./src/generated/api/api/mycotoxins.service.ts","./src/app/services/valid-access-token-holder.service.ts","./src/app/modules/pages/change-password/change-password.module.ts","./src/generated/api/model/tokenVerify.ts","./src/app/modules/pages/lost-password/lost-password.component.ts","./src/app/modules/pages/lost-password/lost-password.component.html","./src/generated/api/api/api.ts","./src/app/modules/pages/imprint/imprint.module.ts","./src/app/services/form-data.service.ts","./src/generated/api/model/productCountryRules.ts","./src/generated/api/model/userAssessmentMovingRisk.ts","./src/app/services/chart-js.service.ts","./src/generated/api/api/user.service.ts","./src/generated/api/api/register.service.ts","./src/generated/api/api/countries.service.ts","./src/generated/api/model/level.ts","./src/environments/environment.ts","./src/app/modules/pages/reset-password/reset-password.module.ts","./src/app/modules/components/button-spinner/button-spinner.component.ts","./src/app/modules/components/button-spinner/button-spinner.component.html","./src/generated/api/model/databaseAssessment.ts","./src/generated/api/model/components.ts","./src/generated/api/model/changePassword.ts","./src/app/services/local-storage.service.ts","./src/generated/api/model/databaseAccessEnum.ts","./src/app/services/login.service.ts","./src/app/services/data.service.ts","./src/generated/api/api/sendReport.service.ts","./src/app/util/data.ts","./src/generated/api/variables.ts","./src/app/modules/components/tutorial-popup/tutorial-popup.component.ts","./src/app/modules/components/tutorial-popup/tutorial-popup.component.html","./src/app/modules/pages/imprint/imprint.component.ts","./src/app/modules/pages/imprint/imprint.component.html","./src/generated/api/api/sampleform.service.ts","./src/app/modules/components/navigation-bar/navigation-bar.component.ts","./src/app/modules/components/navigation-bar/navigation-bar.component.html","./src/generated/api/api/customers.service.ts","./src/app/modules/pages/registration/registration.module.ts","./src/generated/api/model/token.ts","./src/generated/api/model/tokenObtainPair.ts","./src/app/util/social-links.ts","./src/app/modules/pages/reset-password/reset-password.component.ts","./src/app/modules/pages/reset-password/reset-password.component.html","./src/app/modules/components/social-bar/social-bar.component.ts","./src/app/modules/components/social-bar/social-bar.component.html","./src/app/modules/components/result/result.component.ts","./src/app/modules/components/result/result.component.html","./src/generated/api/model/passwordToken.ts","./src/generated/api/api/backend.service.ts","./src/app/modules/pages/lost-password/lost-password.module.ts","./src/generated/api/configuration.ts","./src/app/modules/pages/registration/registration.component.ts","./src/app/modules/pages/registration/registration.component.html","./src/app/modules/components/moving-risk-display/moving-risk-display.component.ts","./src/app/modules/components/moving-risk-display/moving-risk-display.component.html","./src/generated/api/api/products.service.ts","./src/generated/api/model/models.ts","./src/app/interceptors/auth-header.interceptor.ts","./src/generated/api/api/levels.service.ts","./src/generated/api/api/languages.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/modules/components/moving-risk-popup/moving-risk-popup.component.ts","./src/app/modules/components/moving-risk-popup/moving-risk-popup.component.html","./src/app/modules/components/product-display/product-display.component.ts","./src/app/modules/components/product-display/product-display.component.html","./src/generated/api/index.ts","./src/generated/api/model/laboratory.ts","./src/generated/api/model/country.ts","./src/app/util/pagination-i18n.ts","./src/app/modules/pages/change-password/change-password.component.ts","./src/app/modules/pages/change-password/change-password.component.html","./src/app/app.module.ts","./src/app/modules/components/sign-in/sign-in.component.ts","./src/app/modules/components/sign-in/sign-in.component.html","./src/app/modules/components/components.module.ts","./src/generated/api/api/species.service.ts","./src/app/modules/components/alert/alert.component.ts","./src/app/modules/components/alert/alert.component.html","./src/generated/api/model/tokenRefresh.ts","./src/generated/api/model/ewStatusEnum.ts","./src/generated/api/model/patchedChangePassword.ts","./src/generated/api/model/customer.ts","./src/app/modules/components/footer/footer.component.ts","./src/app/modules/components/footer/footer.component.html","./src/generated/api/api/components.service.ts","./src/generated/api/encoder.ts","./src/generated/api/model/userAssessmentSampleContamination.ts","./src/generated/api/model/contactPerson.ts","./src/app/services/access-token.service.ts","./src/app/services/language.service.ts","./src/generated/api/api/api.service.ts","./src/generated/api/model/sampleTypes.ts","./src/app/services/layout.service.ts","./src/generated/api/api/database.service.ts","./src/app/services/current-language.service.ts","./src/generated/api/model/species.ts","./src/generated/api/model/email.ts","./src/generated/api/api/translations.service.ts","./src/app/services/result.service.ts","./src/generated/api/api/assessment.service.ts","./src/app/modules/components/header-cta/header-cta.component.ts","./src/generated/api/api/laboratories.service.ts","./src/app/app-routing.module.ts","./src/generated/api/model/mycotoxins.ts","./src/generated/api/model/registrationRequest.ts","external \"moment\"","./src/app/modules/components/pre-footer/pre-footer.component.ts","./src/app/modules/components/pre-footer/pre-footer.component.html","./src/generated/api/api.module.ts","./src/app/interceptors/language-header.interceptor.ts","./src/generated/api/model/userAssessmentRecipient.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { SampleTypes } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SampleTypesService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public sampleTypesList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<SampleTypes>>;\n    public sampleTypesList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<SampleTypes>>>;\n    public sampleTypesList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<SampleTypes>>>;\n    public sampleTypesList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<SampleTypes>>(`${this.configuration.basePath}/backend/masterdata/sample-types/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface UserAssessmentProductRecommendation { \n    readonly product: string;\n    text: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Mycotoxins } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MycotoxinsService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public mycotoxinsList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<Mycotoxins>>;\n    public mycotoxinsList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<Mycotoxins>>>;\n    public mycotoxinsList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<Mycotoxins>>>;\n    public mycotoxinsList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<Mycotoxins>>(`${this.configuration.basePath}/backend/masterdata/mycotoxins/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {Observable, ReplaySubject} from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ValidAccessTokenHolderService {\n\n    private readonly currentValidAccessToken$ = new ReplaySubject<string | null>(1);\n\n    constructor() {\n    }\n\n    get currentValidAccessToken(): Observable<string | null> {\n        return this.currentValidAccessToken$;\n    }\n\n    setAccessToken(token: string | null) {\n        this.currentValidAccessToken$.next(token);\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ChangePasswordComponent } from './change-password.component';\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {ComponentsModule} from \"../../components/components.module\";\n\n\n\n@NgModule({\n  declarations: [ChangePasswordComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatProgressSpinnerModule,\n    ComponentsModule\n  ]\n})\nexport class ChangePasswordModule { }\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface TokenVerify { \n    token: string;\n}\n\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, FormGroupDirective, NgForm, Validators} from \"@angular/forms\";\nimport {Observable, of, Subject} from \"rxjs\";\nimport {takeUntil} from \"rxjs/operators\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {ApiService} from \"../../../../generated/api\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {ErrorStateMatcher} from \"@angular/material/core\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\n\n@Component({\n    selector: 'app-lost-password',\n    templateUrl: './lost-password.component.html',\n    styleUrls: ['./lost-password.component.scss']\n})\nexport class LostPasswordComponent implements OnInit, OnDestroy {\n\n    private readonly destroyed$ = new Subject();\n\n    loading = false;\n    submitted = false;\n    error: Observable<string> | null = null;\n\n    controls = {\n        email: new FormControl(null, [Validators.required, Validators.email])\n    } as const;\n    formGroup = new FormGroup(this.controls);\n\n    emailErrorMatcher: ErrorStateMatcher;\n\n    constructor(\n        private readonly matDialog: MatDialog,\n        private readonly apiService: ApiService,\n        private readonly translateService: TranslateService\n    ) {\n        const component = this;\n        this.emailErrorMatcher = new class extends ErrorStateMatcher {\n            isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n                return super.isErrorState(control, form) || component.error != null;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n    }\n\n    submit() {\n        if (this.formGroup.valid) {\n            this.loading = true;\n            this.error = null;\n            this.apiService.apiPasswordResetCreate({\n                email: this.controls.email.value\n            }).pipe(\n                takeUntil(this.destroyed$),\n            ).subscribe({\n                next: () => {\n                    this.loading = false;\n                    this.submitted = true;\n                },\n                error: err => {\n                    this.loading = false;\n                    console.error('Lost Password failed', err);\n                    if (err instanceof HttpErrorResponse && Math.floor(err.status / 100) === 4 && typeof err.error === 'object' && Array.isArray(err.error.password)) {\n                        this.error = of(err.error.password.map(p => String(p)).join(', '));\n                    } else {\n                        this.error = this.translateService.get('LOSTPASSWORD_FAILED');\n                    }\n                }\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n\n}\n","<div class=\"registration-container\">\n    <h2 ngx-translate>Forgot your password?</h2>\n    <ng-container *ngIf=\"!submitted\">\n        <div [innerHTML]=\"'To reset your password, please enter your email address. MasterRisk will send you a new password for your account. If you do not know the email address that is linked to your account or it is no longer valid, please contact leila.martincarrasco@ew-nutrition.com for further assistance.'|translate\"></div>\n        <form [formGroup]=\"formGroup\" (ngSubmit)=\"submit()\" class=\"form-container\">\n            <mat-form-field appearance=\"standard\">\n                <mat-label><span ngx-translate>Please enter the email address of your account:</span></mat-label>\n                <input matInput [formControl]=\"controls.email\" [errorStateMatcher]=\"emailErrorMatcher\">\n                <mat-error>\n                    <ng-container *ngIf=\"error != null\">\n                        <span>{{ error|async }}</span>\n                    </ng-container>\n                    <ng-container *ngIf=\"error == null && controls.email.errors?.required\">\n                        <span ngx-translate>Please enter your email.</span>\n                    </ng-container>\n                    <ng-container *ngIf=\"error == null && controls.email.errors?.email\">\n                        <span ngx-translate>Please re-check your email.</span>\n                    </ng-container>\n                </mat-error>\n            </mat-form-field>\n\n            <div class=\"button-container\">\n                <button mat-flat-button color=\"primary\" type=\"submit\" [disabled]=\"loading\">\n                    <app-button-spinner [spinning]=\"loading\"></app-button-spinner>\n                    <span ngx-translate>Generate a new password</span>\n                </button>\n            </div>\n        </form>\n    </ng-container>\n    <ng-container *ngIf=\"submitted\">\n        <p [innerHTML]=\"'LOSTPASSWORD_SUCCESSTEXT'|translate\"></p>\n    </ng-container>\n</div>","export * from './api.service';\nimport { ApiService } from './api.service';\nexport * from './assessment.service';\nimport { AssessmentService } from './assessment.service';\nexport * from './backend.service';\nimport { BackendService } from './backend.service';\nexport * from './components.service';\nimport { ComponentsService } from './components.service';\nexport * from './countries.service';\nimport { CountriesService } from './countries.service';\nexport * from './customers.service';\nimport { CustomersService } from './customers.service';\nexport * from './database.service';\nimport { DatabaseService } from './database.service';\nexport * from './laboratories.service';\nimport { LaboratoriesService } from './laboratories.service';\nexport * from './languages.service';\nimport { LanguagesService } from './languages.service';\nexport * from './levels.service';\nimport { LevelsService } from './levels.service';\nexport * from './mycotoxins.service';\nimport { MycotoxinsService } from './mycotoxins.service';\nexport * from './products.service';\nimport { ProductsService } from './products.service';\nexport * from './register.service';\nimport { RegisterService } from './register.service';\nexport * from './sampleTypes.service';\nimport { SampleTypesService } from './sampleTypes.service';\nexport * from './sendReport.service';\nimport { SendReportService } from './sendReport.service';\nexport * from './species.service';\nimport { SpeciesService } from './species.service';\nexport * from './translations.service';\nimport { TranslationsService } from './translations.service';\nexport * from './user.service';\nimport { UserService } from './user.service';\nexport * from './sampleform.service';\nimport { SampleFormService } from './sampleform.service';\nexport const APIS = [ApiService, AssessmentService, BackendService, ComponentsService, CountriesService, CustomersService, DatabaseService, LaboratoriesService, LanguagesService, LevelsService, MycotoxinsService, ProductsService, RegisterService, SampleTypesService, SendReportService, SpeciesService, TranslationsService, UserService, SampleFormService];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ImprintComponent } from './imprint.component';\nimport {TranslateModule} from \"@ngx-translate/core\";\n\n\n@NgModule({\n  declarations: [ImprintComponent],\n    imports: [\n        CommonModule,\n        TranslateModule\n    ]\n})\nexport class ImprintModule { }\n","import { Injectable } from '@angular/core';\nimport { AbstractControl, FormArray, FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { LoginService } from \"./login.service\";\nimport { ApiData, ApiDataIdx, DataService, makeIndex, ProcessedProduct } from \"./data.service\";\nimport {\n    catchError,\n    defaultIfEmpty,\n    distinctUntilChanged,\n    filter,\n    first,\n    map,\n    shareReplay,\n    startWith,\n    switchMap,\n    tap,\n    throttleTime\n} from \"rxjs/operators\";\nimport {\n    Components,\n    Country,\n    Customer,\n    Level,\n    SampleTypes,\n    Species,\n    User,\n    UserAssessmentInput,\n    UserAssessmentMovingRisk\n} from \"../../generated/api\";\nimport { BehaviorSubject, combineLatest, forkJoin, Observable, of, ReplaySubject, Subject } from \"rxjs\";\nimport { ResultService } from \"./result.service\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { MovingRiskData, ResultInput, ResultOutput } from \"../util/data\";\nimport { LanguageService } from \"./language.service\";\nimport { AlertComponent, AlertData, AlertResult } from \"../modules/components/alert/alert.component\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { Router } from \"@angular/router\";\n\nexport interface ConcentrationUnit {\n    readonly text: string;\n    readonly toPPB: (input: number) => number;\n}\n\nexport interface SampleFormInfo {\n    sampleName: string | null;\n    component: Components | null;\n    inclusionRate: any;\n}\n\nexport const concentrationUnits: ReadonlyArray<ConcentrationUnit> = [\n    {\n        text: 'ppb (µg/kg)',\n        toPPB: input => input\n    },\n    {\n        text: 'ppm (mg/kg)',\n        toPPB: input => input * 1000\n    }\n];\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FormDataService {\n\n    readonly speciesNewFormControls = {\n        speciesNew: new FormControl(null, Validators.required)\n    } as const;\n    readonly speciesNewForm = new FormGroup(this.speciesNewFormControls);\n\n    readonly generalFormControls = {\n        customerName: new FormControl(null),\n        country: new FormControl(null, Validators.required),\n        species: new FormControl(null, Validators.required),\n        laboratory: new FormControl(null),\n        sampleType: new FormControl(null, Validators.required),\n        recipients: new FormArray([FormDataService.createRecipientControl()])\n    } as const;\n    readonly generalForm = new FormGroup(this.generalFormControls);\n\n    readonly samplesFormArray: FormArray = new FormArray([FormDataService.createSamplesRow(true)]);\n    readonly samplesFormControls = {\n        formArray: this.samplesFormArray\n    } as const;\n    readonly samplesForm = new FormGroup(this.samplesFormControls);\n\n    readonly concentrationForms = new FormArray([FormDataService.createConcentrationForm()]);\n    readonly completeConcentrationForm = new FormGroup({\n        entries: this.concentrationForms\n    });\n\n    readonly productSelectionControls = {\n        selectedProduct: new FormControl(null, Validators.required)\n    } as const;\n    readonly productSelectionForm = new FormGroup(this.productSelectionControls);\n\n    readonly allControls = {\n        generalForm: this.generalForm,\n        speciesNewForm: this.speciesNewForm,\n        samplesForm: this.samplesForm,\n        concentrationForm: this.completeConcentrationForm,\n        productSelectionForm: this.productSelectionForm\n    } as const;\n    readonly completeForm = new FormGroup(this.allControls);\n\n    readonly sampleFormInfo: Observable<SampleFormInfo[]>;\n\n    readonly sampleType: Observable<SampleTypes | null>;\n    readonly species: Observable<Species | null>;\n    readonly country: Observable<Country | null>;\n\n    readonly processedProducts: Observable<ProcessedProduct[]>;\n    readonly validComponents: Observable<Components[] | null>;\n    readonly validComponentsIdx: Observable<Map<string, Components> | null>;\n\n    readonly apiOutput: Observable<UserAssessmentInput | null>;\n    readonly resultOutput: Observable<ResultOutput | null>;\n\n    readonly onResultStep: Observable<boolean>;\n    readonly onProductSelectStep: Observable<boolean>;\n\n    private readonly reset$ = new Subject<void>();\n    private readonly currentStep$ = new BehaviorSubject<number>(0);\n    private data: ApiData | null = null;\n    private loggedIn = false;\n    private currentUser: User | null = null;\n    private currentSampleType: SampleTypes | null = null;\n    private readonly apiErrors$ = new ReplaySubject<unknown | null>(1);\n\n    constructor(\n        private readonly matDialog: MatDialog,\n        private readonly router: Router,\n        private readonly dataService: DataService,\n        private readonly resultService: ResultService,\n        private readonly loginService: LoginService,\n        private readonly languageService: LanguageService,\n        private readonly translateService: TranslateService,\n    ) {\n        this.sampleType = this.observeIdSelection(this.generalFormControls.sampleType, d => d.sampleTypes);\n        this.species = this.observeIdSelection(this.generalFormControls.species, d => d.species);\n        this.country = this.observeIdSelection(this.generalFormControls.country, d => d.countries);\n        this.validComponents = combineLatest([this.sampleType, this.species]).pipe(\n            switchMap(([sampleType, species]) => {\n                if (sampleType == null || species == null) {\n                    return [null];\n                } else {\n                    return this.dataService.getComponents(sampleType.id, species.id);\n                }\n            }),\n            shareReplay(1)\n        );\n        this.validComponentsIdx = this.validComponents.pipe(\n            map(components => components == null ? null : makeIndex(components)),\n            shareReplay(1)\n        );\n\n        this.onResultStep = combineLatest([this.currentStep$, this.loginService.loggedIn]).pipe(\n            map(([currentStep, loggedIn]) => currentStep === (loggedIn ? 4 : 3))\n        );\n\n        this.onProductSelectStep = combineLatest([this.currentStep$, this.loginService.loggedIn]).pipe(\n            map(([currentStep, loggedIn]) => loggedIn && currentStep === 3)\n        );\n\n        this.processedProducts = combineLatest([this.country, this.species]).pipe(\n            switchMap(([country, species]) => {\n                if (country == null || species == null) {\n                    return of<ProcessedProduct[]>([]);\n                } else {\n                    return this.dataService.get('products').pipe(\n                        map(products => {\n                            return this.dataService.processProducts(country.id, products).filter(product => {\n                                // OpenAPI generator is broken\n                                return (species.has_products as unknown as (string[] | undefined))?.includes(product.id)\n                            })\n                        })\n                    );\n                }\n            })\n        );\n\n        this.sampleFormInfo = combineLatest([this.samplesFormArray.valueChanges, this.validComponents]).pipe(\n            map<[unknown, Components[] | null], SampleFormInfo[]>(([, components]) => {\n\n                return this.samplesFormArray.controls.map(sampleForm => {\n                    return {\n                        component: components?.find(c => c.id === sampleForm.get('component').value),\n                        sampleName: sampleForm.get('name').value ?? null,\n                        inclusionRate: components?.find(c => c.id === sampleForm.get('inclusionRate').value)\n                    }\n                });\n            }),\n            shareReplay(1)\n        );\n\n        this.sampleType.subscribe(sampleType => {\n            this.currentSampleType = sampleType ?? null\n            this.updateInclusionRateState();\n        });\n\n        this.loginService.currentUser.subscribe(currentUser => {\n            this.loggedIn = currentUser != null;\n            this.currentUser = currentUser;\n            this.updateLoginState();\n        });\n\n        this.dataService.data.subscribe(data => {\n            this.data = data;\n            for (const concentrationForm of this.concentrationForms.controls as FormGroup[]) {\n                this.updateMycotoxinRows(concentrationForm);\n            }\n        });\n\n        this.productSelectionForm.valueChanges.pipe(\n            startWith(0),\n            switchMap(() => {\n                return this.productSelectionControls.selectedProduct.value == null ? [null] : this.loginService.loggedIn.pipe(\n                    map(loggedIn => loggedIn ? 4 : 3)\n                )\n            }),\n            distinctUntilChanged(),\n            filter(step => step != null)\n        ).subscribe(step => this.setCurrentStep(step));\n\n        this.apiOutput = combineLatest([this.completeForm.valueChanges, this.completeForm.statusChanges, this.currentStep]).pipe(\n            startWith(0),\n            switchMap(() => this.dataService.data),\n            switchMap(() => {\n                if (this.completeForm.invalid || this.currentStep$.getValue() !== (this.loggedIn ? 4 : 3)) {\n                    return [null];\n                } else {\n                    return this.getResultInput();\n                }\n            }),\n            throttleTime(500, undefined, { leading: false, trailing: true }),\n            switchMap(resultInput => {\n                if (resultInput == null) {\n                    this.apiErrors$.next(null);\n                    return [null];\n                } else {\n                    return this.resultService.getResults(resultInput).pipe(\n                        tap(() => this.apiErrors$.next(null)),\n                        catchError(err => {\n                            console.warn('Failed getting API result', err);\n                            this.apiErrors$.next(err);\n                            return of(null);\n                        })\n                    );\n                }\n            }),\n            distinctUntilChanged((a, b) => (a == null) === (b == null)),\n            shareReplay(1)\n        );\n\n        this.resultOutput = this.apiOutput.pipe(\n            switchMap(apiOutput => {\n                return this.makeResultOutput(apiOutput);\n            })\n        );\n    }\n\n    get apiErrors(): Observable<unknown | null> {\n        return this.apiErrors$;\n    }\n\n    makeMovingRiskData(apiMovingRisks: ReadonlyArray<UserAssessmentMovingRisk> | null, allLevels: Level[]): ReadonlyArray<MovingRiskData> {\n        return apiMovingRisks?.map(risk => {\n            const avgRiskFactorNumber = parseFloat(risk.avg_risk_factor);\n            const roundedLevelFactor = Math.round(avgRiskFactorNumber);\n            const matchingLevel = allLevels.find(l => l.level_factor === roundedLevelFactor);\n            return {\n                count: risk.number_of_assessments,\n                date: new Date(Date.parse(risk.month)),\n                level: matchingLevel,\n                rawLevel: avgRiskFactorNumber\n            }\n        });\n    }\n\n    makeResultOutput(apiOutput: UserAssessmentInput | null): Observable<ResultOutput | null> {\n        if (apiOutput == null) {\n            return of(null);\n        } else {\n            const date = apiOutput.created_at == null ? null : new Date(Date.parse(apiOutput.created_at));\n            return combineLatest([\n                this.dataService.getIdx('species').pipe(map(species => species.get(apiOutput.species))),\n                this.dataService.getIdx('sampleTypes').pipe(map(sampleTypes => sampleTypes.get(apiOutput.sample_type))),\n                this.languageService.currentLanguage,\n                this.dataService.get('products').pipe(\n                    map(products => this.dataService.processProducts(apiOutput.country, products))\n                ),\n                this.dataService.getIdx('levels'),\n                this.dataService.getComponentsIdx(apiOutput.sample_type, apiOutput.species),\n                this.dataService.getIdx('countries').pipe(map(countries => countries.get(apiOutput.country)))\n            ]).pipe<ResultOutput>(\n                map(([species, sampleType, currentLanguage, processedProducts, levels, components, country]: [Species, SampleTypes, string, ProcessedProduct[], Map<string, Level>, Map<string, Components>, Country]) => {\n                    const allLevels = Array.from(levels.values());\n                    const movingRiskData: ReadonlyArray<MovingRiskData> = this.makeMovingRiskData(apiOutput.moving_risks, allLevels);\n                    return {\n                        apiData: apiOutput,\n                        movingRiskData,\n                        species,\n                        sampleType,\n                        dateString: date?.toLocaleDateString(currentLanguage, {\n                            year: \"numeric\",\n                            month: \"2-digit\",\n                            day: \"2-digit\"\n                        }),\n                        country,\n                        totalBwFactor: apiOutput.total_bw_factor == null ? null : parseFloat(apiOutput.total_bw_factor),\n                        totalFcrFactor: apiOutput.total_fcr_factor == null ? null : parseFloat(apiOutput.total_fcr_factor),\n                        samples: apiOutput.samples.map(sample => {\n                            return {\n                                apiData: sample,\n                                recommendation: sample.product_recommendation == null ? null : {\n                                    product: sample.product_recommendation.product == null ? null : processedProducts.find(p => p.id === sample.product_recommendation?.product) ?? null,\n                                    text: sample.product_recommendation?.text ?? null\n                                },\n                                sampleRisk: sample.risk == null ? null : this.data.levels.find(lvl => lvl.id === sample.risk) ?? null,\n                                component: components.get(sample.component) ?? null,\n                                inclusionRateDisplay: sampleType.has_inclusion_rate ? sample.inclusion_rate?.toLocaleString(currentLanguage) ?? '--' : null,\n                                bwFactor: sample.bw_factor == null ? null : parseFloat(sample.bw_factor),\n                                fcrFactor: sample.fcr_factor == null ? null : parseFloat(sample.fcr_factor)\n                            }\n                        }),\n                        mycotoxinRows: this.data.mycotoxins.map(mycotoxin => {\n                            return {\n                                mycotoxin,\n                                values: apiOutput.samples.map(sampleEntry => {\n                                    const contaminationEntry = sampleEntry.contaminations.find(entry => entry.mycotoxin === mycotoxin.id);\n                                    const display = contaminationEntry?.value?.toLocaleString(currentLanguage) ?? 'nt';\n                                    return {\n                                        display,\n                                        level: contaminationEntry?.level == null ? null : this.data.levels.find(lvl => lvl.id === contaminationEntry.level) ?? null\n                                    }\n                                })\n                            }\n                        }),\n                        totalRecommendedProduct: apiOutput.total_product_recommendation == null ? null : {\n                            product: processedProducts.find(p => p.id === apiOutput.total_product_recommendation.product) ?? null,\n                            text: apiOutput.total_product_recommendation.text\n                        },\n                        totalRiskLevel: apiOutput.total_risk == null ? null : levels.get(apiOutput.total_risk) ?? null\n                    };\n                })\n            );\n        }\n    }\n\n    get reset(): Observable<void> {\n        return this.reset$;\n    }\n\n    get currentStep(): Observable<number> {\n        return this.currentStep$;\n    }\n\n    setCurrentStep(index: number) {\n        this.currentStep$.next(index);\n    }\n\n    goToRoot() {\n        if (this.router.url === '/') {\n            if (this.generalForm.dirty) {\n                const dialog = this.matDialog.open<AlertComponent, AlertData, AlertResult>(\n                    AlertComponent,\n                    {\n                        autoFocus: false,\n                        data: {\n                            title: 'RESET_DATA_HEADER',\n                            message: 'RESET_DATA_MESSAGE',\n                            buttons: [\n                                {\n                                    id: 'yes',\n                                    text: 'GENERAL_YES',\n                                    role: 'primary'\n                                },\n                                {\n                                    id: 'no',\n                                    text: 'GENERAL_NO'\n                                }\n                            ]\n                        }\n                    }\n                );\n                dialog.afterClosed().subscribe(result => {\n                    if (result?.button === 'yes') {\n                        this.resetAll();\n                    }\n                });\n            } else {\n                this.resetAll();\n                return of(undefined);\n            }\n        } else {\n            this.router.navigate(['/']);\n        }\n    }\n\n    resetAll() {\n        this.completeForm.reset();\n        this.samplesFormArray.clear();\n        this.samplesFormArray.push(FormDataService.createSamplesRow(true));\n        this.concentrationForms.clear();\n        const concentrationForm = FormDataService.createConcentrationForm();\n        this.concentrationForms.push(concentrationForm);\n        this.generalFormControls.recipients.clear();\n        this.generalFormControls.recipients.push(FormDataService.createRecipientControl());\n        this.updateLoginState();\n        this.updateInclusionRateState();\n        this.updateMycotoxinRows(concentrationForm)\n\n        this.reset$.next();\n        this.setCurrentStep(0);\n        // need to do this twice, because the 2nd time we potentially autofill the email\n        this.updateLoginState();\n    }\n\n    addRecipient() {\n        this.generalFormControls.recipients.push(FormDataService.createRecipientControl());\n        this.updateLoginState();\n    }\n\n    removeRecipient(index: number) {\n        this.generalFormControls.recipients.removeAt(index);\n    }\n\n    addSample() {\n        this.samplesFormArray.push(FormDataService.createSamplesRow());\n        const newConcentrationForm = FormDataService.createConcentrationForm();\n        this.concentrationForms.push(newConcentrationForm);\n        this.updateMycotoxinRows(newConcentrationForm);\n        this.updateInclusionRateState();\n    }\n\n    removeSample(index: number) {\n        this.samplesFormArray.removeAt(index);\n        this.concentrationForms.removeAt(index);\n    }\n\n    private getResultInput(): Observable<ResultInput> {\n        const sampleNames$: Observable<string>[] = this.samplesFormArray.controls.map((sampleForm, sampleIndex) => {\n            const givenName = sampleForm.get('name').value;\n            if (givenName == null || /^\\s*$/.test(givenName)) {\n                return this.translateService.get('STEPTWO_SAMPLENAME_DEFAULT', { index: sampleIndex + 1 }).pipe(first());\n            } else {\n                return of(givenName);\n            }\n        });\n\n        return forkJoin(sampleNames$).pipe(\n            defaultIfEmpty([]),\n            map((sampleNames) => {\n                return {\n                    generalForm: {\n                        customerName: typeof this.generalFormControls.customerName.value === 'string' ? this.generalFormControls.customerName.value : ((this.generalFormControls.customerName.value as Customer | null)?.name ?? ''),\n                        customerId: typeof this.generalFormControls.customerName.value === 'string' ? null : (this.generalFormControls.customerName.value as Customer | null)?.id,\n                        countryId: this.generalFormControls.country.value,\n                        speciesId: this.generalFormControls.species.value,\n                        testLaboratoryId: this.generalFormControls.laboratory.value,\n                        sampleTypeId: this.generalFormControls.sampleType.value,\n                        recipientEmails: this.loggedIn ? this.generalFormControls.recipients.controls.map(c => c.value) : []\n                    },\n                    samplesForm: {\n                        samples: this.samplesFormArray.controls.map((samplesForm, samplesIdx) => {\n                            const inclusionRateValue = samplesForm.get('inclusionRate').value;\n                            let parsedInclusionRate = null;\n                            if (inclusionRateValue == null) {\n                                parsedInclusionRate = null;\n                            } else if (typeof inclusionRateValue === 'string') {\n                                parsedInclusionRate = parseInt(inclusionRateValue);\n                            } else if (typeof inclusionRateValue === 'number') {\n                                parsedInclusionRate = inclusionRateValue\n                            }\n                            if (parsedInclusionRate != null && (!isFinite(parsedInclusionRate) || parsedInclusionRate < 0)) {\n                                parsedInclusionRate = null;\n                            }\n                            return {\n                                sampleName: sampleNames[samplesIdx],\n                                componentId: samplesForm.get('component').value,\n                                inclusionRate: parsedInclusionRate\n                            }\n                        })\n                    },\n                    concentrationForm: {\n                        entries: this.concentrationForms.controls.map(concentrationForm => {\n                            const concentrationEntries = concentrationForm.get('concentrations') as FormArray;\n                            if (this.data == null || concentrationEntries.length !== this.data.mycotoxins.length) {\n                                return {\n                                    concentrations: []\n                                }\n                            } else {\n                                return {\n                                    concentrations: concentrationEntries.controls.map((concentrationRowForm, mycotoxinIndex) => {\n                                        const value = (concentrationRowForm.get('unit').value as ConcentrationUnit).toPPB(\n                                            concentrationRowForm.get('value').value\n                                        );\n                                        return {\n                                            mycotoxinId: this.data.mycotoxins[mycotoxinIndex].id,\n                                            value: value\n                                        }\n                                    })\n                                };\n                            }\n                        })\n                    },\n                    selectedProductId: this.productSelectionControls.selectedProduct.value?.productId\n                }\n            })\n        );\n    }\n\n    private observeIdSelection<V>(control: FormControl, getter: (data: ApiDataIdx) => Map<string, V>): Observable<V> {\n        return control.valueChanges.pipe(\n            startWith(control.value as string | null),\n            switchMap((currentId: string | null) => {\n                if (currentId == null) {\n                    return of(null);\n                } else {\n                    return this.dataService.dataIdx.pipe(\n                        map(idx => getter(idx).get(currentId) ?? null)\n                    );\n                }\n            }),\n            shareReplay(1)\n        );\n    }\n\n    private updateMycotoxinRows(concentrationForm: FormGroup) {\n        const concentrations = concentrationForm.get('concentrations') as FormArray;\n        if (this.data == null) {\n            concentrations.clear();\n        } else {\n            if (concentrations.length !== this.data.mycotoxins.length) {\n                concentrations.clear();\n                for (const mycotoxin of this.data.mycotoxins) {\n                    concentrations.push(FormDataService.createConcentrationRow());\n                }\n            }\n        }\n    }\n\n    private updateInclusionRateState() {\n        const showInclusionRate = this.currentSampleType?.has_inclusion_rate ?? false;\n        for (const control of this.inclusionRateOnlyFields()) {\n            if (showInclusionRate) {\n                control.enable();\n            } else {\n                control.disable();\n            }\n        }\n    }\n\n    private * inclusionRateOnlyFields(): IterableIterator<AbstractControl> {\n        for (const row of this.samplesFormArray.controls) {\n            yield row.get('inclusionRate');\n        }\n    }\n\n    private updateLoginState() {\n        for (const ctrl of this.loginOnlyFields()) {\n            if (this.loggedIn) {\n                ctrl.enable();\n            } else {\n                ctrl.disable();\n            }\n        }\n        // console.log(\"updateLoginState\", this.currentUser, this.generalFormControls.recipients.at(0).value);\n        if (this.currentUser != null && this.generalFormControls.recipients.length === 1 && !this.generalFormControls.recipients.at(0).value) {\n            // console.log(\"updating state\")\n            this.generalFormControls.recipients.at(0).setValue(this.currentUser.email);\n        }\n    }\n\n    private * loginOnlyFields(): IterableIterator<AbstractControl> {\n        yield* [this.generalFormControls.customerName, this.generalFormControls.laboratory, this.generalFormControls.recipients];\n        // yield* this.generalFormControls.recipients.controls;\n        yield this.generalFormControls.recipients;\n        yield this.productSelectionForm;\n    }\n\n    private static createRecipientControl(): FormControl {\n        return new FormControl(null, []);\n    }\n\n    private static createSamplesRow(i = false): FormGroup {\n        let group: any;\n        // if (i) {\n        group = {\n            component: new FormControl(null, Validators.required),\n            name: new FormControl(null, Validators.required),\n            inclusionRate: new FormControl(null, Validators.required)\n        };\n        // } else {\n        //     group = {\n        //         component: new FormControl(null),\n        //         name: new FormControl(null),\n        //         inclusionRate: new FormControl(null, [\n        //             Validators.min(0), Validators.max(100),\n        //             Validators.pattern(/^\\d*$/)\n        //         ])\n        //     };\n        // }\n        return new FormGroup(group)\n\n    }\n\n    private static createConcentrationForm(): FormGroup {\n        return new FormGroup({\n            concentrations: new FormArray([])\n        });\n    }\n\n    private static createConcentrationRow(): FormGroup {\n        return new FormGroup({\n            value: new FormControl(null, [\n                Validators.min(0), Validators.pattern(/^\\d*$/)\n            ]),\n            unit: new FormControl(concentrationUnits[0])\n        });\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ProductCountryRules { \n    readonly country: string;\n    name: string;\n    logo?: string | null;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface UserAssessmentMovingRisk { \n    month: string;\n    avg_risk_factor: string;\n    number_of_assessments?: number;\n}\n\n","import { Injectable } from '@angular/core';\nimport {Observable} from \"rxjs\";\nimport type {Chart} from \"chart.js\";\nimport {shareReplay} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartJsService {\n\n  readonly chartJs = new Observable<typeof Chart>(subscriber => {\n    import(\"chart.js\").then(chartJs => {\n      subscriber.next(chartJs);\n      subscriber.complete();\n    }).catch(err => subscriber.error(err));\n  }).pipe(\n      shareReplay(1)\n  )\n\n  constructor() { }\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { ChangePassword } from '../model/models';\nimport { PatchedChangePassword } from '../model/models';\nimport { User } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * An endpoint for changing password.\n     * @param patchedChangePassword \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userChangePasswordPartialUpdate(patchedChangePassword?: PatchedChangePassword, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ChangePassword>;\n    public userChangePasswordPartialUpdate(patchedChangePassword?: PatchedChangePassword, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ChangePassword>>;\n    public userChangePasswordPartialUpdate(patchedChangePassword?: PatchedChangePassword, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ChangePassword>>;\n    public userChangePasswordPartialUpdate(patchedChangePassword?: PatchedChangePassword, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<ChangePassword>(`${this.configuration.basePath}/backend/masterdata/user/change-password/`,\n            patchedChangePassword,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * An endpoint for changing password.\n     * @param changePassword \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userChangePasswordUpdate(changePassword: ChangePassword, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ChangePassword>;\n    public userChangePasswordUpdate(changePassword: ChangePassword, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ChangePassword>>;\n    public userChangePasswordUpdate(changePassword: ChangePassword, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ChangePassword>>;\n    public userChangePasswordUpdate(changePassword: ChangePassword, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (changePassword === null || changePassword === undefined) {\n            throw new Error('Required parameter changePassword was null or undefined when calling userChangePasswordUpdate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<ChangePassword>(`${this.configuration.basePath}/backend/masterdata/user/change-password/`,\n            changePassword,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userRetrieve(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<User>;\n    public userRetrieve(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<User>>;\n    public userRetrieve(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<User>>;\n    public userRetrieve(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<User>(`${this.configuration.basePath}/backend/masterdata/user/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { RegistrationRequest } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegisterService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param registrationRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public registerCreate(registrationRequest: RegistrationRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<RegistrationRequest>;\n    public registerCreate(registrationRequest: RegistrationRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<RegistrationRequest>>;\n    public registerCreate(registrationRequest: RegistrationRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<RegistrationRequest>>;\n    public registerCreate(registrationRequest: RegistrationRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (registrationRequest === null || registrationRequest === undefined) {\n            throw new Error('Required parameter registrationRequest was null or undefined when calling registerCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<RegistrationRequest>(`${this.configuration.basePath}/backend/masterdata/register/`,\n            registrationRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Country } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountriesService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public countriesList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<Country>>;\n    public countriesList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<Country>>>;\n    public countriesList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<Country>>>;\n    public countriesList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<Country>>(`${this.configuration.basePath}/backend/masterdata/countries/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Level { \n    id: string;\n    text: string;\n    color?: string;\n    level_factor?: number;\n    marker_image?: string | null;\n    result_table_postfix?: string;\n    interpretation_text?: string;\n}\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  // api: 'http://localhost:8000'\n  // api: 'https://masterrisktool.com'\n  // api: 'https://apiewn.unilink360.com'\n  api: 'https://elsaadmin.ew-nutrition.com'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ResetPasswordComponent } from './reset-password.component';\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\n\n\n@NgModule({\n  declarations: [ResetPasswordComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatProgressSpinnerModule\n  ]\n})\nexport class ResetPasswordModule { }\n","import {Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges} from '@angular/core';\nimport {EMPTY, Subject, timer} from \"rxjs\";\nimport {debounce} from \"rxjs/operators\";\n\n@Component({\n    selector: 'app-button-spinner',\n    templateUrl: './button-spinner.component.html',\n    styleUrls: ['./button-spinner.component.scss'],\n})\nexport class ButtonSpinnerComponent implements OnInit, OnChanges, OnDestroy {\n\n    private readonly spinning$ = new Subject<boolean>();\n    debouncedSpinning: boolean = false;\n\n    @Input()\n    spinning = true;\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n        this.spinning$.pipe(\n            debounce(spinning => !spinning ? EMPTY : timer(500))\n        ).subscribe(debouncedSpinning => this.debouncedSpinning = debouncedSpinning);\n        this.debouncedSpinning = this.spinning;\n        this.spinning$.next(this.spinning);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.spinning && !changes.spinning.firstChange) {\n            this.spinning$.next(this.spinning);\n        }\n    }\n\n    ngOnDestroy() {\n        this.spinning$.complete();\n    }\n\n}\n","<mat-spinner [class.visible]=\"debouncedSpinning\" color=\"accent\" diameter=\"30\"></mat-spinner>","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface DatabaseAssessment { \n    id?: string;\n    readonly created_at: string;\n    readonly country: string;\n    readonly species: string;\n    readonly test_laboratory: string;\n    readonly sample_type: string;\n    readonly total_risk: string;\n    total_bw_factor?: string | null;\n    total_fcr_factor?: string | null;\n    readonly customer_name: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Components { \n    id: string;\n    text?: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ChangePassword { \n    old_password: string;\n    new_password: string;\n}\n\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject, fromEvent, Observable, ReplaySubject, Subscription} from \"rxjs\";\n\nexport interface LocalStorageHandle<T> {\n    readonly value: Observable<T | null>;\n    readonly currentValue: T | null;\n    setValue(newValue: T | null);\n\n    subscribe(): Subscription;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LocalStorageService {\n\n    constructor() {\n\n    }\n\n    newHandle<T>(key: string, reader: (raw: string) => T | null, writer: (T) => string): LocalStorageHandle<T> {\n        const read = (): T => {\n            const raw = localStorage.getItem(key);\n            if (raw == null) {\n                return null;\n            } else {\n                return reader(raw);\n            }\n        }\n\n        const value$ = new BehaviorSubject<T | null>(read());\n\n        return {\n            get value(): Observable<T | null> {\n                return value$;\n            },\n            get currentValue(): T | null {\n                return value$.getValue();\n            },\n            setValue(newValue: T | null) {\n                value$.next(newValue);\n                if (newValue == null) {\n                    localStorage.removeItem(key);\n                } else {\n                    localStorage.setItem(key, writer(newValue));\n                }\n            },\n            subscribe(): Subscription {\n                return fromEvent(window, 'storage').subscribe(() => {\n                    value$.next(read());\n                });\n            }\n        }\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport type DatabaseAccessEnum = 'none' | 'own' | 'countries' | 'all';\n\nexport const DatabaseAccessEnum = {\n    None: 'none' as DatabaseAccessEnum,\n    Own: 'own' as DatabaseAccessEnum,\n    Countries: 'countries' as DatabaseAccessEnum,\n    All: 'all' as DatabaseAccessEnum\n};\n\n","import { Injectable } from '@angular/core';\nimport { AccessTokenService } from \"./access-token.service\";\nimport {\n    catchError,\n    distinctUntilChanged,\n    finalize,\n    first,\n    map,\n    mapTo,\n    share,\n    shareReplay,\n    switchMap,\n    tap\n} from \"rxjs/operators\";\nimport { ApiService, User, UserService } from \"../../generated/api\";\nimport { BehaviorSubject, Observable, of, throwError, timer } from \"rxjs\";\nimport { ParsedToken, TokenPair } from \"../util/data\";\nimport { ValidAccessTokenHolderService } from \"./valid-access-token-holder.service\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LoginService {\n\n    private gettingTokens$ = new BehaviorSubject<boolean>(false);\n    readonly currentValidAccessToken: Observable<ParsedToken | null>;\n    readonly currentUser: Observable<User | null>;\n    readonly loggedIn: Observable<boolean>;\n\n    constructor(\n        private readonly accessTokenService: AccessTokenService,\n        private readonly validAccessTokenHolderService: ValidAccessTokenHolderService,\n        private readonly apiService: ApiService,\n        private readonly userService: UserService,\n    ) {\n        this.currentValidAccessToken = this.accessTokenService.tokens.pipe(\n            map(tokens => tokens?.access),\n            distinctUntilChanged(),\n            switchMap(accessToken => {\n                if (accessToken == null) {\n                    // console.log('// no token: not logged in, valid token will also be null');\n                    // no token: not logged in, valid token will also be null\n                    return of(null);\n                } else if (accessToken.expires < new Date()) {\n                    // console.log('token expired');\n                    // if it is expired already, subscription below will refresh it\n                    // and we will then get the new one here\n                    // so do nothing here yet\n                    return of();\n                } else {\n                    // console.log('// we have a token that we think is valid')\n                    // we have a token that we think is valid\n                    // check that it actually is valid\n                    return this.apiService.apiTokenVerifyCreate({\n                        token: accessToken.token\n                    }).pipe(\n                        mapTo(accessToken),\n                        catchError((err) => {\n                            console.warn('Token verify failed', err);\n                            return of(null);\n                        }),\n                    );\n                }\n            }),\n            shareReplay(1)\n        );\n\n        this.currentValidAccessToken.subscribe(token => this.validAccessTokenHolderService.setAccessToken(token?.token));\n\n        this.currentUser = this.currentValidAccessToken.pipe(\n            distinctUntilChanged(),\n            switchMap(accessToken => {\n                return accessToken == null ? [null] : this.userService.userRetrieve()\n            }),\n            shareReplay(1)\n        );\n\n        this.loggedIn = this.currentUser.pipe(\n            map(user => user != null),\n            distinctUntilChanged()\n        );\n\n        this.accessTokenService.tokens.pipe(\n            switchMap(tokens => {\n                if (tokens == null) {\n                    // console.log(\"tokens are null\");\n                    return of<TokenPair<ParsedToken>>();\n                } else {\n                    return (tokens.access.expires.getTime() <= Date.now() ? of(1) : timer(tokens.access.expires)).pipe(\n                        first(),\n                        // tap(t => console.log(\"token expired\", t)),\n                        mapTo(tokens)\n                    );\n                }\n            }),\n            switchMap((tokens) => {\n                return this.gettingTokens$.pipe(\n                    first(getting => !getting),\n                    tap(() => this.gettingTokens$.next(true)),\n                    switchMap(() => this.refreshAccessToken(tokens)),\n                    tap(newTokens => this.accessTokenService.setTokens(newTokens)),\n                    finalize(() => this.gettingTokens$.next(false))\n                );\n            }),\n        ).subscribe();\n    }\n\n    get isLoggedIn(): Observable<boolean> {\n        return this.currentUser.pipe(\n            map(u => u != null)\n        );\n    }\n\n    login(email: string, password: string): Observable<string | null> {\n        return this.gettingTokens$.pipe(\n            first(getting => !getting),\n            tap(() => this.gettingTokens$.next(true)),\n            switchMap(() => {\n                return this.apiService.apiTokenCreate({\n                    email,\n                    password\n                } as any)\n            }),\n            tap((result: any) => { // OpenAPI docs are wrong\n                this.accessTokenService.setTokens({\n                    access: result.access,\n                    refresh: result.refresh\n                });\n            }),\n            mapTo(null),\n            catchError(err => {\n                if (err instanceof HttpErrorResponse && err.status === 401) {\n\n                    return of(err?.error?.detail || err.message);\n                } else {\n                    return throwError(err);\n                }\n            }),\n            finalize(() => this.gettingTokens$.next(false)),\n            share(),\n        );\n    }\n\n    logout(): Observable<void> {\n        return this.gettingTokens$.pipe(\n            first(getting => !getting),\n            tap(() => this.accessTokenService.setTokens(null)),\n            mapTo(undefined)\n        );\n    }\n\n    private refreshAccessToken(tokens: TokenPair<ParsedToken>): Observable<TokenPair<string> | null> {\n        return this.apiService.apiTokenRefreshCreate({\n            refresh: tokens.refresh.token\n        } as any).pipe(\n            map((apiResponse: any) => { // OpenAPI docs are wrong\n                return {\n                    access: apiResponse.access,\n                    refresh: tokens.refresh.token\n                }\n            }),\n            catchError(err => {\n                console.error('Failed refreshing token', err);\n                return of(null);\n            }),\n        );\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {\n    Components,\n    ComponentsService,\n    CountriesService,\n    Country,\n    LaboratoriesService,\n    Laboratory,\n    Level,\n    LevelsService,\n    Mycotoxins,\n    MycotoxinsService,\n    Products,\n    ProductsService,\n    SampleTypes,\n    SampleTypesService,\n    Species,\n    SpeciesService\n} from '../../generated/api';\nimport {BehaviorSubject, combineLatest, forkJoin, Observable, of} from 'rxjs';\nimport {catchError, distinctUntilChanged, filter, finalize, first, map, mapTo, shareReplay, single, skipWhile, startWith, switchMap, tap, throttleTime} from 'rxjs/operators';\nimport {LanguageService} from './language.service';\nimport {LoginService} from './login.service';\n\nexport interface ApiData {\n    readonly countries: Country[];\n    readonly species: Species[];\n    readonly laboratories: Laboratory[];\n    readonly sampleTypes: SampleTypes[];\n    readonly mycotoxins: Mycotoxins[];\n    readonly products: Products[];\n    readonly levels: Level[];\n    readonly components: Components[];\n}\n\nexport type HasId = {\n    id: string;\n}\n\nexport interface ApiDataIdx {\n    readonly sampleTypes: Map<string, SampleTypes>;\n    readonly species: Map<string, Species>;\n    readonly countries: Map<string, Country>;\n    readonly levels: Map<string, Level>;\n    readonly products: Map<string, Products>;\n    readonly components: Map<string, Components>;\n}\n\nexport interface ProcessedProduct {\n    id: string;\n    name: string;\n    logo?: string | null;\n}\n\ntype LoadState = 'initial' | 'loading' | 'loaded' | 'error';\n\ninterface ComponentsCache {\n    sampleTypeId: string;\n    speciesId: string;\n    languageId: string;\n    components: Components[];\n}\n\nexport function makeIndex<T extends HasId>(input: T[]): Map<string, T> {\n    return new Map(input.map(value => [value.id, value]))\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DataService {\n\n    private readonly state$ = new BehaviorSubject<LoadState>('initial');\n    private readonly data$ = new BehaviorSubject<ApiData | null>(null);\n    private readonly componentsLoading$ = new BehaviorSubject<boolean>(false);\n    private readonly lastComponents$ = new BehaviorSubject<ComponentsCache | null>(null);\n    private readonly dataIdx$: Observable<ApiDataIdx | null>;\n\n    loading = this.state$.pipe(\n        map(state => state === 'loading' || state === 'initial'),\n        distinctUntilChanged()\n    );\n\n    constructor(\n        private readonly countryService: CountriesService,\n        private readonly speciesService: SpeciesService,\n        private readonly laboratoriesService: LaboratoriesService,\n        private readonly sampleTypesService: SampleTypesService,\n        private readonly componentsService: ComponentsService,\n        private readonly mycotoxinsService: MycotoxinsService,\n        private readonly productsService: ProductsService,\n        private readonly levelsService: LevelsService,\n        private readonly loginService: LoginService,\n        private readonly languageService: LanguageService,\n    ) {\n        this.dataIdx$ = this.data$.pipe(\n            map<ApiData | null, ApiDataIdx | null>(apiData => {\n                if (apiData == null) return null;\n                return {\n                    sampleTypes: makeIndex(apiData.sampleTypes),\n                    species: makeIndex(apiData.species),\n                    countries: makeIndex(apiData.countries),\n                    levels: makeIndex(apiData.levels),\n                    products: makeIndex(apiData.products),\n                    components: makeIndex(apiData.components),\n                }\n            }),\n            shareReplay(1)\n        );\n\n        const languageChange = this.languageService.currentLanguage.pipe(\n            distinctUntilChanged()\n        );\n        const tokenChange = this.loginService.currentValidAccessToken.pipe(\n            distinctUntilChanged((a, b) => a?.userId === b?.userId)\n        );\n        combineLatest([languageChange, tokenChange]).pipe(\n            throttleTime(400, undefined, {leading: true, trailing: true}),\n            switchMap(() => this.reload()),\n        ).subscribe();\n    }\n\n    get data(): Observable<ApiData> {\n        return this.data$.pipe(filter(d => d != null));\n    }\n\n    get dataIdx(): Observable<ApiDataIdx> {\n        return this.dataIdx$.pipe(filter(d => d != null));\n    }\n\n    get<T extends keyof ApiData>(key: T): Observable<ApiData[T]> {\n        return this.data.pipe(\n            map(data => data[key])\n        );\n    }\n\n    getIdx<T extends keyof ApiDataIdx>(key: T): Observable<ApiDataIdx[T]> {\n        return this.dataIdx.pipe(\n            map(data => data[key])\n        );\n    }\n\n    getComponents(sampleTypeId: string, speciesId: string): Observable<Components[]> {\n        return this.doGetComponents(sampleTypeId, speciesId).pipe(shareReplay(1));\n    }\n\n    getComponentsIdx(sampleTypeId: string, speciesId: string): Observable<Map<string, Components>> {\n        return this.doGetComponents(sampleTypeId, speciesId).pipe(\n            map(components => makeIndex(components)),\n            shareReplay(1)\n        );\n    }\n\n    reload(): Observable<void> {\n        return this.awaitNotLoading().pipe(\n            switchMap(() => this.doReload())\n        );\n    }\n\n    processProducts(countryId: string, products: Products[]): ProcessedProduct[] {\n        return products.map(product => {\n            const countryRule = product.product_country_rules.find(rule => rule.country === countryId);\n            if (countryRule == null) {\n                return product;\n            } else {\n                return {\n                    id: product.id,\n                    ...countryRule\n                };\n            }\n        })\n    }\n\n    private doGetComponents(sampleTypeId: string, speciesId: string): Observable<Components[]> {\n        return this.languageService.currentLanguage.pipe(\n            switchMap(languageId => this.getComponentsOnce(languageId, sampleTypeId, speciesId)),\n        );\n    }\n\n    private getComponentsOnce(languageId: string, sampleTypeId: string, speciesId: string): Observable<Components[]> {\n        return this.awaitComponentsNotLoading().pipe(\n            tap(() => this.componentsLoading$.next(true)),\n            switchMap(() => this.maybeGetComponentsFromCache(languageId, sampleTypeId, speciesId)),\n            finalize(() => this.componentsLoading$.next(false)),\n        );\n    }\n\n    private maybeGetComponentsFromCache(languageId: string, sampleTypeId: string, speciesId: string): Observable<Components[]> {\n        const current = this.lastComponents$.getValue();\n        if (current == null || current.sampleTypeId !== sampleTypeId || current.speciesId !== speciesId || current.languageId !== languageId) {\n            return this.componentsService.componentsList2(sampleTypeId, speciesId).pipe(\n                tap(components => this.lastComponents$.next({languageId, sampleTypeId, speciesId, components})),\n                single()\n            );\n        } else {\n            return of(current.components)\n        }\n    }\n\n    private awaitComponentsNotLoading(): Observable<void> {\n        return this.componentsLoading$.pipe(\n            skipWhile(loading => loading),\n            first(),\n            mapTo(undefined)\n        );\n    }\n\n    private awaitNotLoading(): Observable<void> {\n        return this.state$.pipe(\n            skipWhile(state => state === 'loading'),\n            first(),\n            mapTo(undefined)\n        );\n    }\n\n    private doReload(): Observable<void> {\n        return forkJoin({\n            countries: this.countryService.countriesList(),\n            species: this.speciesService.speciesList(),\n            laboratories: this.laboratoriesService.laboratoriesList(),\n            sampleTypes: this.sampleTypesService.sampleTypesList(),\n            mycotoxins: this.mycotoxinsService.mycotoxinsList(),\n            products: this.productsService.productsList(),\n            levels: this.levelsService.levelsList(),\n            components: this.componentsService.componentsList(),\n        }).pipe(\n            tap((data) => {\n                this.data$.next(data);\n            }),\n            mapTo('loaded' as const),\n            catchError(err => {\n                console.warn('Failed loading country data', err);\n                return ['error'] as const;\n            }),\n            startWith('loading' as const),\n            tap(state => this.state$.next(state)),\n            mapTo(undefined)\n        );\n    }\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SendReportService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param assessmentId \n     * @param secretToken \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public sendReportCreate(assessmentId: string, secretToken: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public sendReportCreate(assessmentId: string, secretToken: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public sendReportCreate(assessmentId: string, secretToken: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public sendReportCreate(assessmentId: string, secretToken: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (assessmentId === null || assessmentId === undefined) {\n            throw new Error('Required parameter assessmentId was null or undefined when calling sendReportCreate.');\n        }\n        if (secretToken === null || secretToken === undefined) {\n            throw new Error('Required parameter secretToken was null or undefined when calling sendReportCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/backend/masterdata/send-report/${encodeURIComponent(String(assessmentId))}/${encodeURIComponent(String(secretToken))}/`,\n            null,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {Components, Country, Level, Mycotoxins, SampleTypes, Species, UserAssessmentInput, UserAssessmentSample} from \"../../generated/api\";\nimport {ProcessedProduct} from \"../services/data.service\";\nimport {unzip} from \"zlib\";\n\nexport interface NamedSample {\n    readonly componentId: string;\n    readonly sampleName: string;\n    readonly inclusionRate: number | null;\n}\n\nexport interface GeneralFormData {\n    readonly customerName: string | null;\n    readonly customerId: number | null;\n    readonly countryId: string;\n    readonly speciesId: string;\n    readonly testLaboratoryId: string | null;\n    readonly sampleTypeId: string;\n    readonly recipientEmails: string[] | null;\n}\n\nexport interface SamplesFormData {\n    readonly samples: ReadonlyArray<NamedSample>;\n}\n\nexport interface ConcentrationEntry {\n    readonly mycotoxinId: string;\n    readonly value: number;\n}\n\nexport interface SingleConcentrationFormData {\n    readonly concentrations: ReadonlyArray<ConcentrationEntry>;\n}\n\nexport interface ConcentrationFormData {\n    readonly entries: ReadonlyArray<SingleConcentrationFormData>;\n}\n\nexport interface TokenPair<T> {\n    readonly refresh: T;\n    readonly access: T;\n}\n\nexport function isRawTokenPair(input: unknown): input is TokenPair<string> {\n    return typeof input === 'object' && typeof input['refresh'] === 'string' && typeof input['access'] === 'string';\n}\n\nexport interface ParsedToken {\n    readonly token: string;\n    readonly expires: Date;\n    readonly userId: string | number | null;\n}\n\nexport interface ResultInput {\n    readonly generalForm: GeneralFormData;\n    readonly samplesForm: SamplesFormData;\n    readonly concentrationForm: ConcentrationFormData;\n    readonly selectedProductId: string | null;\n}\n\nexport interface ProcessedProductRecommendation {\n    product: ProcessedProduct | null;\n    text: string | null;\n}\n\nexport interface MycotoxinResultValue {\n    display: string;\n    level: Level | null;\n}\n\nexport interface MycotoxinResultRow {\n    mycotoxin: Mycotoxins;\n    values: Array<MycotoxinResultValue>;\n}\n\nexport interface ResultSampleData {\n    readonly apiData: UserAssessmentSample;\n    recommendation: ProcessedProductRecommendation | null;\n    sampleRisk: Level | null;\n    component: Components | null;\n    inclusionRateDisplay: string | null;\n    readonly bwFactor: number | null;\n    readonly fcrFactor: number | null;\n}\n\nexport interface ResultOutput {\n    readonly apiData: UserAssessmentInput;\n    readonly species: Species;\n    readonly sampleType: SampleTypes;\n    readonly country: Country;\n    readonly totalRiskLevel: Level | null;\n    readonly totalRecommendedProduct: ProcessedProductRecommendation | null;\n    readonly dateString: string;\n    readonly mycotoxinRows: MycotoxinResultRow[];\n    readonly samples: ResultSampleData[];\n    readonly totalBwFactor: number | null;\n    readonly totalFcrFactor: number | null;\n    readonly movingRiskData: ReadonlyArray<MovingRiskData> | null;\n}\n\nexport interface MovingRiskData {\n    readonly level: Level;\n    readonly rawLevel: number;\n    readonly count: number;\n    readonly date: Date;\n}\n\nexport interface ApiResultSuccess {\n    readonly type: 'success';\n    readonly response: UserAssessmentInput;\n}\n\nexport interface ApiResultError {\n    readonly type: 'error';\n    readonly error: unknown;\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import {AfterViewInit, Component, ElementRef, OnInit, ViewChild} from '@angular/core';\n\n@Component({\n    selector: 'app-tutorial-popup',\n    templateUrl: './tutorial-popup.component.html',\n    styleUrls: ['./tutorial-popup.component.scss']\n})\nexport class TutorialPopupComponent implements OnInit, AfterViewInit {\n\n    @ViewChild('videoElement')\n    videoElement: ElementRef;\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        (this.videoElement.nativeElement as HTMLVideoElement).play().catch(err => {\n            console.error('Failed playing video', err);\n        });\n    }\n\n}\n","<div class=\"tutorial\">\n    <video src=\"/assets/tutorial_en.mp4\" controls #videoElement></video>\n</div>","import {Component} from '@angular/core';\n\n@Component({\n    selector: 'app-imprint',\n    templateUrl: './imprint.component.html',\n    styleUrls: ['./imprint.component.scss']\n})\nexport class ImprintComponent {\n\n    constructor() {\n    }\n\n}\n","<h2 ngx-translate>IMPRINT_HEADER</h2>\n<div [innerHTML]=\"'IMPRINT_TEXT'|translate\"></div>","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport {\n    HttpClient, HttpHeaders, HttpParams,\n    HttpResponse, HttpEvent, HttpParameterCodec\n} from '@angular/common/http';\nimport { CustomHttpParameterCodec } from '../encoder';\nimport { Observable } from 'rxjs';\n\nimport { UserAssessmentInput } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\n\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SampleFormService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param userAssessmentInput \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public sampleFormCreate(userAssessmentInput: any, observe?: 'body', reportProgress?: boolean, options?: { httpHeaderAccept?: 'application/json' }): Observable<any>;\n    public sampleFormCreate(userAssessmentInput: any, observe?: 'response', reportProgress?: boolean, options?: { httpHeaderAccept?: 'application/json' }): Observable<HttpResponse<any>>;\n    public sampleFormCreate(userAssessmentInput: any, observe?: 'events', reportProgress?: boolean, options?: { httpHeaderAccept?: 'application/json' }): Observable<HttpEvent<any>>;\n    public sampleFormCreate(userAssessmentInput: any, observe: any = 'body', reportProgress: boolean = false, options?: { httpHeaderAccept?: 'application/json' }): Observable<any> {\n        if (userAssessmentInput === null || userAssessmentInput === undefined) {\n            throw new Error('Required parameter userAssessmentInput was null or undefined when calling sampleFormCreate.');\n        }\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post<any>(`${this.configuration.basePath}/backend/masterdata/axxess/`,\n            userAssessmentInput,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n}\n","import {Component, EventEmitter, OnDestroy, OnInit, Output} from '@angular/core';\nimport {FormControl, FormGroup} from \"@angular/forms\";\nimport {Subject} from \"rxjs\";\nimport {distinctUntilChanged, takeUntil} from \"rxjs/operators\";\nimport {KnownLanguage, LanguageService} from \"../../../services/language.service\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {SignInComponent} from \"../sign-in/sign-in.component\";\nimport {LoginService} from \"../../../services/login.service\";\nimport {User} from \"../../../../generated/api\";\nimport {LayoutService} from \"../../../services/layout.service\";\nimport {FormDataService} from \"../../../services/form-data.service\";\nimport {Router} from \"@angular/router\";\nimport {MovingRiskPopupComponent} from \"../moving-risk-popup/moving-risk-popup.component\";\n\n@Component({\n    selector: 'app-navigation-bar',\n    templateUrl: './navigation-bar.component.html',\n    styleUrls: ['./navigation-bar.component.scss']\n})\nexport class NavigationBarComponent implements OnInit, OnDestroy {\n\n    private readonly destroyed$ = new Subject();\n\n    @Output()\n    showTutorial = new EventEmitter<void>();\n\n    currentUser: User | null = null;\n\n    knownLanguages: ReadonlyArray<KnownLanguage> = [];\n    controls = {\n        language: new FormControl(null)\n    } as const;\n    formGroup = new FormGroup(this.controls);\n\n    desktopView: boolean = false;\n\n    constructor(\n        private readonly formDataService: FormDataService,\n        private readonly layoutService: LayoutService,\n        private readonly languageService: LanguageService,\n        private readonly loginService: LoginService,\n        private readonly matDialog: MatDialog,\n        private readonly router: Router\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.languageService.currentLanguage.pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(language => {\n            this.controls.language.setValue(language, {emitEvent: false});\n        });\n        this.controls.language.valueChanges.pipe(\n            distinctUntilChanged(),\n            takeUntil(this.destroyed$)\n        ).subscribe(newLanguage => {\n            this.languageService.setLanguage(newLanguage);\n        });\n\n        this.languageService.knownLanguages.pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(knownLanguages => {\n            this.knownLanguages = knownLanguages;\n        });\n\n        this.loginService.currentUser.pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(currentUser => {\n            this.currentUser = currentUser;\n        });\n\n        this.layoutService.stepperVerticalMode.pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(verticalMode => this.desktopView = !verticalMode);\n    }\n\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n\n    signIn() {\n        this.matDialog.open(SignInComponent, {\n            autoFocus: false\n        });\n    }\n\n    reset() {\n        this.formDataService.goToRoot();\n    }\n\n    logout() {\n        this.loginService.logout().subscribe();\n    }\n\n    openMovingRisk() {\n        this.matDialog.open(MovingRiskPopupComponent, {\n            autoFocus: false,\n        });\n    }\n\n}\n","<div class=\"nav-bar-container\">\n    <div class=\"nav-bar-inner\">\n        <form [formGroup]=\"formGroup\">\n            <mat-form-field class=\"language-selector\">\n                <mat-icon matPrefix>language</mat-icon>\n                <mat-select [formControl]=\"controls.language\">\n                    <mat-option *ngFor=\"let lang of knownLanguages\" [value]=\"lang.id\">{{lang.localName}}</mat-option>\n                </mat-select>\n            </mat-form-field>\n        </form>\n        <div class=\"right\" *ngIf=\"currentUser == null\">\n            <ng-container *ngIf=\"desktopView\">\n                <button mat-stroked-button class=\"ew-stroke-button ew-small-button\" (click)=\"signIn()\"><span ngx-translate>Sign In</span></button>\n                <button mat-stroked-button class=\"ew-stroke-button ew-small-button\" routerLink=\"/registration\"><span ngx-translate>Create an account</span></button>\n                <button mat-stroked-button class=\"ew-stroke-button ew-small-button\" (click)=\"showTutorial.emit()\"><span ngx-translate>Tutorial</span></button>\n            </ng-container>\n            <ng-container *ngIf=\"!desktopView\">\n                <button mat-icon-button color=\"accent\" [matMenuTriggerFor]=\"signInMenu\">\n                    <mat-icon>menu</mat-icon>\n                </button>\n                <mat-menu #signInMenu=\"matMenu\">\n                    <button mat-menu-item (click)=\"signIn()\">\n                        <span ngx-translate>Sign In</span>\n                    </button>\n                    <button mat-menu-item routerLink=\"/registration\">\n                        <span ngx-translate>Create an account</span>\n                    </button>\n                    <button mat-menu-item (click)=\"showTutorial.emit()\">\n                        <span ngx-translate>Tutorial</span>\n                    </button>\n                </mat-menu>\n            </ng-container>\n        </div>\n        <div class=\"right\" *ngIf=\"currentUser != null\">\n            <button mat-button [matMenuTriggerFor]=\"menu\">{{ currentUser.name || currentUser.email }}\n                <mat-icon>account_circle</mat-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\">\n                <button mat-menu-item routerLink=\"/data\" *ngIf=\"currentUser.database_access != null && currentUser.database_access !== 'none'\">\n                    <mat-icon>table_chart</mat-icon>\n                    <span ngx-translate>DATA_VIEW_NAVLINKTITLE</span>\n                </button>\n                <button mat-menu-item (click)=\"openMovingRisk()\" *ngIf=\"currentUser.customer_database_access\">\n                    <mat-icon>insights</mat-icon>\n                    <span ngx-translate>MOVING_RISK_REPORT_NAVLINKTITLE</span>\n                </button>\n                <button mat-menu-item routerLink=\"/change-password\">\n                    <mat-icon>lock</mat-icon>\n                    <span ngx-translate>CHANGEPASSWORD_NAVLINKTITLE</span>\n                </button>\n                <button mat-menu-item (click)=\"showTutorial.emit()\">\n                    <mat-icon>help</mat-icon>\n                    <span ngx-translate>SIGNINBARCOMPONENT_TUTORIAL</span>\n                </button>\n                <button mat-menu-item (click)=\"logout()\">\n                    <mat-icon>logout</mat-icon>\n                    <span ngx-translate>SIGNINBARCOMPONENT_SIGNOUT</span>\n                </button>\n            </mat-menu>\n        </div>\n    </div>\n    <div class=\"header-cta\">\n        <button (click)=\"reset()\" (mousedown)=\"$event.preventDefault()\">\n            <img src=\"/assets/img/logo_masterrisk.png\" alt=\"MasterRisk\" class=\"logoimage\">\n        </button>\n    </div>\n</div>\n\n<style>\n    .nav-bar-container[_ngcontent-serverApp-c135] .header-cta[_ngcontent-serverApp-c135] {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding-bottom: 2.125rem !important;\n    width: 100%;\n}\n\n.nav-bar-container[_ngcontent-serverApp-c135] .header-cta[_ngcontent-serverApp-c135] img[_ngcontent-serverApp-c135] {\n    height: auto;\n    -o-object-fit: contain;\n    object-fit: contain;\n}\n\n.logoimage{\n    width: 270px;\nmargin-top: 20px;\n}\n</style>","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Customer } from '../model/models';\nimport { PaginatedCustomerList } from '../model/models';\nimport { UserAssessmentMovingRisk } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomersService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param customer \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public customersCreate(customer: Customer, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Customer>;\n    public customersCreate(customer: Customer, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Customer>>;\n    public customersCreate(customer: Customer, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Customer>>;\n    public customersCreate(customer: Customer, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (customer === null || customer === undefined) {\n            throw new Error('Required parameter customer was null or undefined when calling customersCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Customer>(`${this.configuration.basePath}/backend/masterdata/customers/`,\n            customer,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param page A page number within the paginated result set.\n     * @param pageSize Number of results to return per page.\n     * @param search A search term.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public customersList(page?: number, pageSize?: number, search?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PaginatedCustomerList>;\n    public customersList(page?: number, pageSize?: number, search?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PaginatedCustomerList>>;\n    public customersList(page?: number, pageSize?: number, search?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PaginatedCustomerList>>;\n    public customersList(page?: number, pageSize?: number, search?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (page !== undefined && page !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>page, 'page');\n        }\n        if (pageSize !== undefined && pageSize !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageSize, 'page_size');\n        }\n        if (search !== undefined && search !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>search, 'search');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<PaginatedCustomerList>(`${this.configuration.basePath}/backend/masterdata/customers/`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param customerId \n     * @param forMonths \n     * @param speciesId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public customersMovingRiskList(customerId: number, forMonths: number, speciesId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<UserAssessmentMovingRisk>>;\n    public customersMovingRiskList(customerId: number, forMonths: number, speciesId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<UserAssessmentMovingRisk>>>;\n    public customersMovingRiskList(customerId: number, forMonths: number, speciesId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<UserAssessmentMovingRisk>>>;\n    public customersMovingRiskList(customerId: number, forMonths: number, speciesId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (customerId === null || customerId === undefined) {\n            throw new Error('Required parameter customerId was null or undefined when calling customersMovingRiskList.');\n        }\n        if (forMonths === null || forMonths === undefined) {\n            throw new Error('Required parameter forMonths was null or undefined when calling customersMovingRiskList.');\n        }\n        if (speciesId === null || speciesId === undefined) {\n            throw new Error('Required parameter speciesId was null or undefined when calling customersMovingRiskList.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<UserAssessmentMovingRisk>>(`${this.configuration.basePath}/backend/masterdata/customers/${encodeURIComponent(String(customerId))}/moving-risk/${encodeURIComponent(String(speciesId))}/${encodeURIComponent(String(forMonths))}/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param customerId \n     * @param forMonths \n     * @param speciesId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public customersMovingRiskSendReportCreate(customerId: number, forMonths: number, speciesId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public customersMovingRiskSendReportCreate(customerId: number, forMonths: number, speciesId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public customersMovingRiskSendReportCreate(customerId: number, forMonths: number, speciesId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public customersMovingRiskSendReportCreate(customerId: number, forMonths: number, speciesId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (customerId === null || customerId === undefined) {\n            throw new Error('Required parameter customerId was null or undefined when calling customersMovingRiskSendReportCreate.');\n        }\n        if (forMonths === null || forMonths === undefined) {\n            throw new Error('Required parameter forMonths was null or undefined when calling customersMovingRiskSendReportCreate.');\n        }\n        if (speciesId === null || speciesId === undefined) {\n            throw new Error('Required parameter speciesId was null or undefined when calling customersMovingRiskSendReportCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/backend/masterdata/customers/${encodeURIComponent(String(customerId))}/moving-risk/${encodeURIComponent(String(speciesId))}/${encodeURIComponent(String(forMonths))}/send-report/`,\n            null,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RegistrationComponent} from './registration.component';\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\nimport {MatCheckboxModule} from \"@angular/material/checkbox\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {ComponentsModule} from \"../../components/components.module\";\n\n\n@NgModule({\n    declarations: [RegistrationComponent],\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        TranslateModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatProgressSpinnerModule,\n        MatCheckboxModule,\n        MatButtonModule,\n        ComponentsModule,\n    ]\n})\nexport class RegistrationModule {\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Token { \n    token: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface TokenObtainPair { \n    email: string;\n    password: string;\n    readonly access: string;\n    readonly refresh: string;\n}\n\n","export const socialLinks: { icon: string, link: string, name: string, class?: string }[] = [\n    {\n        icon: 'linkedin',\n        link: 'https://de.linkedin.com/company/ew-nutrition',\n        name: 'LinkedIn',\n        class: 'linkedin'\n    },\n    {\n        icon: 'twitter',\n        link: 'https://twitter.com/ewnutritiongmbh',\n        name: 'Twitter',\n        class: 'twitter'\n    },\n    {\n        icon: 'youtube',\n        link: 'https://www.youtube.com/channel/UCIvcb19uSOJXrUecTY8n_dA',\n        name: 'YouTube',\n        class: 'youtube'\n    },\n    {\n        icon: 'instagram',\n        link: 'https://www.instagram.com/ewnutrition/',\n        name: 'Instagram',\n        class: 'instagram'\n    },\n];","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {Observable, of, Subject} from \"rxjs\";\nimport {first, takeUntil} from \"rxjs/operators\";\nimport {ApiService} from \"../../../../generated/api\";\nimport {FormControl, FormGroup, FormGroupDirective, NgForm, Validators} from \"@angular/forms\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {ErrorStateMatcher} from \"@angular/material/core\";\nimport {TranslateService} from \"@ngx-translate/core\";\n\n@Component({\n    selector: 'app-reset-password',\n    templateUrl: './reset-password.component.html',\n    styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit, OnDestroy {\n\n    private readonly destroyed$ = new Subject();\n\n    controls = {\n        token: new FormControl(null, Validators.required),\n        newPassword: new FormControl(null, Validators.required)\n    } as const;\n    formGroup = new FormGroup(this.controls);\n\n    passwordErrorMatcher: ErrorStateMatcher;\n    submitted: boolean = false;\n    error: Observable<string> | null = null;\n    loading: boolean = false;\n    valid: boolean = true;\n    token: string | null = null;\n\n    constructor(\n        private readonly route: ActivatedRoute,\n        private readonly apiService: ApiService,\n        private readonly translateService: TranslateService,\n    ) {\n        const component = this;\n        this.passwordErrorMatcher = new class extends ErrorStateMatcher {\n            isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n                return super.isErrorState(control, form) || component.error != null;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.route.params.pipe(\n            first(),\n            takeUntil(this.destroyed$)\n        ).subscribe(routeParams => {\n            this.token = routeParams['token'];\n            if (this.token) {\n                this.controls.token.setValue(this.token);\n                this.controls.token.disable();\n            } else {\n                this.controls.token.enable();\n            }\n        })\n    }\n\n    get hasToken(): boolean {\n        return this.token != null;\n    }\n\n    submit() {\n        if (this.formGroup.valid) {\n            this.loading = true;\n            this.error = null;\n            this.apiService.apiPasswordResetConfirmCreate({\n                password: this.controls.newPassword.value,\n                token: this.controls.token.value\n            }).pipe(\n                takeUntil(this.destroyed$),\n            ).subscribe({\n                next: () => {\n                    this.loading = false;\n                    this.submitted = true;\n                },\n                error: err => {\n                    this.loading = false;\n                    console.error('Reset Password failed', err);\n                    if (err instanceof HttpErrorResponse && Math.floor(err.status / 100) === 4 && typeof err.error === 'object' && Array.isArray(err.error.password)) {\n                        this.error = of(err.error.password.map(p => String(p)).join(', '));\n                    } else {\n                        this.error = this.translateService.get('RESETPASSWORD_FAILED');\n                    }\n                }\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n\n}\n","<h2 ngx-translate>RESET_PASSWORD_HEADER</h2>\n<ng-container *ngIf=\"!submitted\">\n    <form [formGroup]=\"formGroup\" class=\"form-container\" (ngSubmit)=\"submit()\">\n        <mat-form-field>\n            <mat-label>\n              <span ngx-translate>RESET_PASSWORD_TOKEN_LABEL</span>\n            </mat-label>\n            <input matInput [formControl]=\"controls.token\">\n            <mat-error>\n                <ng-container *ngIf=\"controls.token.errors?.required\">\n                    <span ngx-translate>\n                      RESET_PASSWORD_TOKEN_ERROR_REQUIRED\n                    </span>\n                </ng-container>\n            </mat-error>\n        </mat-form-field>\n        <mat-form-field>\n            <mat-label>\n              <span ngx-translate>RESET_PASSWORD_NEW_PASSWORD_LABEL</span>\n            </mat-label>\n            <input matInput [formControl]=\"controls.newPassword\" [errorStateMatcher]=\"passwordErrorMatcher\">\n            <mat-error>\n                <ng-container *ngIf=\"error != null\">\n                    {{ error|async }}\n                </ng-container>\n                <ng-container *ngIf=\"error == null && controls.newPassword.errors?.required\">\n                    <span ngx-translate>\n                      RESET_PASSWORD_NEW_PASSWORD_ERROR_REQUIRED\n                    </span>\n                </ng-container>\n            </mat-error>\n        </mat-form-field>\n        <div class=\"button-container\">\n            <button mat-flat-button color=\"primary\">\n              <span ngx-translate>RESET_PASSWORD_SUBMIT</span>\n            </button>\n            <mat-spinner [style]=\"{visibility: loading ? 'visible' : 'hidden'}\" [diameter]=\"30\"></mat-spinner>\n        </div>\n    </form>\n</ng-container>\n<ng-container *ngIf=\"submitted\">\n    <p [innerHTML]=\"'LOSTPASSWORD_SUCCESSTEXT'|translate\"></p>\n</ng-container>\n","import {Component, OnInit} from '@angular/core';\nimport {socialLinks} from \"../../../util/social-links\";\nimport {Router} from \"@angular/router\";\nimport {FormDataService} from \"../../../services/form-data.service\";\n\n@Component({\n    selector: 'app-social-bar',\n    templateUrl: './social-bar.component.html',\n    styleUrls: ['./social-bar.component.scss']\n})\nexport class SocialBarComponent implements OnInit {\n\n    socialLinks = socialLinks;\n\n    constructor(\n        private readonly router: Router,\n        private readonly formDataService: FormDataService,\n    ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    goToHome() {\n        this.formDataService.goToRoot();\n    }\n\n}\n","<mat-toolbar color=\"primary\">\n    <mat-toolbar-row class=\"socialbar\">\n        <span class=\"title\" (click)=\"goToHome()\">\n            <!-- <span class=\"first-word\">Risk</span>Cloud -->\n            <img src=\"/assets/img/logo-top.png\" alt=\"MasterRisk\" class=\"logoimage\" class=\"logo-top\">\n        </span>\n    </mat-toolbar-row>\n</mat-toolbar>\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, Pipe, QueryList, SimpleChanges, ViewChild, ViewChildren } from '@angular/core';\nimport { combineLatest, Observable, ReplaySubject, Subject } from \"rxjs\";\nimport { debounceTime, distinctUntilChanged, filter, finalize, map, shareReplay, startWith, switchMap, takeUntil } from \"rxjs/operators\";\nimport { MovingRiskData, ResultOutput } from \"../../../util/data\";\nimport type { Chart } from 'chart.js';\nimport { Level, SendReportService, Species } from \"../../../../generated/api\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { AlertComponent, AlertData } from \"../alert/alert.component\";\nimport { LoginService } from \"../../../services/login.service\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { CurrentLanguageService } from \"../../../services/current-language.service\";\nimport { DataService } from \"../../../services/data.service\";\nimport { ChartJsService } from \"../../../services/chart-js.service\";\nimport jspdf from 'jspdf';\nimport html2canvas from 'html2canvas';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n    selector: 'app-result',\n    templateUrl: './result.component.html',\n    styleUrls: ['./result.component.scss']\n})\nexport class ResultComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n\n    private readonly destroyed$ = new Subject();\n    private readonly resultOutput$ = new ReplaySubject<ResultOutput | null>(1);\n    private chartJsAndData$: Observable<[typeof Chart, Chart.ChartConfiguration[]] | null>;\n    @Input()\n    resultOutput: any | null = null;\n\n    @Input()\n    apiErrors: unknown | null = null;\n\n    @Input()\n    externalReport: boolean = false;\n\n    @Input()\n    showButtons: boolean = true;\n\n    @Output()\n    restart = new EventEmitter<void>();\n    @ViewChild('pdfElement')\n    pdfElement: ElementRef;\n    htmlData: any;\n    joinedEmailRecipients: string | null = null;\n\n    private sending$ = new Subject<boolean>();\n    summary: any;\n    loggedIn = false;\n    haveCharts = false;\n    chartsLoaded = false;\n    species: Species | null;\n\n    movingRiskData: ReadonlyArray<MovingRiskData> | null;\n\n    sending = false;\n    reportSent = false;\n\n    fillerColumns: number[] = [];\n\n    @ViewChildren('canvasElement')\n    canvasElements: QueryList<ElementRef<HTMLCanvasElement>>;\n    levels: Level[] | null = null;\n\n    constructor(\n        private readonly chartJsService: ChartJsService,\n        private readonly sendReportService: SendReportService,\n        private readonly loginService: LoginService,\n        private readonly matDialog: MatDialog,\n        private readonly translateService: TranslateService,\n        private readonly languageService: CurrentLanguageService,\n        private readonly dataService: DataService,\n        private readonly httpCLient: HttpClient,\n    ) {\n    }\n    ngOnInit(): void {\n        this.dataService.get('levels').pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(levels => this.levels = levels);\n        this.resultOutput$.pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(resultOutput => {\n            this.summary = this.resultOutput?.pop();\n            this.joinedEmailRecipients = resultOutput?.apiData?.email_recipients?.join(', ') ?? null;\n            this.species = resultOutput?.species;\n            this.fillerColumns = resultOutput == null ? [] : Array.from({ length: 5 - resultOutput.samples.length });\n        });\n\n\n        this.resultOutput = {\n            \"sampleType\": [\n                {\n                    \"id\": \"feeds\",\n                    \"text\": \"Complete Feeds\",\n                    \"has_inclusion_rate\": false,\n                    \"has_total_risk\": false,\n                    \"has_bw_loss_and_fcr_graph\": true\n                },\n                {\n                    \"id\": \"diet\",\n                    \"text\": \"Diet Components\",\n                    \"has_inclusion_rate\": true,\n                    \"has_total_risk\": true,\n                    \"has_bw_loss_and_fcr_graph\": true\n                },\n                {\n                    \"id\": \"materials\",\n                    \"text\": \"Raw Materials\",\n                    \"has_inclusion_rate\": false,\n                    \"has_total_risk\": false,\n                    \"has_bw_loss_and_fcr_graph\": false\n                }\n            ],\n            \"species\": [\n                {\n                    \"id\": \"shrimp\",\n                    \"text\": \"Aqua Shrimp\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\"\n                    ]\n                },\n                {\n                    \"id\": \"tilapia\",\n                    \"text\": \"Aqua Tilapia\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\"\n                    ]\n                },\n                {\n                    \"id\": \"breeders\",\n                    \"text\": \"Poultry Breeders\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"SL\",\n                        \"SLM\",\n                        \"SLM2\",\n                        \"SLP\",\n                        \"SLP2.0\"\n                    ]\n                },\n                {\n                    \"id\": \"broilers\",\n                    \"text\": \"Poultry Broilers\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"SL\",\n                        \"SLM\",\n                        \"SLM2\",\n                        \"SLP\",\n                        \"SLP2.0\"\n                    ]\n                },\n                {\n                    \"id\": \"layers\",\n                    \"text\": \"Poultry Layers\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"SL\",\n                        \"SLM\",\n                        \"SLM2\",\n                        \"SLP\",\n                        \"SLP2.0\"\n                    ]\n                },\n                {\n                    \"id\": \"pullets\",\n                    \"text\": \"Poultry Pullets\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"SL\",\n                        \"SLM\",\n                        \"SLM2\",\n                        \"SLP\",\n                        \"SLP2.0\"\n                    ]\n                },\n                {\n                    \"id\": \"chicks\",\n                    \"text\": \"Poultry Starters\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"SL\",\n                        \"SLM\",\n                        \"SLM2\",\n                        \"SLP\",\n                        \"SLP2.0\"\n                    ]\n                },\n                {\n                    \"id\": \"beef\",\n                    \"text\": \"Ruminants Beef Cattle\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsP\"\n                    ]\n                },\n                {\n                    \"id\": \"calves\",\n                    \"text\": \"Ruminants Calves\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"MsP\"\n                    ]\n                },\n                {\n                    \"id\": \"dairy\",\n                    \"text\": \"Ruminants Dairy Cows\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"MsP\"\n                    ]\n                },\n                {\n                    \"id\": \"fattening\",\n                    \"text\": \"Swine Growing-Finisher\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"SL\",\n                        \"SLM\",\n                        \"SLM2\",\n                        \"SLP\",\n                        \"SLP2.0\"\n                    ]\n                },\n                {\n                    \"id\": \"piglets\",\n                    \"text\": \"Swine Piglets\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"SL\",\n                        \"SLM\",\n                        \"SLM2\",\n                        \"SLP\",\n                        \"SLP2.0\"\n                    ]\n                },\n                {\n                    \"id\": \"sows\",\n                    \"text\": \"Swine Sows\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"SL\",\n                        \"SLM\",\n                        \"SLM2\",\n                        \"SLP\",\n                        \"SLP2.0\"\n                    ]\n                }\n\n            ],\n            \"apiData\": {\n                \"author\": \"xxx\"\n            },\n            \"sampleTypes\":\n            {\n                \"id\": \"feeds\",\n                \"text\": \"Complete Feeds\",\n                \"has_inclusion_rate\": false,\n                \"has_total_risk\": false,\n                \"has_bw_loss_and_fcr_graph\": true\n            }\n        }\n\n        // this.loginService.loggedIn.pipe(\n        //     takeUntil(this.destroyed$)\n        // ).subscribe(loggedIn => this.loggedIn = loggedIn);\n\n        // this.sending$.pipe(\n        //     debounceTime(200),\n        //     takeUntil(this.destroyed$)\n        // ).subscribe(sending => this.sending = sending);\n\n        const chartJsData = combineLatest([this.resultOutput$, this.translateService.get('SAMPLE')]).pipe(\n            map<[ResultOutput | null, string], Chart.ChartConfiguration[] | null>(([resultOutput, sampleText]) => {\n                if (resultOutput == null || !resultOutput?.sampleType?.has_bw_loss_and_fcr_graph) {\n                    return null;\n                } else if (!resultOutput.samples.some(s => s.fcrFactor != null || s.bwFactor != null) && resultOutput.totalBwFactor == null && resultOutput.totalFcrFactor == null) {\n                    return null;\n                } else {\n                    const defaultDatasetProps: Partial<Chart.ChartDataSets> = {\n                        backgroundColor: [\n                            'rgba(255, 99, 132, 0.2)',\n                            'rgba(54, 162, 235, 0.2)',\n                            'rgba(255, 206, 86, 0.2)',\n                            'rgba(75, 192, 192, 0.2)',\n                            'rgba(153, 102, 255, 0.2)',\n                            'rgba(255, 159, 64, 0.2)'\n                        ],\n                        borderColor: [\n                            'rgba(255, 99, 132, 1)',\n                            'rgba(54, 162, 235, 1)',\n                            'rgba(255, 206, 86, 1)',\n                            'rgba(75, 192, 192, 1)',\n                            'rgba(153, 102, 255, 1)',\n                            'rgba(255, 159, 64, 1)'\n                        ],\n                        borderWidth: 1,\n                        maxBarThickness: 60\n                    };\n                    const defaultOptions = {\n                        legend: {\n                            display: false\n                        }\n                    } as const;\n                    const labels = resultOutput.sampleType.has_total_risk ? [sampleText] : resultOutput.apiData.samples.map(sample => sample.name);\n                    return [\n                        {\n                            type: 'bar',\n                            data: {\n                                labels: labels,\n                                datasets: [{\n                                    data: resultOutput.sampleType.has_total_risk ? [resultOutput.totalBwFactor ?? 0] : resultOutput.samples.map(sample => sample.bwFactor ?? 0),\n                                    ...defaultDatasetProps\n                                }],\n                            },\n                            options: {\n                                ...defaultOptions,\n                                scales: {\n                                    yAxes: [{\n                                        ticks: {\n                                            suggestedMax: 0,\n                                        }\n                                    }],\n                                },\n\n                            }\n                        },\n                        {\n                            type: 'bar',\n                            data: {\n                                labels: labels,\n                                datasets: [{\n                                    data: resultOutput.sampleType.has_total_risk ? [resultOutput.totalFcrFactor ?? 0] : resultOutput.samples.map(sample => sample.fcrFactor ?? 0),\n                                    ...defaultDatasetProps\n                                }],\n                            },\n                            options: {\n                                ...defaultOptions,\n                                scales: {\n                                    yAxes: [{\n                                        ticks: {\n                                            suggestedMin: 0,\n                                        }\n                                    }],\n                                },\n\n                            }\n                        },\n                    ]\n                }\n            }),\n            shareReplay(1),\n            takeUntil(this.destroyed$)\n        );\n\n        this.chartJsAndData$ = chartJsData.pipe(\n            switchMap(data => {\n                return data == null ? [null] : this.chartJsService.chartJs.pipe(map(chartJs => ([chartJs, data])))\n            }),\n            shareReplay(1),\n            takeUntil(this.destroyed$)\n        );\n\n        this.chartJsAndData$.subscribe(chartJsAndData => {\n            this.chartsLoaded = chartJsAndData != null;\n        });\n\n        chartJsData.subscribe(chartJsData => {\n            this.haveCharts = chartJsData != null;\n        });\n\n        this.resultOutput$.subscribe(resultOutput => {\n            this.reportSent = false;\n            this.movingRiskData = (resultOutput?.movingRiskData?.length ?? 0) > 1 ? resultOutput.movingRiskData : null;\n        })\n    }\n\n\n    ngAfterViewInit() {\n        const latestCanvas = this.canvasElements.changes.pipe(\n            startWith(0),\n            map(() => this.canvasElements.toArray().map(c => c.nativeElement)),\n            distinctUntilChanged((a, b) => {\n                if (a.length !== b.length) {\n                    return false;\n                } else {\n                    return !a.some((v, idx) => b[idx] !== v);\n                }\n            })\n        );\n\n        combineLatest([latestCanvas, this.chartJsAndData$]).pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(([canvasElements, chartJsAndData]) => {\n            if (chartJsAndData != null) {\n                ResultComponent.renderCharts(canvasElements, chartJsAndData[0], chartJsAndData[1])\n            }\n        });\n    }\n\n    ready(): boolean {\n        return (this.resultOutput != null && this.levels != null) || this.apiErrors != null\n    }\n\n    restartClick() {\n        this.restart.emit();\n    }\n\n    sendClick() {\n        if (this.resultOutput != null) {\n            this.sending$.next(true);\n            this.sendReportService.sendReportCreate(this.resultOutput.apiData.id, this.resultOutput.apiData.secret_token).pipe(\n                finalize(() => this.sending$.next(false)),\n                takeUntil(this.destroyed$)\n            ).subscribe({\n                next: () => {\n                    this.reportSent = true;\n                },\n                error: err => {\n                    console.error('Failed sending report', err);\n                    this.matDialog.open<AlertComponent, AlertData>(AlertComponent, {\n                        autoFocus: false,\n                        data: {\n                            icon: 'error',\n                            iconColor: 'warn',\n                            title: 'Failed sending report',\n                            message: 'Your report could not be sent. Please try again later.',\n                            buttons: [\n                                {\n                                    id: '',\n                                    text: 'GENERAL_OK'\n                                }\n                            ]\n                        }\n                    });\n                }\n            })\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.resultOutput) {\n            this.resultOutput$.next(this.resultOutput);\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n        this.resultOutput$.complete();\n    }\n\n    private static renderCharts(canvasElements: HTMLCanvasElement[], chartJs: typeof Chart, charts: Chart.ChartConfiguration[]) {\n        if (canvasElements.length !== charts.length) {\n            return;\n        } else {\n            for (let idx = 0; idx < canvasElements.length; idx++) {\n                new chartJs.Chart(canvasElements[idx], charts[idx]);\n            }\n        }\n    }\n    convetToPDF() {\n        this.httpCLient.get('/assets/result.html', { responseType: 'text' }).subscribe(data => {\n            let tr = ``;\n            this.resultOutput.forEach(element => {\n                tr = `${tr}  <tr>\n                <td width=\"50%\" valign=\"top\"\n                style=\"font-size:9px;color:#000; font-weight:500; font-family:Inter, sans-serif; text-align:left; padding:0px 0px 0px 20px; line-height: 25px; \">\n                ${element?.ingredients}</td>\n                <td width=\"20%\" valign=\"top\"\n                style=\"font-size:9px;color:#000; font-weight:500; font-family:Inter, sans-serif; text-align:center; padding:0px 0px 0px 0px; line-height: 25px; \">\n                ${element?.inclusion_percentage}</td>\n                <td width=\"30%\" valign=\"top\"\n              style=\"font-size:9px;color:#000; font-weight:500; font-family:Inter, sans-serif; text-align:center; padding:0px 0px 0px 0px; line-height: 25px; \">\n              ${element?.me_kcal}</td>\n            </tr>`;\n            });\n\n            this.htmlData = data\n                .replace('__Total_Sol_AX_percent', this.summary?.Total_Sol_AX_percent)\n                .replace('__Total_Formulation_Insol_AX_percentage', this.summary?.Total_Formulation_Insol_AX_percentage)\n                .replace('__Total_Sol_AX_percent', this.summary?.Total_Sol_AX_percent)\n                .replace('__Total_Improved_ME_Kcal_per_kg', this.summary?.Total_Improved_ME_Kcal_per_kg)\n                .replace('__Axxess_XY', this.summary?.Axxess_XY)\n                .replace('__FORMULATUION', tr)\n                .replace('__AX_free_ingredients', this.summary?.AX_free_ingredients)\n                .replace('__Total_Formulation_Inclusion_percentage', this.summary?.Total_Formulation_Inclusion_percentage)\n                .replace('__Total_Formulation_ME_KCALperkg', this.summary?.Total_Formulation_ME_KCALperkg)\n\n            const iframe = document.createElement(\"iframe\");\n            document.body.appendChild(iframe); // 👈 still required\n            iframe.contentWindow.document.open();\n            iframe.contentWindow.document.write(this.htmlData);\n            iframe.contentWindow.document.close();\n            html2canvas(iframe.contentWindow.document.body).then(canvas => {\n                // Few necessary setting options\n                var imgWidth = 208;\n                var pageHeight = 295;\n                var imgHeight = canvas.height * imgWidth / canvas.width;\n                var heightLeft = imgHeight;\n\n                const contentDataURL = canvas.toDataURL('image/png')\n                let pdf = new jspdf('p', 'mm', 'a4'); // A4 size page of PDF\n                var position = 0;\n                pdf.addImage(contentDataURL, 'PNG', 0, position, imgWidth, imgHeight)\n                pdf.save('new-file.pdf'); // Generated PDF\n            });\n        });\n    }\n}\n","<ng-container *ngIf=\"ready(); else: spinner\">\n    <ng-container *ngIf=\"apiErrors == null\">\n        <table class=\"results-table\" style=\"width: 100%;\">\n            <thead>\n                <tr class=\"sample-header--first\">\n                    <th scope=\"row\" class=\"sample-header__head bgnone\"> <span ngx-translate>Species</span></th>\n                    <th scope=\"row\" class=\"second-td bgnone bdrtop\" > <span ngx-translate>Broilers</span></th>\n                    <th scope=\"row\" class=\"ample-header__head bgnone\" > <span ngx-translate>Energy Upfit By AxxessXY in Complete Diet:</span></th>\n                </tr>\n            </thead>\n            <tbody>\n            <tr class=\"sample-header--second\">\n                <th scope=\"row\" ngx-translate>Total Sol AX%</th>\n                <td class=\"bgnone\">{{summary?.Total_Sol_AX_percent}}</td>\n                <td  class=\"bgnone\">&nbsp;</td>\n            </tr>\n            <tr>\n                <th scope=\"row\" ngx-translate>Total Sol AX%</th>\n                <td  class=\"bgnone\">{{summary?.Total_Formulation_Insol_AX_percentage}}</td>\n                <td  class=\"bgnone bdrtop\">&nbsp;</td>\n            </tr>\n            <tr>\n                <th scope=\"row\" ngx-translate>Total Sol AX%</th>\n                <td  class=\"bgnone\">{{summary?.Total_Improved_ME_Kcal_per_kg}}</td>\n                <td  class=\"bgnone bdrtop\">&nbsp;</td>\n            </tr>\n            <tr>\n                <th scope=\"row\"  class=\"bgnone\" ngx-translate>&nbsp;</th>\n                <th scope=\"row\"  class=\"bgnone\" ngx-translate>&nbsp;</th>\n                <td  class=\"bgnone\">{{summary?.Axxess_XY}}</td>\n            </tr>\n            </tbody>\n        </table>\n        <ng-container>\n            <p class=\"small-disclaimer heading\">\n                <span ngx-translate>Formulation</span>\n            </p>\n            <table class=\"generaltable\" cellPadding=\"0\" cellSpacing=\"0\" border=\"0\">\n                <thead>\n                    <tr  class=\"sample-header sample-header--first\">\n                        <th scope=\"row\" class=\"sample-header__head leftalign\"> <span ngx-translate>Ingredients</span></th>\n                        <th scope=\"row\" class=\"sample-header__head centeralign\"> <span ngx-translate>Inclusion</span></th>\n                        <th scope=\"row\" class=\"sample-header__head centeralign\"> <span ngx-translate>ME, Kcal/Kg</span></th>\n                    </tr>\n                </thead>\n                <tbody>\n                <tr  *ngFor=\"let row of resultOutput; let i = index\">\n                    <th scope=\"row\" ngx-translate class=\"leftalign bgbdrnone\">{{row?.ingredients}}</th>\n                    <td>{{row?.inclusion_percentage}}</td>\n                    <td>{{row?.me_kcal}}</td>\n                </tr>\n                </tbody>\n            </table>\n        </ng-container>\n\n        <ng-container>\n        \n            <table class=\"btable\" cellPadding=\"0\" cellSpacing=\"10\" border=\"0\">\n                <tbody>\n                <tr>\n                    <th colspan=\"2\" scope=\"row\" ngx-translate>Ax Free Ingredeant</th>\n                    <td colspan=\"2\">{{summary?.AX_free_ingredients}}</td>\n                </tr>\n                <!-- <tr>\n                    <th colspan=\"2\" scope=\"row\" ngx-translate>Total Sol AX%</th>\n                    <td>{{summary?.Total_Sol_AX_percent}}</td>\n                    <td>{{summary?.Total_Insol_AX_percent}}</td>\n                </tr> -->\n                <tr>\n                    <th scope=\"row\"  colspan=\"2\">Total Formulation</th>\n                    <td>{{summary?.Total_Formulation_Inclusion_percentage}}</td>\n                    <td>{{summary?.Total_Formulation_ME_KCALperkg}}</td>\n                </tr>\n\n                </tbody>\n            </table>\n\n        </ng-container>\n      \n\n        <div class=\"button-container\" *ngIf=\"showButtons\">\n            <button mat-flat-button color=\"primary\" (click)=\"sendClick()\" *ngIf=\"loggedIn\" [disabled]=\"reportSent\">\n                <ng-container *ngIf=\"!sending\">\n                    <span ngx-translate *ngIf=\"!reportSent\">STEPFOUR_SEND</span>\n                    <span ngx-translate *ngIf=\"reportSent\">STEPFOUR_POPUP_HEADING</span>\n                </ng-container>\n                <mat-spinner *ngIf=\"sending\" color=\"accent\" [diameter]=\"20\"></mat-spinner>\n            </button>\n            <button mat-flat-button color=\"primary\" (click)=\"restartClick()\">\n                <span ngx-translate>Make New Assignment</span>\n            </button>\n            <button mat-flat-button color=\"primary\" (click)=\"convetToPDF()\">\n              <span ngx-translate>Download</span>\n          </button>\n        </div>\n      </ng-container>\n    <ng-container *ngIf=\"apiErrors != null\">\n        <div ngx-translate>STEPFOUR_API_ERROR</div>\n    </ng-container>\n</ng-container>\n<ng-template #spinner>\n    <div class=\"spinner\">\n        <mat-spinner color=\"primary\"></mat-spinner>\n    </div>\n</ng-template>\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface PasswordToken { \n    password: string;\n    token: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BackendService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json\n     * @param format \n     * @param lang \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public backendApiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'de' | 'en' | 'es' | 'fr' | 'pt' | 'ru' | 'zh-tw', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.oai.openapi' | 'application/yaml' | 'application/vnd.oai.openapi+json' | 'application/json'}): Observable<{ [key: string]: any; }>;\n    public backendApiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'de' | 'en' | 'es' | 'fr' | 'pt' | 'ru' | 'zh-tw', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.oai.openapi' | 'application/yaml' | 'application/vnd.oai.openapi+json' | 'application/json'}): Observable<HttpResponse<{ [key: string]: any; }>>;\n    public backendApiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'de' | 'en' | 'es' | 'fr' | 'pt' | 'ru' | 'zh-tw', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.oai.openapi' | 'application/yaml' | 'application/vnd.oai.openapi+json' | 'application/json'}): Observable<HttpEvent<{ [key: string]: any; }>>;\n    public backendApiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'de' | 'en' | 'es' | 'fr' | 'pt' | 'ru' | 'zh-tw', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.oai.openapi' | 'application/yaml' | 'application/vnd.oai.openapi+json' | 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (format !== undefined && format !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>format, 'format');\n        }\n        if (lang !== undefined && lang !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>lang, 'lang');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/vnd.oai.openapi',\n                'application/yaml',\n                'application/vnd.oai.openapi+json',\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<{ [key: string]: any; }>(`${this.configuration.basePath}/backend/api/schema/`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {LostPasswordComponent} from './lost-password.component';\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\nimport {ComponentsModule} from \"../../components/components.module\";\n\n\n@NgModule({\n    declarations: [LostPasswordComponent],\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        TranslateModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatButtonModule,\n        MatProgressSpinnerModule,\n        ComponentsModule\n    ]\n})\nexport class LostPasswordModule {\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class Configuration {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n\n        // init default jwtAuth credential\n        if (!this.credentials['jwtAuth']) {\n            this.credentials['jwtAuth'] = () => {\n                return typeof this.accessToken === 'function'\n                    ? this.accessToken()\n                    : this.accessToken;\n            };\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { RegisterService } from \"../../../../generated/api\";\nimport { first, takeUntil } from \"rxjs/operators\";\nimport { forkJoin, Subject } from \"rxjs\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { AlertComponent, AlertData } from \"../../components/alert/alert.component\";\nimport { TranslateService } from \"@ngx-translate/core\";\n\n@Component({\n    selector: 'app-registration',\n    templateUrl: './registration.component.html',\n    styleUrls: ['./registration.component.scss']\n})\nexport class RegistrationComponent implements OnInit, OnDestroy {\n\n    private readonly destroyed$ = new Subject();\n\n    loading = false;\n    submitted = false;\n    error = false;\n    dialog: any;\n    controls = {\n        name: new FormControl('', Validators.required),\n        password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n        email: new FormControl('', [Validators.required, Validators.email]),\n        country: new FormControl('', Validators.required),\n        companyName: new FormControl('', Validators.required),\n        companyAddress: new FormControl('', Validators.required),\n        privacyAccept: new FormControl(false, Validators.requiredTrue),\n        dataSendAccept: new FormControl(false)\n    } as const;\n    formGroup = new FormGroup(this.controls);\n\n    constructor(\n        private readonly registerService: RegisterService,\n        private readonly translateService: TranslateService,\n        private readonly matDialog: MatDialog\n    ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    submit() {\n        this.submitted = true;\n\n        if (this.formGroup.valid) {\n            this.loading = true;\n            this.registerService.registerCreate({\n                name: this.controls.name.value,\n                email: this.controls.email.value,\n                country_name: this.controls.country.value,\n                company_name: this.controls.companyName.value,\n                company_address: this.controls.companyAddress.value,\n                password: this.controls.password.value,\n                privacy_policy: this.controls.privacyAccept.value,\n                nutrition_verification: this.controls.dataSendAccept.value\n            }).pipe(\n                takeUntil(this.destroyed$),\n            ).subscribe({\n                next: () => {\n                    this.loading = false;\n                    const dialog = this.matDialog.open<AlertComponent, AlertData>(AlertComponent, {\n                        data: {\n                            icon: 'error',\n                            iconColor: 'primary',\n                            title: 'Thank You',\n                            message: 'Your message has been successfully sent. we will contact you very soon',\n                            buttons: [\n                                {\n                                    id: '1',\n                                    text: 'OK'\n                                }\n                            ]\n                        },\n                        autoFocus: false\n                    });\n\n\n                    dialog.afterClosed().subscribe(result => {\n                        if (result?.button === '1') {\n                            this.formGroup.reset();\n                            this.controls.name.setErrors(null);\n                            this.controls.email.setErrors(null);\n                            this.controls.country.setErrors(null);\n                            this.controls.companyName.setErrors(null);\n                            this.controls.password.setErrors(null);\n                            this.controls.privacyAccept.setErrors(null);\n                            this.controls.dataSendAccept.setErrors(null);\n                            this.controls.companyAddress.setErrors(null);\n                            this.formGroup.markAsUntouched();\n                            this.formGroup.markAsPristine();\n                        }\n                    });\n                },\n                error: err => {\n                    this.loading = false;\n                    console.error('Registration failed', err);\n                    this.dialog = this.matDialog.open<AlertComponent, AlertData>(AlertComponent, {\n                        data: {\n                            icon: 'error',\n                            iconColor: 'warn',\n                            title: 'Registration Failed',\n                            message: err?.error?.email ? err?.error?.email?.join(',') : 'Something Went wrong, please check with adminstrator',\n                            buttons: [\n                                {\n                                    id: '2',\n                                    text: 'OK'\n                                }\n                            ]\n                        },\n                        autoFocus: false\n                    });\n                }\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n\n}\n","<div class=\"registration-container\">\n    <h2 ngx-translate>Registration</h2>\n    <ng-container>\n        <p ngx-translate>Use the form below to register. After we have successfully verified your registration, you will receive an email containing your Master Risk user data.</p>\n        <form [formGroup]=\"formGroup\" (ngSubmit)=\"submit()\">\n            <mat-form-field appearance=\"standard\">\n                <mat-label><span ngx-translate>Name*:</span></mat-label>\n                <input matInput [formControl]=\"controls.name\">\n                <mat-error *ngIf=\"controls.name.invalid\">\n                    <ng-container *ngIf=\"controls.name.errors.required\">\n                        <span ngx-translate>Please enter your Name.</span>\n                    </ng-container>\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"standard\">\n                <mat-label><span ngx-translate>Email*:</span></mat-label>\n                <input matInput type=\"email\" [formControl]=\"controls.email\">\n                <mat-error *ngIf=\"controls.email.invalid\">\n                    <ng-container *ngIf=\"controls.email.errors.required\">\n                        <span ngx-translate>Please enter your Email.</span>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"controls.email.errors.email\">\n                        <span ngx-translate>Please re-check your Email.</span>\n                    </ng-container>\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"standard\">\n                <mat-label><span ngx-translate>Password*:</span></mat-label>\n                <input matInput [formControl]=\"controls.password\">\n                <mat-error *ngIf=\"controls.password.invalid\">\n                    <ng-container *ngIf=\"controls.password.errors.required\">\n                        <span ngx-translate>Please enter your Password.</span>\n                    </ng-container>\n                    <ng-container *ngIf=\"controls.password.errors.minlength\">\n                        <span ngx-translate>Password should be at least 6 characters.</span>\n                    </ng-container>\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"standard\">\n                <mat-label><span ngx-translate>Country*:</span></mat-label>\n                <input matInput [formControl]=\"controls.country\">\n                <mat-error *ngIf=\"controls.country.invalid\">\n                    <ng-container *ngIf=\"controls.country.errors.required\">\n                        <span ngx-translate>Please enter your Country.</span>\n                    </ng-container>\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"standard\">\n                <mat-label><span ngx-translate>Company name*:</span></mat-label>\n                <input matInput [formControl]=\"controls.companyName\">\n                <mat-error *ngIf=\"controls.companyName.invalid\">\n                    <ng-container *ngIf=\"controls.companyName.errors.required\">\n                        <span ngx-translate>Please enter your Company Name.</span>\n                    </ng-container>\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"standard\">\n                <mat-label><span ngx-translate>Address of company*:</span></mat-label>\n                <textarea matInput [formControl]=\"controls.companyAddress\"></textarea>\n                <mat-error *ngIf=\"controls.companyAddress.invalid\">\n                    <ng-container *ngIf=\"controls.companyAddress.errors.required\">\n                        <span ngx-translate>Please enter your Company Address.</span>\n                    </ng-container>\n                </mat-error>\n            </mat-form-field>\n\n            <mat-checkbox [formControl]=\"controls.privacyAccept\">\n                <span ngx-translate>I have read the privacy policy*</span>\n                <mat-error *ngIf=\"submitted && controls.privacyAccept.invalid\">\n                    <ng-container *ngIf=\"controls.privacyAccept.errors.required\">\n                        <span ngx-translate>Please accept the privacy policy.</span>\n                    </ng-container>\n                </mat-error>\n            </mat-checkbox>\n\n            <mat-checkbox [formControl]=\"controls.dataSendAccept\">\n                <span ngx-translate>I accept that my data will be sent to EW Nutrition to verify the registration</span>\n            </mat-checkbox>\n\n            <div class=\"button-container\">\n                <button mat-flat-button color=\"primary\" type=\"submit\" [disabled]=\"loading\">\n                    <app-button-spinner [spinning]=\"loading\"></app-button-spinner>\n                    <span ngx-translate>Register</span>\n                </button>\n                <mat-spinner [style]=\"{visibility: loading ? 'visible' : 'hidden'}\" [diameter]=\"30\"></mat-spinner>\n            </div>\n        </form>\n    </ng-container>\n    <!-- <ng-container *ngIf=\"submitted\">\n        <p [innerHTML]=\"'REGISTRATION_SUBMITTED'|translate\"></p>\n    </ng-container> -->\n</div>","import {AfterViewInit, Component, ElementRef, Input, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges, ViewChildren} from '@angular/core';\nimport {MovingRiskData, ResultOutput} from \"../../../util/data\";\nimport {combineLatest, fromEvent, Observable, Subject} from \"rxjs\";\nimport {distinctUntilChanged, filter, map, shareReplay, startWith, switchMap, takeUntil} from \"rxjs/operators\";\nimport type {Chart} from \"chart.js\";\nimport {LanguageService} from \"../../../services/language.service\";\nimport {DataService} from \"../../../services/data.service\";\nimport {ChartJsService} from \"../../../services/chart-js.service\";\nimport {Level, Species} from \"../../../../generated/api\";\nimport {TranslateService} from \"@ngx-translate/core\";\n\n@Component({\n    selector: 'app-moving-risk-display',\n    templateUrl: './moving-risk-display.component.html',\n    styleUrls: ['./moving-risk-display.component.scss']\n})\nexport class MovingRiskDisplayComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n\n    @Input()\n    movingRiskData: ReadonlyArray<MovingRiskData>;\n\n    @Input()\n    species: Species;\n\n    @Input()\n    reportMode: boolean = false;\n\n    @ViewChildren('movingCanvasElement')\n    movingCanvasElements: QueryList<ElementRef<HTMLCanvasElement>>;\n\n    haveMovingCharts = false;\n    movingChartsLoaded = false;\n    movingRiskHeaderText: string | null = null;\n    reportHtml: string | null = null;\n\n\n    private chartJsAndMovingRiskData$: Observable<[typeof Chart, Chart.ChartConfiguration] | null>;\n    private readonly movingRiskData$ = new Subject<ReadonlyArray<MovingRiskData>>();\n    private readonly species$ = new Subject<Species>();\n    private readonly destroyed$ = new Subject();\n\n    constructor(\n        private readonly languageService: LanguageService,\n        private readonly translateService: TranslateService,\n        private readonly dataService: DataService,\n        private readonly chartJsService: ChartJsService,\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.species$.pipe(\n            switchMap(species => {\n                if (species == null) {\n                    return [null];\n                } else {\n                    return this.translateService.get('MOVING_RISKS', {species: species.text});\n                }\n            }),\n            takeUntil(this.destroyed$)\n        ).subscribe(text => this.movingRiskHeaderText = text);\n\n        const maxLevel$ = this.dataService.get('levels').pipe(\n            map(levels => Math.max(...levels.map(l => l.level_factor ?? 0)))\n        );\n\n        const movingChartData = combineLatest([this.languageService.currentLanguage, this.movingRiskData$, maxLevel$]).pipe(\n            map<[string, MovingRiskData[], number], Chart.ChartConfiguration | null>(([currentLanguage, movingRiskData, maxLevel]) => {\n                console.log(\"in compo mrd\", movingRiskData);\n                if ((movingRiskData?.length ?? 0) === 0) {\n                    return null;\n                } else {\n                    const rawLevels = movingRiskData.map(data => data.rawLevel);\n                    return {\n                        type: 'bar',\n                        data: {\n                            labels: movingRiskData.map(data => {\n                              const dateString = data.date.toLocaleDateString(currentLanguage, {month: 'long'});\n                              let countString = data.count.toLocaleString(currentLanguage, {\n                                maximumFractionDigits: 0\n                              });\n                              return `${dateString}, ${data.level.text} (${countString})`\n                            }),\n                            datasets: [{\n                                data: rawLevels,\n                                backgroundColor: movingRiskData.map(data => data.level.color ?? 'black'),\n                                borderColor: movingRiskData.map(data => data.level.color ?? 'black'),\n                                borderWidth: 1,\n                                maxBarThickness: 60\n                            }],\n                        },\n                        options: {\n                            legend: {\n                                display: false\n                            },\n                            scales: {\n                                yAxes: [{\n                                    display: false,\n                                    ticks: {\n                                        min: 0,\n                                        max: maxLevel\n                                    }\n                                }],\n                            },\n\n                        }\n                    };\n                }\n            })\n        );\n\n        this.chartJsAndMovingRiskData$ = movingChartData.pipe(\n            switchMap(data => {\n                return data == null ? [null] : this.chartJsService.chartJs.pipe(map(chartJs => ([chartJs, data])))\n            }),\n            shareReplay(1),\n            takeUntil(this.destroyed$)\n        );\n\n        this.chartJsAndMovingRiskData$.subscribe(chartJsAndData => {\n            this.movingChartsLoaded = chartJsAndData != null;\n        });\n\n        movingChartData.subscribe(chartJsData => {\n            this.haveMovingCharts = chartJsData != null;\n        });\n\n        combineLatest([this.movingRiskData$, this.languageService.currentLanguage]).pipe(\n            switchMap(([data, currentLanguage]) => {\n                if (data == null || data.length === 0) {\n                    return null;\n                }\n                const cmpLevels = (ref: Level, other: Level): number => {\n                    if (ref.level_factor < other.level_factor) {\n                        return -1;\n                    } else if (ref.level_factor > other.level_factor) {\n                        return 1;\n                    } else {\n                        return 0;\n                    }\n                };\n\n                const currentMonthLevel = data[data.length - 1].level;\n                let text;\n                if (data.length > 1) {\n                    const prevMonthLevel = data[data.length - 2].level;\n                    const cmp = cmpLevels(currentMonthLevel, prevMonthLevel);\n                    let monthsCount = 1;\n                    for (let idx = data.length - 3; idx >= 0; idx--) {\n                        const earlyMonthLevel = data[idx].level;\n                        const earlyCmp = cmpLevels(currentMonthLevel, earlyMonthLevel);\n                        if (earlyCmp !== cmp) {\n                            break;\n                        }\n                        monthsCount++;\n                    }\n                    const compareText = cmp === -1 ? 'MOVING_RISK_COMPARE_HIGHER' : cmp === 1 ? 'MOVING_RISK_COMPARE_LOWER' : 'MOVING_RISK_COMPARE_SAME';\n                    const monthsText = monthsCount === 1 ? 'MOVING_RISK_MONTHS_ONE' : 'MOVING_RISK_MONTHS_MANY';\n\n                    const adjustText = cmp === -1 ? 'MOVING_RISK_ADJUST_YES' : 'MOVING_RISK_ADJUST_NO';\n\n                    return combineLatest([\n                        this.translateService.get(monthsText, {months: monthsCount.toLocaleString(currentLanguage)}),\n                        this.translateService.get(adjustText),\n                    ]).pipe(\n                        switchMap(([monthsTranslation, adjustTranslation]) => {\n                            return this.translateService.get(compareText, {\n                                months: monthsTranslation,\n                                currentLevel: currentMonthLevel.text,\n                                adjustText: adjustTranslation\n                            })\n                        })\n                    );\n                } else {\n                    return this.translateService.get('MOVING_RISK_COMPARE_NONE', {\n                        currentLevel: currentMonthLevel.text\n                    });\n                }\n            }),\n            takeUntil(this.destroyed$)\n        ).subscribe(reportHtml => {\n            this.reportHtml = reportHtml;\n        })\n\n\n        this.movingRiskData$.next(this.movingRiskData);\n        this.species$.next(this.species);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.movingRiskData && !changes.movingRiskData.firstChange) {\n            this.movingRiskData$.next(this.movingRiskData);\n        }\n        if (changes.species && !changes.species.firstChange) {\n            this.species$.next(this.species);\n        }\n    }\n\n    ngAfterViewInit() {\n        const latestMovingCanvas = this.movingCanvasElements.changes.pipe(\n            startWith(0),\n            filter(() => this.movingCanvasElements.length === 1),\n            map(() => this.movingCanvasElements.toArray()[0].nativeElement),\n            distinctUntilChanged(),\n        );\n\n        combineLatest([latestMovingCanvas, this.chartJsAndMovingRiskData$]).pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(([movingCanvas, chartJsAndMovingRiskData]) => {\n            if (chartJsAndMovingRiskData != null) {\n                const chartJs = chartJsAndMovingRiskData[0];\n                new chartJs.Chart(movingCanvas, chartJsAndMovingRiskData[1]);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.movingRiskData$.complete();\n        this.species$.complete();\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n\n}\n","<h3 *ngIf=\"!reportMode\">{{ movingRiskHeaderText }}</h3>\n<h1 *ngIf=\"reportMode\">{{ movingRiskHeaderText }}</h1>\n<mat-spinner *ngIf=\"!movingChartsLoaded\"></mat-spinner>\n<ng-container *ngIf=\"movingChartsLoaded\">\n    <div [class.print-chart-container]=\"reportMode\">\n        <div>\n            <canvas #movingCanvasElement></canvas>\n        </div>\n    </div>\n    <div *ngIf=\"reportMode\">\n        {{reportHtml}}\n    </div>\n</ng-container>","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Products } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductsService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public productsList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<Products>>;\n    public productsList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<Products>>>;\n    public productsList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<Products>>>;\n    public productsList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<Products>>(`${this.configuration.basePath}/backend/masterdata/products/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './changePassword';\nexport * from './components';\nexport * from './contactPerson';\nexport * from './country';\nexport * from './customer';\nexport * from './database';\nexport * from './databaseAccessEnum';\nexport * from './databaseAssessment';\nexport * from './email';\nexport * from './ewStatusEnum';\nexport * from './laboratory';\nexport * from './level';\nexport * from './mycotoxins';\nexport * from './paginatedCustomerList';\nexport * from './paginatedDatabaseList';\nexport * from './passwordToken';\nexport * from './patchedChangePassword';\nexport * from './productCountryRules';\nexport * from './products';\nexport * from './registrationRequest';\nexport * from './sampleTypes';\nexport * from './species';\nexport * from './token';\nexport * from './tokenObtainPair';\nexport * from './tokenRefresh';\nexport * from './tokenVerify';\nexport * from './user';\nexport * from './userAssessmentInput';\nexport * from './userAssessmentMovingRisk';\nexport * from './userAssessmentProductRecommendation';\nexport * from './userAssessmentRecipient';\nexport * from './userAssessmentSample';\nexport * from './userAssessmentSampleContamination';\n","import {Injectable} from '@angular/core';\nimport {\n    HttpRequest,\n    HttpHandler,\n    HttpEvent,\n    HttpInterceptor\n} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {ValidAccessTokenHolderService} from \"../services/valid-access-token-holder.service\";\nimport {environment} from \"../../environments/environment\";\nimport {first, switchMap} from \"rxjs/operators\";\n\n@Injectable()\nexport class AuthHeaderInterceptor implements HttpInterceptor {\n\n    constructor(\n        private readonly validAccessTokenHolderService: ValidAccessTokenHolderService\n    ) {\n    }\n\n    intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n        if (!AuthHeaderInterceptor.needsAuthHeader(request)) {\n            return next.handle(request);\n        } else {\n            // console.log(\"waiting for access token for \", request.url);\n            return this.validAccessTokenHolderService.currentValidAccessToken.pipe(\n                first(),\n                switchMap(token => {\n                    // console.log(\"got access token for \", request.url)\n                    const newRequest = token == null ? request : request.clone({\n                        setHeaders: {\n                            'Authorization': `Bearer ${token}`\n                        }\n                    });\n                    return next.handle(newRequest);\n                })\n            );\n        }\n    }\n\n    private static needsAuthHeader(request: HttpRequest<unknown>): boolean {\n        return request.url.startsWith(environment.api) && !request.url.substr(environment.api.length).startsWith('/backend/masterdata/api/');\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Level } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LevelsService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public levelsList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<Level>>;\n    public levelsList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<Level>>>;\n    public levelsList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<Level>>>;\n    public levelsList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<Level>>(`${this.configuration.basePath}/backend/masterdata/levels/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguagesService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public languagesRetrieve(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public languagesRetrieve(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public languagesRetrieve(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public languagesRetrieve(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/backend/masterdata/languages/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { DataService } from \"./services/data.service\";\nimport { Subject } from \"rxjs\";\nimport { debounceTime, takeUntil } from \"rxjs/operators\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { TutorialPopupComponent } from \"./modules/components/tutorial-popup/tutorial-popup.component\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { LanguageService } from \"./services/language.service\";\nimport { LoginService } from './services/login.service';\nimport { AccessTokenService } from './services/access-token.service';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n\n    private readonly destroyed$ = new Subject();\n\n    loading: boolean = false;\n    loggedIn: string | null = null;\n    constructor(\n        private readonly dataService: DataService,\n        private readonly languageService: LanguageService,\n        private readonly matDialog: MatDialog,\n        private readonly route: ActivatedRoute,\n        private readonly loginService: LoginService,\n        private readonly accessTokenService: AccessTokenService,\n        private readonly router: Router,\n    ) {\n    }\n\n    async ngOnInit() {\n        this.dataService.loading.pipe(\n            debounceTime(200),\n            takeUntil(this.destroyed$)\n        ).subscribe(loading => {\n            this.loading = loading;\n        });\n\n        this.loggedIn = this.accessTokenService.currentAccessToken()\n\n        this.route.queryParamMap.pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(queryParams => {\n            const forcedLanguage = queryParams.get('forceLanguage');\n            const user = queryParams.get('user');\n            const pass = queryParams.get('pass');\n            if (forcedLanguage != null) {\n                this.languageService.setLanguage(forcedLanguage);\n            }\n            if (!this.loggedIn && user && pass) {\n                this.signIn(atob(user), atob(pass));\n            }\n        })\n\n\n    }\n    signIn(email: string, password: string) {\n        this.loginService.login(\n            email, password\n        ).pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(loginResult => {\n            this.router.navigate([], {\n                queryParams: {\n                    'user': null,\n                    'pass': null,\n                },\n                queryParamsHandling: 'merge'\n            })\n        });\n    }\n\n    showTutorial() {\n        this.matDialog.open(TutorialPopupComponent);\n    }\n\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n\n\n}\n","<table role=\"presentation\">\n    <thead><tr><td>\n        <span>\n            <img alt=\"masterRisk\" src=\"/assets/img/logo_masterrisk_black.svg\">\n            <img alt=\"ew nutrition\" src=\"/assets/img/logo_ew-nutrition.svg\">\n        </span>\n    </td></tr></thead>\n    <tbody>\n    <tr><td>\n        <div class=\"appContainer\">\n            <app-social-bar></app-social-bar>\n<!--            <div class=\"content\">-->\n<!--                <h2 style=\"margin: 2rem;\">-->\n<!--                    The Risk Tool is currently down for maintenance. Please come back later.-->\n<!--                </h2>-->\n<!--            </div>-->\n            <app-navigation-bar (showTutorial)=\"showTutorial()\"></app-navigation-bar>\n\n            <div class=\"content\" [class.loading]=\"loading\">\n                <ng-container *ngIf=\"!loading; else: spinner\">\n                    <router-outlet></router-outlet>\n                </ng-container>\n            </div>\n\n            <app-pre-footer></app-pre-footer>\n            <app-footer></app-footer>\n        </div>\n    </td></tr>\n    </tbody>\n    <tfoot><tr><td>&nbsp;</td></tr></tfoot>\n</table>\n\n<ng-template #spinner>\n    <mat-spinner></mat-spinner>\n</ng-template>\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {Customer, CustomersService, Species} from \"../../../../generated/api\";\nimport {ObservableInput, Subject} from \"rxjs\";\nimport {catchError, debounceTime, distinctUntilChanged, filter, map, startWith, switchMap, takeUntil} from \"rxjs/operators\";\nimport {LoginService} from \"../../../services/login.service\";\nimport {MatDialogRef} from \"@angular/material/dialog\";\nimport {DataService} from \"../../../services/data.service\";\n\nfunction isCustomer(value: unknown): value is Customer {\n    return value != null && typeof value === 'object' && typeof value['id'] === 'number' && typeof value['name'] === 'string';\n}\n\n@Component({\n    selector: 'app-moving-risk-popup',\n    templateUrl: './moving-risk-popup.component.html',\n    styleUrls: ['./moving-risk-popup.component.scss']\n})\nexport class MovingRiskPopupComponent implements OnInit, OnDestroy {\n\n    private readonly destroyed$ = new Subject();\n\n    readonly controls = {\n        customer: new FormControl(null, [Validators.required, control => {\n            if (!Validators.required(control) && !isCustomer(control.value)) {\n                return {'notCustomer': true}\n            }\n        }]),\n        speciesId: new FormControl(null, Validators.required),\n        months: new FormControl(6, [Validators.required, control => {\n            if (Validators.required(control)) {\n                return;\n            }\n            const float = parseFloat(control.value);\n            const int = parseInt(control.value);\n            if (float != int || int <= 0 || int > 12) {\n                return {'monthsInvalid': true}\n            }\n        }])\n    } as const;\n    readonly formGroup = new FormGroup(this.controls);\n\n    sending = false;\n    species: Species[] = [];\n    searchResults: Customer[] = [];\n\n    constructor(\n        private readonly dialogRef: MatDialogRef<MovingRiskPopupComponent>,\n        private readonly customerService: CustomersService,\n        private readonly loginService: LoginService,\n        private readonly dataService: DataService,\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.loginService.currentUser.pipe(\n            filter(user => !(user?.customer_database_access)),\n            takeUntil(this.destroyed$)\n        ).subscribe(() => this.dialogRef.close());\n\n        this.loginService.currentUser.pipe(\n            map(user => user?.customer_database_access ?? false),\n            distinctUntilChanged(),\n            switchMap<boolean, ObservableInput<Customer[]>>(customerDbAccess => {\n                if (!customerDbAccess) {\n                    return [[]];\n                } else {\n                    return this.controls.customer.valueChanges.pipe(\n                        startWith(0),\n                        map(() => this.controls.customer.value ?? ''),\n                        map(searchObj => typeof searchObj === 'string' ? searchObj : (searchObj?.name ?? '')),\n                        map(searchTerm => searchTerm.trim()),\n                        distinctUntilChanged(),\n                        debounceTime(500),\n                        switchMap(searchTerm => {\n                            return this.customerService.customersList(1, 10, searchTerm === '' ? undefined : searchTerm).pipe(\n                                map(response => response.results ?? [])\n                            )\n                        }),\n                        catchError(err => {\n                            console.error('Failed getting autocomplete', err);\n                            return [[]];\n                        })\n                    );\n                }\n            }),\n            takeUntil(this.destroyed$)\n        ).subscribe(searchResults => {\n            this.searchResults = searchResults;\n        });\n\n        this.dataService.get('species').pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(species => {\n            this.species = species;\n        })\n\n    }\n\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n\n    submit() {\n        if (this.formGroup.valid && !this.sending) {\n            this.sending = true;\n            this.customerService.customersMovingRiskSendReportCreate(\n                this.controls.customer.value.id,\n                Number(this.controls.months.value),\n                this.controls.speciesId.value\n            ).subscribe({\n                next: () => {\n                    this.sending = false;\n                    this.dialogRef.close();\n                },\n                error: err => {\n                    console.error('Failed sending report', err);\n                    this.sending = false;\n                }\n            })\n        }\n    }\n\n    customerDisplayFn(customer: Customer): string {\n        return customer?.name ?? ''\n    }\n\n}\n","<mat-card>\n    <mat-card-title>\n        <span ngx-translate>MOVING_RISK_REPORT_TITLE</span>\n    </mat-card-title>\n    <mat-card-content>\n        <form [formGroup]=\"formGroup\" (ngSubmit)=\"submit()\">\n            <div class=\"form-fields\">\n                <mat-form-field appearance=\"standard\">\n                    <mat-label>\n                        <span ngx-translate>MOVING_RISK_REPORT_CUSTOMER_LABEL</span>\n                    </mat-label>\n                    <input matInput [matAutocomplete]=\"auto\" [formControl]=\"controls.customer\">\n                    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"customerDisplayFn\">\n                        <mat-option *ngFor=\"let c of searchResults\" [value]=\"c\">{{ c.name }}</mat-option>\n                    </mat-autocomplete>\n                    <mat-error>\n                        <ng-container *ngIf=\"controls.customer.errors?.required\">\n                            <span ngx-translate>MOVING_RISK_REPORT_ERROR_CUSTOMER_REQUIRED</span>\n                        </ng-container>\n                        <ng-container *ngIf=\"controls.customer.errors?.notCustomer\">\n                            <span ngx-translate>MOVING_RISK_REPORT_ERROR_SELECT_CUSTOMER</span>\n                        </ng-container>\n                    </mat-error>\n                </mat-form-field>\n\n                <mat-form-field appearance=\"standard\">\n                    <mat-label>\n                        <span ngx-translate>MOVING_RISK_REPORT_SPECIES_LABEL</span>\n                    </mat-label>\n                    <mat-select [formControl]=\"controls.speciesId\">\n                        <mat-option *ngFor=\"let s of species\" [value]=\"s.id\">\n                            {{ s.text }}\n                        </mat-option>\n                    </mat-select>\n                    <mat-error>\n                        <ng-container *ngIf=\"controls.speciesId.errors?.required\">\n                            <span ngx-translate>MOVING_RISK_REPORT_ERROR_SPECIES_REQUIRED</span>\n                        </ng-container>\n                    </mat-error>\n                </mat-form-field>\n\n                <mat-form-field appearance=\"standard\">\n                    <mat-label>\n                        <span ngx-translate>MOVING_RISK_REPORT_MONTHS_LABEL</span>\n                    </mat-label>\n                    <input matInput [formControl]=\"controls.months\" type=\"number\">\n                    <mat-error>\n                        <ng-container *ngIf=\"controls.months.errors?.required\">\n                            <span ngx-translate>MOVING_RISK_REPORT_ERROR_MONTHS_REQUIRED</span>\n                        </ng-container>\n                        <ng-container *ngIf=\"controls.months.errors?.monthsInvalid\">\n                            <span ngx-translate>MOVING_RISK_REPORT_ERROR_MONTHS_INVALID</span>\n                        </ng-container>\n                    </mat-error>\n                </mat-form-field>\n            </div>\n\n            <div class=\"button-container\">\n                <button mat-flat-button color=\"primary\" type=\"submit\" [disabled]=\"sending\">\n                    <app-button-spinner [spinning]=\"sending\"></app-button-spinner>\n                    <span ngx-translate>MOVING_RISK_REPORT_SUBMIT</span>\n                </button>\n            </div>\n        </form>\n    </mat-card-content>\n</mat-card>","import {Component, Input} from '@angular/core';\nimport {ProcessedProduct} from \"../../../services/data.service\";\n\n@Component({\n    selector: 'app-product-display',\n    templateUrl: './product-display.component.html',\n    styleUrls: ['./product-display.component.scss']\n})\nexport class ProductDisplayComponent {\n\n    @Input()\n    product: ProcessedProduct;\n\n}\n","<img [src]=\"product.logo\" [alt]=\"product.name\" *ngIf=\"product.logo; else: text\">\n<ng-template #text>{{product.name}}</ng-template>","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Laboratory { \n    id: string;\n    text: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Country { \n    id: string;\n    region: string;\n    text: string;\n    display_recommendations?: boolean;\n}\n\n","import {MatPaginatorIntl} from \"@angular/material/paginator\";\nimport {TranslateParser, TranslateService} from \"@ngx-translate/core\";\nimport {Subject} from \"rxjs\";\nimport {Injectable} from \"@angular/core\";\n\n@Injectable()\nexport class TranslatedPaginatorI18n extends MatPaginatorIntl {\n\n    private rangeLabelIntl: string;\n\n    readonly changes: Subject<void>;\n    itemsPerPageLabel: string;\n    nextPageLabel: string;\n    previousPageLabel: string;\n    firstPageLabel: string;\n    lastPageLabel: string;\n\n    constructor(private readonly translateService: TranslateService, private readonly translateParser: TranslateParser) {\n        super();\n        this.translateService.get([\n            'PAGINATOR_ITEMS_PER_PAGE',\n            'PAGINATOR_NEXT_PAGE',\n            'PAGINATOR_PREVIOUS_PAGE',\n            'PAGINATOR_FIRST_PAGE',\n            'PAGINATOR_LAST_PAGE',\n            'PAGINATOR_RANGE'\n        ]).subscribe(translation => {\n                this.itemsPerPageLabel = translation['PAGINATOR_ITEMS_PER_PAGE'];\n                this.nextPageLabel = translation['PAGINATOR_NEXT_PAGE'];\n                this.previousPageLabel = translation['PAGINATOR_PREVIOUS_PAGE'];\n                this.firstPageLabel = translation['PAGINATOR_FIRST_PAGE'];\n                this.lastPageLabel = translation['PAGINATOR_LAST_PAGE'];\n                this.rangeLabelIntl = translation['PAGINATOR_RANGE'];\n                this.changes.next();\n            });\n    }\n\n    getRangeLabel = (page: number, pageSize: number, length: number): string => {\n        length = Math.max(length, 0);\n        const startIndex = page * pageSize;\n        const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n        return this.translateParser.interpolate(this.rangeLabelIntl, { startIndex, endIndex, length });\n    }\n}","import { Component, OnInit } from '@angular/core';\nimport {Observable, of, Subject} from \"rxjs\";\nimport {FormControl, FormGroup, FormGroupDirective, NgForm, Validators} from \"@angular/forms\";\nimport {ErrorStateMatcher} from \"@angular/material/core\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {ApiService, UserService} from \"../../../../generated/api\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {delay, first, takeUntil} from \"rxjs/operators\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\n\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.scss']\n})\nexport class ChangePasswordComponent implements OnInit {\n\n  private readonly destroyed$ = new Subject();\n\n  controls = {\n    oldPassword: new FormControl(null, Validators.required),\n    newPassword: new FormControl(null, Validators.required),\n    newPasswordRepeat: new FormControl(null, Validators.required),\n  } as const;\n  formGroup = new FormGroup(this.controls, group => {\n    const newPassword = String(this.controls.newPassword.value ?? '');\n    const newPasswordRepeat = String(this.controls.newPasswordRepeat.value ?? '');\n    if (newPassword.trim() === '' || newPasswordRepeat.trim() === '') {\n      return null;\n    }\n    return newPassword === newPasswordRepeat ? null : {noMatch: true};\n  });\n\n  passwordErrorMatcher: ErrorStateMatcher;\n  oldPasswordErrorMatcher: ErrorStateMatcher;\n  submitted: boolean = false;\n  oldPasswordError: Observable<string> | null = null;\n  error: Observable<string> | null = null;\n  loading: boolean = false;\n  valid: boolean = true;\n  token: string | null = null;\n\n  constructor(\n    private readonly route: ActivatedRoute,\n    private readonly apiService: ApiService,\n    private readonly userService: UserService,\n    private readonly translateService: TranslateService,\n  ) {\n    const component = this;\n    this.passwordErrorMatcher = new class extends ErrorStateMatcher {\n      isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return super.isErrorState(control, form) || component.error != null || form.hasError('noMatch');\n      }\n    }\n    this.oldPasswordErrorMatcher = new class extends ErrorStateMatcher {\n      isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return super.isErrorState(control, form) || component.oldPasswordError != null;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n  }\n\n  submit() {\n    if (this.formGroup.valid) {\n      this.loading = true;\n      this.error = null;\n      this.oldPasswordError = null;\n      this.userService.userChangePasswordUpdate({\n        old_password: this.controls.oldPassword.value,\n        new_password: this.controls.newPassword.value\n      }).pipe(\n        takeUntil(this.destroyed$),\n      ).subscribe({\n        next: () => {\n          this.loading = false;\n          this.submitted = true;\n        },\n        error: err => {\n          this.loading = false;\n          console.error('Change Password failed', err);\n          if (err instanceof HttpErrorResponse && Math.floor(err.status / 100) === 4 && typeof err.error === 'object') {\n            if (Array.isArray(err.error.password) && err.error.password.length !== 0) {\n              this.error = of(err.error.password.map(p => String(p)).join(', '));\n            } else if (Array.isArray(err.error.old_password) && err.error.old_password.length !== 0) {\n              this.oldPasswordError = of(err.error.old_password.map(p => String(p)).join(', '));\n            }\n          }\n          if (this.error == null && this.oldPasswordError == null) {\n            this.error = this.translateService.get('CHANGEPASSWORD_ERROR');\n          }\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n}\n","<h2 ngx-translate>CHANGEPASSWORD_HEADING</h2>\n<ng-container *ngIf=\"!submitted\">\n  <form [formGroup]=\"formGroup\" class=\"form-container\" (ngSubmit)=\"submit()\">\n    <mat-form-field>\n      <mat-label>\n        <span ngx-translate>CHANGE_PASSWORD_OLD_PASSWORD_LABEL</span>\n      </mat-label>\n      <input matInput type=\"password\" [formControl]=\"controls.oldPassword\" [errorStateMatcher]=\"oldPasswordErrorMatcher\">\n      <mat-error>\n        <ng-container *ngIf=\"oldPasswordError == null && controls.oldPassword.errors?.required\">\n          <span ngx-translate>\n            CHANGE_PASSWORD_OLD_PASSWORD_ERROR_REQUIRED\n          </span>\n        </ng-container>\n        <ng-container *ngIf=\"oldPasswordError != null\">\n          {{oldPasswordError|async}}\n        </ng-container>\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>\n        <span ngx-translate>CHANGEPASSWORD_FIELDS_PASSWORD</span>\n      </mat-label>\n      <input matInput type=\"password\" [formControl]=\"controls.newPassword\">\n      <mat-error>\n        <ng-container *ngIf=\"controls.newPassword.errors?.required\">\n          <span ngx-translate>\n            CHANGE_PASSWORD_PASSWORD_ERROR_REQUIRED\n          </span>\n        </ng-container>\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>\n        <span ngx-translate>CHANGEPASSWORD_FIELDS_PASSWORD_RPT</span>\n      </mat-label>\n      <input matInput type=\"password\" [formControl]=\"controls.newPasswordRepeat\" [errorStateMatcher]=\"passwordErrorMatcher\">\n      <mat-error>\n        <ng-container *ngIf=\"error != null\">\n          {{ error|async }}\n        </ng-container>\n        <ng-container *ngIf=\"error == null && controls.newPasswordRepeat.errors?.required\">\n          <span ngx-translate>\n            CHANGE_PASSWORD_PASSWORD2_ERROR_REQUIRED\n          </span>\n        </ng-container>\n        <ng-container *ngIf=\"error == null && formGroup.errors?.noMatch\">\n          <span ngx-translate>\n            CHANGE_PASSWORD_ERROR_NO_MATCH\n          </span>\n        </ng-container>\n      </mat-error>\n    </mat-form-field>\n    <div class=\"button-container\">\n      <button mat-flat-button color=\"primary\" [disabled]=\"loading\">\n        <app-button-spinner [spinning]=\"loading\"></app-button-spinner>\n        <span ngx-translate>CHANGEPASSWORD_FIELDS_SUBMIT</span>\n      </button>\n    </div>\n  </form>\n</ng-container>\n<ng-container *ngIf=\"submitted\">\n  <p [innerHTML]=\"'CHANGEPASSWORD_COMPLETED'|translate\"></p>\n</ng-container>\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {ApiModule, Configuration} from \"../generated/api\";\nimport {environment} from \"../environments/environment\";\nimport {HTTP_INTERCEPTORS, HttpClient, HttpClientModule} from \"@angular/common/http\";\nimport {LanguageHeaderInterceptor} from \"./interceptors/language-header.interceptor\";\nimport {ComponentsModule} from \"./modules/components/components.module\";\nimport {AuthHeaderInterceptor} from \"./interceptors/auth-header.interceptor\";\nimport {TranslateLoader, TranslateModule} from \"@ngx-translate/core\";\nimport {Observable} from \"rxjs\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {MatSelectModule} from \"@angular/material/select\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatCardModule} from \"@angular/material/card\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\nimport {MatMenuModule} from \"@angular/material/menu\";\nimport {RegistrationModule} from \"./modules/pages/registration/registration.module\";\nimport {ImprintModule} from \"./modules/pages/imprint/imprint.module\";\nimport {LostPasswordModule} from \"./modules/pages/lost-password/lost-password.module\";\nimport {ResetPasswordModule} from \"./modules/pages/reset-password/reset-password.module\";\nimport {MatPaginatorIntl} from \"@angular/material/paginator\";\nimport {TranslatedPaginatorI18n} from \"./util/pagination-i18n\";\nimport {MatNativeDateModule} from \"@angular/material/core\";\nimport {ChangePasswordModule} from \"./modules/pages/change-password/change-password.module\";\n\nexport function apiModuleConfigurationFactory(): Configuration {\n    return new Configuration({\n        basePath: environment.api,\n        credentials: {\n            'Bearer': () => undefined // dummy entry, we add this token manually using an interceptor, because we need observable support\n        }\n    })\n}\n\nexport function httpLoaderFactory(http: HttpClient): TranslateLoader {\n    return new class extends TranslateLoader {\n        getTranslation(lang: string): Observable<any> {\n            return http.get(`${environment.api}/backend/masterdata/translations/`, {\n                headers: {\n                    'Accept-Language': lang\n                }\n            })\n        }\n    }\n}\n\n@NgModule({\n    declarations: [\n        AppComponent\n    ],\n    imports: [\n        BrowserModule.withServerTransition({appId: 'serverApp'}),\n        HttpClientModule,\n        BrowserAnimationsModule,\n\n        ReactiveFormsModule,\n\n        MatToolbarModule,\n        MatIconModule,\n        MatInputModule,\n        MatButtonModule,\n        MatDialogModule,\n        MatSelectModule,\n        MatFormFieldModule,\n        MatCardModule,\n        MatProgressSpinnerModule,\n        MatMenuModule,\n        MatNativeDateModule,\n\n        ApiModule,\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: httpLoaderFactory,\n                deps: [HttpClient]\n            }\n        }),\n\n        AppRoutingModule,\n        ComponentsModule,\n        RegistrationModule,\n        ImprintModule,\n        LostPasswordModule,\n        ResetPasswordModule,\n        ChangePasswordModule\n    ],\n    providers: [\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: LanguageHeaderInterceptor,\n            multi: true\n        },\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: AuthHeaderInterceptor,\n            multi: true\n        },\n        {\n            provide: MatPaginatorIntl,\n            useClass: TranslatedPaginatorI18n\n        },\n        {\n            provide: Configuration,\n            useFactory: apiModuleConfigurationFactory,\n        }\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, FormGroupDirective, NgForm, Validators} from \"@angular/forms\";\nimport {Subject} from \"rxjs\";\nimport {finalize, first, takeUntil} from \"rxjs/operators\";\nimport {MatDialog, MatDialogRef} from \"@angular/material/dialog\";\nimport {LoginService} from \"../../../services/login.service\";\nimport {ErrorStateMatcher} from \"@angular/material/core\";\n\n@Component({\n    selector: 'app-sign-in',\n    templateUrl: './sign-in.component.html',\n    styleUrls: ['./sign-in.component.scss']\n})\nexport class SignInComponent implements OnInit, OnDestroy {\n\n    private readonly destroyed$ = new Subject();\n\n    controls = {\n        email: new FormControl('', [Validators.required, Validators.email]),\n        password: new FormControl('', [Validators.required])\n    } as const;\n\n    formGroup = new FormGroup(this.controls);\n    loginError: string | null = null;\n    signingIn: boolean = false;\n    readonly emailErrorMatcher: ErrorStateMatcher;\n\n    constructor(\n        private readonly matDialog: MatDialog,\n        private readonly dialogRef: MatDialogRef<SignInComponent>,\n        private readonly loginService: LoginService,\n    ) {\n        const component = this;\n        this.emailErrorMatcher = new class extends ErrorStateMatcher {\n            isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n                return super.isErrorState(control, form) || component.loginError != null;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n    }\n\n    close() {\n        this.dialogRef.close();\n    }\n\n    signIn() {\n        if (this.formGroup.valid) {\n            this.signingIn = true;\n            this.loginError = null;\n            this.loginService.login(\n                this.controls.email.value, this.controls.password.value\n            ).pipe(\n                first(),\n                finalize(() => this.signingIn = false),\n                takeUntil(this.destroyed$)\n            ).subscribe(loginResult => {\n                if (loginResult == null) {\n                    this.dialogRef.close();\n                } else {\n                    this.loginError = loginResult;\n                }\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n\n}\n","<mat-card>\n    <mat-card-title>\n        <span ngx-translate>Sign In</span>\n    </mat-card-title>\n    <mat-card-content>\n        <form novalidate [formGroup]=\"formGroup\" (ngSubmit)=\"signIn()\">\n            <mat-form-field appearance=\"standard\">\n                <mat-label>\n                    <span ngx-translate>E-Mail*</span>\n                </mat-label>\n                <mat-icon matSuffix>alternate_email</mat-icon>\n                <input matInput type=\"email\" [formControl]=\"controls.email\" [errorStateMatcher]=\"emailErrorMatcher\">\n                <mat-error>\n                    <ng-container *ngIf=\"loginError == null && controls.email.errors?.required\">\n                        <span ngx-translate>Please enter your Email.</span>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"loginError == null && controls.email.errors?.email\">\n                        <span ngx-translate>Please re-check your Email.</span>\n                    </ng-container>\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"standard\">\n                <mat-label>\n                    <span ngx-translate>Password*</span>\n                </mat-label>\n                <mat-icon matSuffix>lock</mat-icon>\n                <input matInput type=\"password\" [formControl]=\"controls.password\">\n                <mat-error>\n                    <ng-container *ngIf=\"controls.password.errors?.required\">\n                        <span ngx-translate>Please enter your Password</span>\n                    </ng-container>\n                </mat-error>\n            </mat-form-field>\n            <mat-error>\n                <ng-container *ngIf=\"loginError != null\">\n                    {{ loginError|translate }}\n                </ng-container>\n            </mat-error>\n            \n            <div class=\"button-container\">\n                <button mat-flat-button color=\"primary\" type=\"submit\" [disabled]=\"signingIn\">\n                    <app-button-spinner [spinning]=\"signingIn\"></app-button-spinner>\n                    <span ngx-translate>LOGIN</span>\n                </button>\n                <button mat-stroked-button type=\"button\" routerLink=\"/forgot-password\" (click)=\"close()\">\n                    <span ngx-translate>You have lost your password?</span>\n                </button>\n            </div>\n        </form>\n    </mat-card-content>\n</mat-card>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SignInComponent } from './sign-in/sign-in.component';\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { AlertComponent } from './alert/alert.component';\nimport { TranslateModule } from \"@ngx-translate/core\";\nimport { RouterModule } from \"@angular/router\";\nimport { ResultComponent } from \"./result/result.component\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\nimport { SocialBarComponent } from \"./social-bar/social-bar.component\";\nimport { NavigationBarComponent } from \"./navigation-bar/navigation-bar.component\";\nimport { FooterComponent } from \"./footer/footer.component\";\nimport { HeaderCtaComponent } from \"./header-cta/header-cta.component\";\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\nimport { MatSelectModule } from \"@angular/material/select\";\nimport { MatMenuModule } from \"@angular/material/menu\";\nimport { ProductDisplayComponent } from \"./product-display/product-display.component\";\nimport { PreFooterComponent } from \"./pre-footer/pre-footer.component\";\nimport { MatRippleModule } from \"@angular/material/core\";\nimport { ButtonSpinnerComponent } from \"./button-spinner/button-spinner.component\";\nimport { MovingRiskDisplayComponent } from \"./moving-risk-display/moving-risk-display.component\";\nimport { MovingRiskPopupComponent } from \"./moving-risk-popup/moving-risk-popup.component\";\nimport { MatAutocompleteModule } from \"@angular/material/autocomplete\";\n\nconst components = [\n    SignInComponent,\n    AlertComponent,\n    ResultComponent,\n    SocialBarComponent,\n    NavigationBarComponent,\n    FooterComponent,\n    HeaderCtaComponent,\n    ProductDisplayComponent,\n    PreFooterComponent,\n    ButtonSpinnerComponent,\n    MovingRiskDisplayComponent,\n    MovingRiskPopupComponent\n]\n\n@NgModule({\n    declarations: components,\n    exports: components,\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        TranslateModule,\n        RouterModule,\n        MatCardModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatIconModule,\n        MatButtonModule,\n        MatProgressSpinnerModule,\n        MatToolbarModule,\n        MatSelectModule,\n        MatMenuModule,\n        MatRippleModule,\n        MatAutocompleteModule,\n    ]\n})\nexport class ComponentsModule {\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Species } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpeciesService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public speciesList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<Species>>;\n    public speciesList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<Species>>>;\n    public speciesList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<Species>>>;\n    public speciesList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<Species>>(`${this.configuration.basePath}/backend/masterdata/species/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\nimport {ThemePalette} from \"@angular/material/core\";\n\nexport interface AlertButton {\n    readonly id: string;\n    readonly text: string;\n    readonly role?: 'primary' | 'default';\n}\n\nexport interface AlertData {\n    readonly title: string;\n    readonly message: string;\n    readonly icon?: string;\n    readonly iconColor?: ThemePalette;\n    readonly buttons?: ReadonlyArray<AlertButton>;\n}\n\nexport interface AlertResult {\n    readonly button?: string;\n}\n\n@Component({\n    selector: 'app-alert',\n    templateUrl: './alert.component.html',\n    styleUrls: ['./alert.component.scss']\n})\nexport class AlertComponent {\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) readonly data: AlertData,\n        private readonly dialogRef: MatDialogRef<AlertComponent, AlertResult>\n    ) {\n    }\n\n    btn(id: string) {\n        this.dialogRef.close({\n            button: id\n        });\n    }\n}\n","<h2>\n    <mat-icon *ngIf=\"data.icon\" [color]=\"data.iconColor || 'warn'\">{{data.icon}}</mat-icon>\n    {{ data.title|translate }}\n</h2>\n<p>{{ data.message|translate }}</p>\n<div class=\"button-container\">\n    <ng-container *ngFor=\"let button of data.buttons\" [ngSwitch]=\"button.role || 'default'\">\n        <button *ngSwitchCase=\"'primary'\" mat-flat-button color=\"primary\" (click)=\"btn(button.id)\">{{button.text|translate}}</button>\n        <button *ngSwitchCase=\"'default'\" mat-stroked-button (click)=\"btn(button.id)\">{{button.text|translate}}</button>\n    </ng-container>\n</div>\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface TokenRefresh { \n    readonly access: string;\n    refresh: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport type EwStatusEnum = 'intern' | 'extern';\n\nexport const EwStatusEnum = {\n    Intern: 'intern' as EwStatusEnum,\n    Extern: 'extern' as EwStatusEnum\n};\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface PatchedChangePassword { \n    old_password?: string;\n    new_password?: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Customer { \n    readonly id: number;\n    name: string;\n}\n\n","import {Component, OnInit} from '@angular/core';\nimport {socialLinks} from \"../../../util/social-links\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\n@Component({\n    selector: 'app-footer',\n    templateUrl: './footer.component.html',\n    styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent implements OnInit {\n\n    socialLinks = socialLinks;\n\n    constructor(\n        private readonly translateService: TranslateService\n    ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    contactFirstWord(): Observable<string> {\n        return this.translateService.get('LEGAL_CONNECT').pipe(\n            map((result: string) => {\n                const idx = result.indexOf(' ');\n                return idx < 0 ? result : result.substring(0, idx);\n            })\n        );\n    }\n\n    contactRest(): Observable<string> {\n        return this.translateService.get('LEGAL_CONNECT').pipe(\n            map((result: string) => {\n                const idx = result.indexOf(' ');\n                return idx < 0 ? '' : result.substring(idx);\n            })\n        );\n    }\n\n}\n","<div class=\"footer-container\">\n    <div class=\"footer\">\n        <div class=\"footer-inner\">\n            <div class=\"contact-us\">\n                <div class=\"head\">\n                    <span class=\"first-word\">{{contactFirstWord()|async}}</span>\n                    {{contactRest()|async}}\n                </div>\n                <div class=\"socialIcons\">\n                    <a mat-ripple *ngFor=\"let element of socialLinks\" [href]=\"element.link\" target=\"_blank\" [ngClass]=\"element.class == null ? [] : element.class\">\n                        <img src=\"/assets/img/{{element.icon}}.svg\" [alt]=\"element.name\">\n                    </a>\n                </div>\n            </div>\n\n            <ul class=\"links\">\n                <li><a target=\"_blank\" href=\"https://ew-nutrition.com/about-us/\" ngx-translate>LEGAL_ABOUT</a></li>\n                <li><a routerLink=\"/imprint\" ngx-translate>LEGAL_IMPRINT</a></li>\n                <li><a ngx-translate>LEGAL_PRIVACY</a></li>\n            </ul>\n        </div>\n    </div>\n</div>","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Components } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComponentsService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public componentsList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<Components>>;\n    public componentsList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<Components>>>;\n    public componentsList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<Components>>>;\n    public componentsList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<Components>>(`${this.configuration.basePath}/backend/masterdata/components/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param sampleTypeId \n     * @param speciesId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public componentsList2(sampleTypeId: string, speciesId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<Components>>;\n    public componentsList2(sampleTypeId: string, speciesId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<Components>>>;\n    public componentsList2(sampleTypeId: string, speciesId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<Components>>>;\n    public componentsList2(sampleTypeId: string, speciesId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (sampleTypeId === null || sampleTypeId === undefined) {\n            throw new Error('Required parameter sampleTypeId was null or undefined when calling componentsList2.');\n        }\n        if (speciesId === null || speciesId === undefined) {\n            throw new Error('Required parameter speciesId was null or undefined when calling componentsList2.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<Components>>(`${this.configuration.basePath}/backend/masterdata/components/${encodeURIComponent(String(speciesId))}/${encodeURIComponent(String(sampleTypeId))}/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface UserAssessmentSampleContamination { \n    mycotoxin: string;\n    value: number | null;\n    readonly level: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ContactPerson { \n    text: string;\n}\n\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {isRawTokenPair, ParsedToken, TokenPair} from \"../util/data\";\nimport {LocalStorageHandle, LocalStorageService} from \"./local-storage.service\";\nimport jwtDecode from \"jwt-decode\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AccessTokenService {\n\n    private readonly username$ = new BehaviorSubject<string | null>(null);\n    private readonly storedToken: LocalStorageHandle<TokenPair<ParsedToken>>;\n\n    constructor(\n        private readonly localStorageService: LocalStorageService,\n    ) {\n        this.storedToken = this.localStorageService.newHandle<TokenPair<ParsedToken>>(\n            'risk.token',\n            raw => {\n                const jwts = AccessTokenService.readToken(raw);\n                if (jwts == null) {\n                    return null;\n                } else {\n                   return AccessTokenService.parseJwts(jwts);\n                }\n            },\n            (token) => JSON.stringify({refresh: token.refresh.token, access: token.access.token})\n        );\n        this.storedToken.subscribe();\n    }\n\n    currentAccessToken(): string | null {\n        return this.storedToken.currentValue?.access?.token;\n    }\n\n    get tokens(): Observable<TokenPair<ParsedToken> | null> {\n        return this.storedToken.value;\n    }\n\n    setTokens(pair: TokenPair<string> | null) {\n        this.storedToken.setValue(pair == null ? null : AccessTokenService.parseJwts(pair));\n    }\n\n    private static readToken(raw: string): TokenPair<string> | null {\n        try {\n            const parsed = JSON.parse(raw);\n            return isRawTokenPair(parsed) ? parsed : null;\n        } catch (e) {\n            console.error('Failed parsing token from local storage', e);\n            return null;\n        }\n    }\n\n    private static parseJwts(pair: TokenPair<string>): TokenPair<ParsedToken> | null {\n        const access = AccessTokenService.parseJwt(pair.access);\n        const refresh = AccessTokenService.parseJwt(pair.refresh);\n        return access == null || refresh == null ? null : {access, refresh};\n    }\n\n    private static parseJwt(token: string): ParsedToken | null {\n        try {\n            const decoded = jwtDecode(token);\n            const exp = decoded['exp'];\n            if (typeof exp !== 'number') {\n                console.error('JWT has no valid exp', exp);\n                return null;\n            }\n            const expires = new Date(exp * 1000);\n            const rawUserId = decoded['user_id'];\n            const userId = rawUserId == null || (typeof rawUserId !== 'string' && typeof rawUserId !== 'number') ? null : rawUserId;\n            return {\n                expires,\n                token,\n                userId\n            };\n        } catch (e) {\n            console.error('Failed decoding JWT', e);\n            return null;\n        }\n    }\n\n\n}\n","import {Injectable} from '@angular/core';\nimport {distinctUntilChanged, map, publishReplay, single, startWith, switchMap, tap} from \"rxjs/operators\";\nimport {combineLatest, ConnectableObservable, fromEvent, Observable} from \"rxjs\";\nimport {LanguagesService} from \"../../generated/api\";\nimport {CurrentLanguageService} from \"./current-language.service\";\nimport {TranslateService} from \"@ngx-translate/core\";\n\nexport interface KnownLanguage {\n    readonly id: string;\n    readonly englishName: string;\n    readonly localName: string;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LanguageService {\n\n    readonly knownLanguages: Observable<ReadonlyArray<KnownLanguage>>;\n    readonly currentLanguage: Observable<string>;\n\n    constructor(\n        private readonly languagesService: LanguagesService,\n        private readonly currentLanguageService: CurrentLanguageService,\n        private readonly translateService: TranslateService\n    ) {\n        const languages = this.languagesService.languagesRetrieve().pipe(\n            single(),\n            map(apiLang => LanguageService.parseApiLanguages(apiLang)),\n            publishReplay(1)\n        ) as ConnectableObservable<ReadonlyArray<KnownLanguage>>;\n        languages.connect();\n        this.knownLanguages = languages;\n\n        this.currentLanguage = this.currentLanguageService.currentLanguage.pipe(\n            switchMap(currentLanguage => {\n                if (currentLanguage == null) {\n                    const languageChange = fromEvent(window, 'languagechange').pipe(startWith(0));\n                    return combineLatest([this.knownLanguages, languageChange]).pipe(\n                        map(([knownLanguages]) => {\n                            const browserLanguages = LanguageService.getBrowserLanguagePreferences();\n                            for (const bl of browserLanguages) {\n                                const foundLanguage = knownLanguages.find(kl => LanguageService.languageMatch(bl, kl.id, true));\n                                if (foundLanguage != null) {\n                                    return foundLanguage.id;\n                                }\n                            }\n                            for (const bl of browserLanguages) {\n                                const foundLanguage = knownLanguages.find(kl => LanguageService.languageMatch(bl, kl.id, false));\n                                if (foundLanguage != null) {\n                                    return foundLanguage.id;\n                                }\n                            }\n                            return knownLanguages[0].id;\n                        })\n                    );\n                } else {\n                    return [currentLanguage];\n                }\n            }),\n            distinctUntilChanged()\n        );\n        this.currentLanguage.subscribe(currentLanguage => {\n            this.translateService.use(currentLanguage)\n        });\n    }\n\n    public setLanguage(language: string) {\n        this.currentLanguageService.setLanguage(language);\n    }\n\n    private static languageMatch(browserLang: string, apiLang: string, strict: boolean): boolean {\n        if (strict) {\n            return browserLang.toLowerCase() === apiLang.toLowerCase();\n        }\n        const browserIdx = browserLang.indexOf('-');\n        const apiIdx = apiLang.indexOf('-');\n        if (browserIdx >= 0 && apiIdx >= 0) {\n            return browserLang.toLowerCase() === apiLang.toLowerCase();\n        } else {\n            const browserSub = browserIdx >= 0 ? browserLang.substring(0, browserIdx) : browserLang;\n            const apiSub = apiIdx >= 0 ? apiLang.substring(0, apiIdx) : apiLang;\n            return browserSub.toLowerCase() === apiSub.toLowerCase();\n        }\n    }\n\n    private static getBrowserLanguagePreferences(): ReadonlyArray<string> {\n        if (window.navigator.languages) {\n            return window.navigator.languages;\n        } else if (window.navigator.language) {\n            return [window.navigator.language];\n        } else {\n            return [];\n        }\n    }\n\n    private static parseApiLanguages(apiLang: unknown): ReadonlyArray<KnownLanguage> {\n        if (!Array.isArray(apiLang)) {\n            throw new Error('Cannot parse API languages');\n        }\n        return apiLang.map(el => {\n            if (!Array.isArray(el) || el.length !== 3 || el.some(l => typeof l !== 'string')) {\n                throw new Error('Cannot parse API languages');\n            }\n            return {\n                id: el[0],\n                englishName: el[1],\n                localName: el[2]\n            }\n        });\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Email } from '../model/models';\nimport { PasswordToken } from '../model/models';\nimport { Token } from '../model/models';\nimport { TokenObtainPair } from '../model/models';\nimport { TokenRefresh } from '../model/models';\nimport { TokenVerify } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * An Api View which provides a method to reset a password based on a unique token\n     * @param passwordToken \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiPasswordResetConfirmCreate(passwordToken: PasswordToken, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PasswordToken>;\n    public apiPasswordResetConfirmCreate(passwordToken: PasswordToken, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PasswordToken>>;\n    public apiPasswordResetConfirmCreate(passwordToken: PasswordToken, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PasswordToken>>;\n    public apiPasswordResetConfirmCreate(passwordToken: PasswordToken, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (passwordToken === null || passwordToken === undefined) {\n            throw new Error('Required parameter passwordToken was null or undefined when calling apiPasswordResetConfirmCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PasswordToken>(`${this.configuration.basePath}/backend/masterdata/api/password_reset/confirm/`,\n            passwordToken,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * An Api View which provides a method to request a password reset token based on an e-mail address  Sends a signal reset_password_token_created when a reset token was created\n     * @param email \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiPasswordResetCreate(email: Email, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Email>;\n    public apiPasswordResetCreate(email: Email, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Email>>;\n    public apiPasswordResetCreate(email: Email, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Email>>;\n    public apiPasswordResetCreate(email: Email, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (email === null || email === undefined) {\n            throw new Error('Required parameter email was null or undefined when calling apiPasswordResetCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Email>(`${this.configuration.basePath}/backend/masterdata/api/password_reset/`,\n            email,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * An Api View which provides a method to verify that a token is valid\n     * @param token \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiPasswordResetValidateTokenCreate(token: Token, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Token>;\n    public apiPasswordResetValidateTokenCreate(token: Token, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Token>>;\n    public apiPasswordResetValidateTokenCreate(token: Token, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Token>>;\n    public apiPasswordResetValidateTokenCreate(token: Token, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (token === null || token === undefined) {\n            throw new Error('Required parameter token was null or undefined when calling apiPasswordResetValidateTokenCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Token>(`${this.configuration.basePath}/backend/masterdata/api/password_reset/validate_token/`,\n            token,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.\n     * @param tokenObtainPair \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiTokenCreate(tokenObtainPair: TokenObtainPair, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<TokenObtainPair>;\n    public apiTokenCreate(tokenObtainPair: TokenObtainPair, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<TokenObtainPair>>;\n    public apiTokenCreate(tokenObtainPair: TokenObtainPair, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<TokenObtainPair>>;\n    public apiTokenCreate(tokenObtainPair: TokenObtainPair, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (tokenObtainPair === null || tokenObtainPair === undefined) {\n            throw new Error('Required parameter tokenObtainPair was null or undefined when calling apiTokenCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<TokenObtainPair>(`${this.configuration.basePath}/backend/masterdata/api/token/`,\n            tokenObtainPair,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.\n     * @param tokenRefresh \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiTokenRefreshCreate(tokenRefresh: TokenRefresh, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<TokenRefresh>;\n    public apiTokenRefreshCreate(tokenRefresh: TokenRefresh, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<TokenRefresh>>;\n    public apiTokenRefreshCreate(tokenRefresh: TokenRefresh, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<TokenRefresh>>;\n    public apiTokenRefreshCreate(tokenRefresh: TokenRefresh, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (tokenRefresh === null || tokenRefresh === undefined) {\n            throw new Error('Required parameter tokenRefresh was null or undefined when calling apiTokenRefreshCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<TokenRefresh>(`${this.configuration.basePath}/backend/masterdata/api/token/refresh/`,\n            tokenRefresh,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Takes a token and indicates if it is valid.  This view provides no information about a token\\&#39;s fitness for a particular use.\n     * @param tokenVerify \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiTokenVerifyCreate(tokenVerify: TokenVerify, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<TokenVerify>;\n    public apiTokenVerifyCreate(tokenVerify: TokenVerify, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<TokenVerify>>;\n    public apiTokenVerifyCreate(tokenVerify: TokenVerify, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<TokenVerify>>;\n    public apiTokenVerifyCreate(tokenVerify: TokenVerify, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (tokenVerify === null || tokenVerify === undefined) {\n            throw new Error('Required parameter tokenVerify was null or undefined when calling apiTokenVerifyCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<TokenVerify>(`${this.configuration.basePath}/backend/masterdata/api/token/verify/`,\n            tokenVerify,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface SampleTypes { \n    id: string;\n    text: string;\n    has_inclusion_rate?: boolean;\n    has_total_risk?: boolean;\n    has_bw_loss_and_fcr_graph?: boolean;\n}\n\n","import {Injectable} from '@angular/core';\nimport {BreakpointObserver, Breakpoints} from \"@angular/cdk/layout\";\nimport {Observable} from \"rxjs\";\nimport {map, shareReplay} from \"rxjs/operators\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LayoutService {\n\n    readonly stepperVerticalMode: Observable<boolean>;\n\n    constructor(\n        private readonly breakpointObserver: BreakpointObserver\n    ) {\n        this.stepperVerticalMode = breakpointObserver.observe([Breakpoints.Small, Breakpoints.XSmall]).pipe(\n            map(result => result.matches),\n            shareReplay(1)\n        );\n    }\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { PaginatedDatabaseList } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatabaseService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param assessmentCreatedAtGt \n     * @param assessmentCreatedAtGte \n     * @param assessmentCreatedAtLt \n     * @param assessmentCreatedAtLte \n     * @param ordering Which field to use when ordering the results.\n     * @param page A page number within the paginated result set.\n     * @param pageSize Number of results to return per page.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public databaseList(assessmentCreatedAtGt?: string, assessmentCreatedAtGte?: string, assessmentCreatedAtLt?: string, assessmentCreatedAtLte?: string, ordering?: string, page?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PaginatedDatabaseList>;\n    public databaseList(assessmentCreatedAtGt?: string, assessmentCreatedAtGte?: string, assessmentCreatedAtLt?: string, assessmentCreatedAtLte?: string, ordering?: string, page?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PaginatedDatabaseList>>;\n    public databaseList(assessmentCreatedAtGt?: string, assessmentCreatedAtGte?: string, assessmentCreatedAtLt?: string, assessmentCreatedAtLte?: string, ordering?: string, page?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PaginatedDatabaseList>>;\n    public databaseList(assessmentCreatedAtGt?: string, assessmentCreatedAtGte?: string, assessmentCreatedAtLt?: string, assessmentCreatedAtLte?: string, ordering?: string, page?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (assessmentCreatedAtGt !== undefined && assessmentCreatedAtGt !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>assessmentCreatedAtGt, 'assessment__created_at__gt');\n        }\n        if (assessmentCreatedAtGte !== undefined && assessmentCreatedAtGte !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>assessmentCreatedAtGte, 'assessment__created_at__gte');\n        }\n        if (assessmentCreatedAtLt !== undefined && assessmentCreatedAtLt !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>assessmentCreatedAtLt, 'assessment__created_at__lt');\n        }\n        if (assessmentCreatedAtLte !== undefined && assessmentCreatedAtLte !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>assessmentCreatedAtLte, 'assessment__created_at__lte');\n        }\n        if (ordering !== undefined && ordering !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>ordering, 'ordering');\n        }\n        if (page !== undefined && page !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>page, 'page');\n        }\n        if (pageSize !== undefined && pageSize !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageSize, 'page_size');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<PaginatedDatabaseList>(`${this.configuration.basePath}/backend/masterdata/database/`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {LocalStorageHandle, LocalStorageService} from \"./local-storage.service\";\nimport {Observable} from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CurrentLanguageService {\n\n    private readonly languageHandle: LocalStorageHandle<string>;\n\n    constructor(\n        private readonly localStorageService: LocalStorageService,\n    ) {\n        this.languageHandle = this.localStorageService.newHandle('risk.language', raw => raw, language => language);\n        this.languageHandle.subscribe();\n    }\n\n    get currentLanguage(): Observable<string | null> {\n        return this.languageHandle.value;\n    }\n\n    setLanguage(language: string) {\n        this.languageHandle.setValue(language);\n    }\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Species { \n    id: string;\n    text: string;\n    readonly has_products: Array<string>;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Email { \n    email: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TranslationsService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public translationsRetrieve(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public translationsRetrieve(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public translationsRetrieve(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public translationsRetrieve(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/backend/masterdata/translations/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {AssessmentService, UserAssessmentInput} from \"../../generated/api\";\nimport {ResultInput} from \"../util/data\";\nimport {Observable} from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ResultService {\n\n    constructor(\n        private readonly assessmentService: AssessmentService\n    ) {\n    }\n\n    getResults({generalForm, samplesForm, concentrationForm, selectedProductId}: ResultInput): Observable<UserAssessmentInput> {\n        if (samplesForm.samples.length !== concentrationForm.entries.length) {\n            console.error('samplesForm and concentrationForm mismatch: ', samplesForm, concentrationForm);\n            throw new Error('samples.length must be concentrations.length');\n        }\n        const apiInput: UserAssessmentInput = {\n            customer_name: generalForm.customerName ?? undefined,\n            customer: generalForm.customerId ?? null,\n            country: generalForm.countryId,\n            species: generalForm.speciesId,\n            test_laboratory: generalForm.testLaboratoryId ?? undefined,\n            sample_type: generalForm.sampleTypeId,\n            email_recipients: generalForm.recipientEmails?.map(email => ({address: email})) ?? [],\n            samples: samplesForm.samples.map((sample, index) => {\n                const concentrationEntry = concentrationForm.entries[index];\n                return {\n                    name: sample.sampleName,\n                    inclusion_rate: sample.inclusionRate,\n                    component: sample.componentId,\n                    contaminations: concentrationEntry.concentrations.map(concentration => {\n                        return {\n                            mycotoxin: concentration.mycotoxinId,\n                            value: concentration.value,\n                            level: undefined\n                        }\n                    }),\n                    risk: undefined,\n                    product_recommendation: undefined,\n                    fcr_factor: undefined,\n                    bw_factor: undefined\n                };\n            }),\n            selected_product: selectedProductId,\n            moving_risks: undefined,\n            total_fcr_factor: undefined,\n            total_bw_factor: undefined,\n            secret_token: undefined,\n            interaction: undefined,\n            comments: undefined,\n            author: undefined,\n            total_risk: undefined,\n            total_product_recommendation: undefined,\n            created_at: undefined,\n            id: undefined\n        };\n        return this.assessmentService.assessmentCreate(apiInput);\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { UserAssessmentInput } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AssessmentService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param userAssessmentInput \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public assessmentCreate(userAssessmentInput: UserAssessmentInput, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<UserAssessmentInput>;\n    public assessmentCreate(userAssessmentInput: UserAssessmentInput, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<UserAssessmentInput>>;\n    public assessmentCreate(userAssessmentInput: UserAssessmentInput, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<UserAssessmentInput>>;\n    public assessmentCreate(userAssessmentInput: UserAssessmentInput, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (userAssessmentInput === null || userAssessmentInput === undefined) {\n            throw new Error('Required parameter userAssessmentInput was null or undefined when calling assessmentCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<UserAssessmentInput>(`${this.configuration.basePath}/backend/masterdata/assessment/`,\n            userAssessmentInput,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param secretToken \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public assessmentRetrieve(id: string, secretToken: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<UserAssessmentInput>;\n    public assessmentRetrieve(id: string, secretToken: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<UserAssessmentInput>>;\n    public assessmentRetrieve(id: string, secretToken: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<UserAssessmentInput>>;\n    public assessmentRetrieve(id: string, secretToken: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling assessmentRetrieve.');\n        }\n        if (secretToken === null || secretToken === undefined) {\n            throw new Error('Required parameter secretToken was null or undefined when calling assessmentRetrieve.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<UserAssessmentInput>(`${this.configuration.basePath}/backend/masterdata/assessment/${encodeURIComponent(String(id))}/${encodeURIComponent(String(secretToken))}/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {Component, EventEmitter, OnInit, Output} from '@angular/core';\n\n@Component({\n    selector: 'app-header-cta',\n    templateUrl: './header-cta.component.html',\n    styleUrls: ['./header-cta.component.scss']\n})\nexport class HeaderCtaComponent implements OnInit {\n\n\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Laboratory } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LaboratoriesService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public laboratoriesList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<Laboratory>>;\n    public laboratoriesList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<Laboratory>>>;\n    public laboratoriesList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<Laboratory>>>;\n    public laboratoriesList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<Laboratory>>(`${this.configuration.basePath}/backend/masterdata/laboratories/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {RegistrationComponent} from \"./modules/pages/registration/registration.component\";\nimport {ImprintComponent} from \"./modules/pages/imprint/imprint.component\";\nimport {LostPasswordComponent} from \"./modules/pages/lost-password/lost-password.component\";\nimport {ResetPasswordComponent} from \"./modules/pages/reset-password/reset-password.component\";\nimport {ChangePasswordComponent} from \"./modules/pages/change-password/change-password.component\";\n\nconst routes: Routes = [\n    {\n        path: 'registration',\n        component: RegistrationComponent\n    },\n    {\n        path: 'imprint',\n        component: ImprintComponent\n    },\n    {\n        path: 'forgot-password',\n        component: LostPasswordComponent\n    },\n    {\n        path: 'reset-password',\n        component: ResetPasswordComponent\n    },\n    {\n        path: 'reset-password/:token',\n        component: ResetPasswordComponent\n    },\n    {\n      path: 'change-password',\n      component: ChangePasswordComponent\n    },\n    {\n        path: 'data',\n        loadChildren: () => import('./modules/pages/data-display/data-display.module').then(m => m.DataDisplayModule)\n    },\n    {\n        path: 'moving-risk/:customer_id/:species_id/:for_months',\n        loadChildren: () => import('./modules/pages/moving-risk/moving-risk.module').then(m => m.MovingRiskModule)\n    },\n    {\n        path: '',\n        loadChildren: () => import('./modules/pages/assessment/assessment.module').then(m => m.AssessmentModule),\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forRoot(routes, {\n            initialNavigation: 'enabled',\n            relativeLinkResolution: 'corrected',\n        }),\n    ],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Mycotoxins { \n    id: string;\n    text: string;\n    val_min: number;\n    val_max: number;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface RegistrationRequest {\n    name: string;\n    email: string;\n    country_name: string;\n    company_name: string;\n    company_address: string;\n    password: string;\n    privacy_policy: boolean;\n    nutrition_verification: boolean;\n}\n\n","if(typeof moment === 'undefined') {var e = new Error(\"Cannot find module 'moment'\"); e.code = 'MODULE_NOT_FOUND'; throw e;}\nmodule.exports = moment;","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-pre-footer',\n  templateUrl: './pre-footer.component.html',\n  styleUrls: ['./pre-footer.component.scss']\n})\nexport class PreFooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"pre-footer-container\">\n    <div class=\"pre-footer-inner\">\n        powered by\n        <a href=\"https://ew-nutrition.com/\" target=\"_blank\"><img src=\"/assets/img/logo_ew-nutrition.svg\" alt=\"ew nutrition\"></a>\n    </div>\n</div>","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { AssessmentService } from './api/assessment.service';\nimport { BackendService } from './api/backend.service';\nimport { ComponentsService } from './api/components.service';\nimport { CountriesService } from './api/countries.service';\nimport { CustomersService } from './api/customers.service';\nimport { DatabaseService } from './api/database.service';\nimport { LaboratoriesService } from './api/laboratories.service';\nimport { LanguagesService } from './api/languages.service';\nimport { LevelsService } from './api/levels.service';\nimport { MycotoxinsService } from './api/mycotoxins.service';\nimport { ProductsService } from './api/products.service';\nimport { RegisterService } from './api/register.service';\nimport { SampleTypesService } from './api/sampleTypes.service';\nimport { SendReportService } from './api/sendReport.service';\nimport { SpeciesService } from './api/species.service';\nimport { TranslationsService } from './api/translations.service';\nimport { UserService } from './api/user.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {CurrentLanguageService} from \"../services/current-language.service\";\nimport {first, map, switchMap} from \"rxjs/operators\";\nimport {environment} from \"../../environments/environment\";\n\n@Injectable()\nexport class LanguageHeaderInterceptor implements HttpInterceptor {\n\n    constructor(\n        private readonly currentLanguageService: CurrentLanguageService\n    ) {\n    }\n\n    intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n        if (request.url.startsWith(environment.api)) {\n            return this.currentLanguageService.currentLanguage.pipe(\n                first(),\n                map(language => {\n                    if (language == null) {\n                        return request;\n                    } else {\n                        return request.clone({\n                            setHeaders: {\n                                'Accept-Language': language\n                            }\n                        });\n                    }\n                }),\n                switchMap(newRequest => next.handle(newRequest))\n            );\n        } else {\n            return next.handle(request);\n        }\n    }\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface UserAssessmentRecipient { \n    address: string;\n}\n\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  platformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n});\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}