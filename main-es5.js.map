{"version":3,"sources":["webpack:///src/generated/api/api/sampleTypes.service.ts","webpack:///src/generated/api/model/userAssessmentProductRecommendation.ts","webpack:///src/generated/api/api/mycotoxins.service.ts","webpack:///src/app/services/valid-access-token-holder.service.ts","webpack:///src/app/modules/pages/change-password/change-password.module.ts","webpack:///src/generated/api/model/tokenVerify.ts","webpack:///src/app/modules/pages/lost-password/lost-password.component.ts","webpack:///src/app/modules/pages/lost-password/lost-password.component.html","webpack:///src/generated/api/api/api.ts","webpack:///src/app/modules/pages/imprint/imprint.module.ts","webpack:///src/app/services/form-data.service.ts","webpack:///src/generated/api/model/productCountryRules.ts","webpack:///src/generated/api/model/userAssessmentMovingRisk.ts","webpack:///src/app/services/chart-js.service.ts","webpack:///src/generated/api/api/user.service.ts","webpack:///src/generated/api/api/register.service.ts","webpack:///src/generated/api/api/countries.service.ts","webpack:///src/generated/api/model/level.ts","webpack:///src/environments/environment.ts","webpack:///src/app/modules/pages/reset-password/reset-password.module.ts","webpack:///src/app/modules/components/button-spinner/button-spinner.component.ts","webpack:///src/app/modules/components/button-spinner/button-spinner.component.html","webpack:///src/generated/api/model/databaseAssessment.ts","webpack:///src/generated/api/model/components.ts","webpack:///src/generated/api/model/changePassword.ts","webpack:///src/app/services/local-storage.service.ts","webpack:///src/generated/api/model/databaseAccessEnum.ts","webpack:///src/app/services/login.service.ts","webpack:///src/app/services/data.service.ts","webpack:///src/generated/api/api/sendReport.service.ts","webpack:///src/app/util/data.ts","webpack:///src/generated/api/variables.ts","webpack:///src/app/modules/components/tutorial-popup/tutorial-popup.component.ts","webpack:///src/app/modules/components/tutorial-popup/tutorial-popup.component.html","webpack:///src/app/modules/pages/imprint/imprint.component.ts","webpack:///src/app/modules/pages/imprint/imprint.component.html","webpack:///src/generated/api/api/sampleform.service.ts","webpack:///src/app/modules/components/navigation-bar/navigation-bar.component.ts","webpack:///src/app/modules/components/navigation-bar/navigation-bar.component.html","webpack:///src/generated/api/api/customers.service.ts","webpack:///src/app/modules/pages/registration/registration.module.ts","webpack:///src/generated/api/model/token.ts","webpack:///src/generated/api/model/tokenObtainPair.ts","webpack:///src/app/util/social-links.ts","webpack:///src/app/modules/pages/reset-password/reset-password.component.ts","webpack:///src/app/modules/pages/reset-password/reset-password.component.html","webpack:///src/app/modules/components/social-bar/social-bar.component.ts","webpack:///src/app/modules/components/social-bar/social-bar.component.html","webpack:///src/app/modules/components/result/result.component.ts","webpack:///src/app/modules/components/result/result.component.html","webpack:///src/generated/api/model/passwordToken.ts","webpack:///src/generated/api/api/backend.service.ts","webpack:///src/app/modules/pages/lost-password/lost-password.module.ts","webpack:///src/generated/api/configuration.ts","webpack:///src/app/modules/pages/registration/registration.component.ts","webpack:///src/app/modules/pages/registration/registration.component.html","webpack:///src/app/modules/components/moving-risk-display/moving-risk-display.component.ts","webpack:///src/app/modules/components/moving-risk-display/moving-risk-display.component.html","webpack:///src/generated/api/api/products.service.ts","webpack:///src/generated/api/model/models.ts","webpack:///src/app/interceptors/auth-header.interceptor.ts","webpack:///src/generated/api/api/levels.service.ts","webpack:///src/generated/api/api/languages.service.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/modules/components/moving-risk-popup/moving-risk-popup.component.ts","webpack:///src/app/modules/components/moving-risk-popup/moving-risk-popup.component.html","webpack:///src/app/modules/components/product-display/product-display.component.ts","webpack:///src/app/modules/components/product-display/product-display.component.html","webpack:///src/generated/api/index.ts","webpack:///src/generated/api/model/laboratory.ts","webpack:///src/generated/api/model/country.ts","webpack:///src/app/util/pagination-i18n.ts","webpack:///src/app/modules/pages/change-password/change-password.component.ts","webpack:///src/app/modules/pages/change-password/change-password.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/modules/components/sign-in/sign-in.component.ts","webpack:///src/app/modules/components/sign-in/sign-in.component.html","webpack:///src/app/modules/components/components.module.ts","webpack:///src/generated/api/api/species.service.ts","webpack:///src/app/modules/components/alert/alert.component.ts","webpack:///src/app/modules/components/alert/alert.component.html","webpack:///src/generated/api/model/tokenRefresh.ts","webpack:///src/generated/api/model/ewStatusEnum.ts","webpack:///src/generated/api/model/patchedChangePassword.ts","webpack:///src/generated/api/model/customer.ts","webpack:///src/app/modules/components/footer/footer.component.ts","webpack:///src/app/modules/components/footer/footer.component.html","webpack:///src/generated/api/api/components.service.ts","webpack:///src/generated/api/encoder.ts","webpack:///src/generated/api/model/userAssessmentSampleContamination.ts","webpack:///src/generated/api/model/contactPerson.ts","webpack:///src/app/services/access-token.service.ts","webpack:///src/app/services/language.service.ts","webpack:///src/generated/api/api/api.service.ts","webpack:///src/generated/api/model/sampleTypes.ts","webpack:///src/app/services/layout.service.ts","webpack:///src/generated/api/api/database.service.ts","webpack:///src/app/services/current-language.service.ts","webpack:///src/generated/api/model/species.ts","webpack:///src/generated/api/model/email.ts","webpack:///src/generated/api/api/translations.service.ts","webpack:///src/app/services/result.service.ts","webpack:///src/generated/api/api/assessment.service.ts","webpack:///src/app/modules/components/header-cta/header-cta.component.ts","webpack:///src/generated/api/api/laboratories.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/generated/api/model/mycotoxins.ts","webpack:///src/generated/api/model/registrationRequest.ts","webpack:///external \"moment\"","webpack:///src/app/modules/components/pre-footer/pre-footer.component.ts","webpack:///src/app/modules/components/pre-footer/pre-footer.component.html","webpack:///src/generated/api/api.module.ts","webpack:///src/app/interceptors/language-header.interceptor.ts","webpack:///src/generated/api/model/userAssessmentRecipient.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["SampleTypesService","httpClient","basePath","configuration","defaultHeaders","encoder","httpParams","value","key","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","append","toISOString","substr","Error","Object","keys","k","observe","reportProgress","options","headers","credential","lookupCredential","set","httpHeaderAcceptSelected","httpHeaderAccept","undefined","httpHeaderAccepts","selectHeaderAccept","responseType","startsWith","get","withCredentials","providedIn","MycotoxinsService","ValidAccessTokenHolderService","currentValidAccessToken$","token","next","ChangePasswordModule","declarations","imports","LostPasswordComponent","matDialog","apiService","translateService","destroyed$","loading","submitted","error","controls","email","required","formGroup","component","emailErrorMatcher","control","form","valid","apiPasswordResetCreate","pipe","subscribe","err","console","Math","floor","status","password","map","p","String","join","complete","selector","templateUrl","styleUrls","APIS","ImprintModule","concentrationUnits","text","toPPB","input","FormDataService","router","dataService","resultService","loginService","languageService","speciesNewFormControls","speciesNew","speciesNewForm","generalFormControls","customerName","country","species","laboratory","sampleType","recipients","createRecipientControl","generalForm","samplesFormArray","createSamplesRow","samplesFormControls","formArray","samplesForm","concentrationForms","createConcentrationForm","completeConcentrationForm","entries","productSelectionControls","selectedProduct","productSelectionForm","allControls","concentrationForm","completeForm","reset$","currentStep$","data","loggedIn","currentUser","currentSampleType","apiErrors$","observeIdSelection","d","sampleTypes","countries","validComponents","getComponents","id","validComponentsIdx","components","onResultStep","currentStep","onProductSelectStep","processedProducts","products","processProducts","filter","product","has_products","includes","sampleFormInfo","valueChanges","sampleForm","find","c","sampleName","inclusionRate","updateInclusionRateState","updateLoginState","updateMycotoxinRows","step","setCurrentStep","apiOutput","statusChanges","invalid","getValue","getResultInput","leading","trailing","resultInput","getResults","warn","a","b","resultOutput","makeResultOutput","apiMovingRisks","allLevels","risk","avgRiskFactorNumber","parseFloat","avg_risk_factor","roundedLevelFactor","round","matchingLevel","l","level_factor","count","number_of_assessments","date","parse","month","level","rawLevel","created_at","getIdx","sample_type","currentLanguage","getComponentsIdx","levels","from","values","movingRiskData","makeMovingRiskData","moving_risks","apiData","dateString","toLocaleDateString","year","day","totalBwFactor","total_bw_factor","totalFcrFactor","total_fcr_factor","samples","sample","recommendation","product_recommendation","sampleRisk","lvl","inclusionRateDisplay","has_inclusion_rate","inclusion_rate","toLocaleString","bwFactor","bw_factor","fcrFactor","fcr_factor","mycotoxinRows","mycotoxins","mycotoxin","sampleEntry","contaminationEntry","contaminations","entry","display","totalRecommendedProduct","total_product_recommendation","totalRiskLevel","total_risk","index","url","dirty","dialog","open","autoFocus","title","message","buttons","role","afterClosed","result","button","resetAll","navigate","reset","clear","push","removeAt","newConcentrationForm","sampleNames$","sampleIndex","givenName","test","sampleNames","name","customerId","countryId","speciesId","testLaboratoryId","sampleTypeId","recipientEmails","samplesIdx","inclusionRateValue","parsedInclusionRate","parseInt","isFinite","componentId","concentrationEntries","length","concentrations","concentrationRowForm","mycotoxinIndex","mycotoxinId","selectedProductId","productId","getter","currentId","dataIdx","idx","createConcentrationRow","showInclusionRate","inclusionRateOnlyFields","enable","disable","row","loginOnlyFields","ctrl","at","setValue","i","group","min","pattern","unit","ChartJsService","chartJs","subscriber","then","UserService","patchedChangePassword","consumes","httpContentTypeSelected","selectHeaderContentType","patch","changePassword","put","RegisterService","registrationRequest","post","CountriesService","environment","production","api","ResetPasswordModule","ButtonSpinnerComponent","spinning$","debouncedSpinning","spinning","changes","firstChange","LocalStorageService","reader","writer","read","raw","localStorage","getItem","value$","currentValue","newValue","removeItem","setItem","window","DatabaseAccessEnum","None","Own","Countries","All","LoginService","accessTokenService","validAccessTokenHolderService","userService","gettingTokens$","currentValidAccessToken","tokens","access","accessToken","expires","apiTokenVerifyCreate","setAccessToken","userRetrieve","user","getTime","now","getting","refreshAccessToken","newTokens","setTokens","u","apiTokenCreate","refresh","detail","apiTokenRefreshCreate","apiResponse","makeIndex","Map","DataService","countryService","speciesService","laboratoriesService","sampleTypesService","componentsService","mycotoxinsService","productsService","levelsService","state$","data$","componentsLoading$","lastComponents$","state","dataIdx$","languageChange","tokenChange","userId","reload","doGetComponents","awaitNotLoading","doReload","countryRule","product_country_rules","rule","languageId","getComponentsOnce","awaitComponentsNotLoading","maybeGetComponentsFromCache","current","componentsList2","countriesList","speciesList","laboratories","laboratoriesList","sampleTypesList","mycotoxinsList","productsList","levelsList","componentsList","SendReportService","assessmentId","secretToken","encodeURIComponent","isRawTokenPair","BASE_PATH","COLLECTION_FORMATS","TutorialPopupComponent","videoElement","nativeElement","play","ImprintComponent","SampleFormService","userAssessmentInput","showTutorial","NavigationBarComponent","formDataService","layoutService","knownLanguages","language","desktopView","emitEvent","newLanguage","setLanguage","stepperVerticalMode","verticalMode","goToRoot","logout","$event","preventDefault","CustomersService","customer","page","pageSize","search","queryParameters","addToHttpParams","params","forMonths","RegistrationModule","socialLinks","icon","link","ResetPasswordComponent","route","newPassword","passwordErrorMatcher","routeParams","apiPasswordResetConfirmCreate","SocialBarComponent","goToHome","ResultComponent","chartJsService","sendReportService","httpCLient","resultOutput$","apiErrors","externalReport","showButtons","restart","joinedEmailRecipients","sending$","haveCharts","chartsLoaded","sending","reportSent","fillerColumns","summary","pop","email_recipients","chartJsData","sampleText","has_bw_loss_and_fcr_graph","some","s","defaultDatasetProps","backgroundColor","borderColor","borderWidth","maxBarThickness","defaultOptions","legend","labels","has_total_risk","type","datasets","scales","yAxes","ticks","suggestedMax","suggestedMin","chartJsAndData$","chartJsAndData","latestCanvas","canvasElements","toArray","v","renderCharts","emit","sendReportCreate","secret_token","iconColor","tr","element","ingredients","inclusion_percentage","me_kcal","htmlData","replace","Total_Sol_AX_percent","Total_Formulation_Insol_AX_percentage","Total_Improved_ME_Kcal_per_kg","Axxess_XY","AX_free_ingredients","Total_Formulation_Inclusion_percentage","Total_Formulation_ME_KCALperkg","iframe","document","createElement","body","appendChild","contentWindow","write","close","canvas","imgWidth","pageHeight","imgHeight","height","width","heightLeft","contentDataURL","toDataURL","pdf","position","addImage","save","charts","Chart","pdfElement","BackendService","format","lang","LostPasswordModule","Configuration","configurationParameters","apiKeys","username","credentials","contentTypes","x","isJsonMime","accepts","mime","jsonMime","RegExp","toLowerCase","RegistrationComponent","registerService","minLength","companyName","companyAddress","privacyAccept","requiredTrue","dataSendAccept","registerCreate","country_name","company_name","company_address","privacy_policy","nutrition_verification","setErrors","markAsUntouched","markAsPristine","submit","MovingRiskDisplayComponent","reportMode","haveMovingCharts","movingChartsLoaded","movingRiskHeaderText","reportHtml","movingRiskData$","species$","maxLevel$","max","movingChartData","maxLevel","log","rawLevels","countString","maximumFractionDigits","color","chartJsAndMovingRiskData$","cmpLevels","ref","other","currentMonthLevel","prevMonthLevel","cmp","monthsCount","earlyMonthLevel","earlyCmp","compareText","monthsText","adjustText","months","monthsTranslation","adjustTranslation","currentLevel","latestMovingCanvas","movingCanvasElements","movingCanvas","chartJsAndMovingRiskData","ProductsService","AuthHeaderInterceptor","request","needsAuthHeader","handle","newRequest","clone","setHeaders","LevelsService","LanguagesService","AppComponent","currentAccessToken","queryParamMap","queryParams","forcedLanguage","pass","signIn","atob","login","loginResult","queryParamsHandling","isCustomer","MovingRiskPopupComponent","dialogRef","customerService","float","int","searchResults","customer_database_access","customerDbAccess","searchObj","searchTerm","trim","customersList","response","results","customersMovingRiskSendReportCreate","Number","ProductDisplayComponent","TranslatedPaginatorI18n","translateParser","getRangeLabel","startIndex","endIndex","interpolate","rangeLabelIntl","translation","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","ChangePasswordComponent","oldPassword","newPasswordRepeat","noMatch","oldPasswordError","hasError","oldPasswordErrorMatcher","userChangePasswordUpdate","old_password","new_password","apiModuleConfigurationFactory","httpLoaderFactory","http","AppModule","provide","useClass","multi","useFactory","withServerTransition","appId","forRoot","loader","deps","providers","bootstrap","SignInComponent","loginError","signingIn","ComponentsModule","exports","SpeciesService","AlertComponent","EwStatusEnum","Intern","Extern","FooterComponent","indexOf","substring","ComponentsService","CustomHttpParameterCodec","decodeURIComponent","AccessTokenService","localStorageService","username$","storedToken","newHandle","jwts","readToken","parseJwts","JSON","stringify","pair","parsed","e","parseJwt","decoded","exp","rawUserId","LanguageService","languagesService","currentLanguageService","languages","languagesRetrieve","apiLang","parseApiLanguages","connect","browserLanguages","getBrowserLanguagePreferences","bl","foundLanguage","kl","languageMatch","use","browserLang","strict","browserIdx","apiIdx","browserSub","apiSub","navigator","el","englishName","localName","ApiService","passwordToken","tokenObtainPair","tokenRefresh","tokenVerify","LayoutService","breakpointObserver","Small","XSmall","matches","DatabaseService","assessmentCreatedAtGt","assessmentCreatedAtGte","assessmentCreatedAtLt","assessmentCreatedAtLte","ordering","CurrentLanguageService","languageHandle","TranslationsService","ResultService","assessmentService","apiInput","customer_name","test_laboratory","address","concentrationEntry","concentration","selected_product","interaction","comments","author","assessmentCreate","AssessmentService","HeaderCtaComponent","LaboratoriesService","routes","path","loadChildren","m","DataDisplayModule","MovingRiskModule","AssessmentModule","AppRoutingModule","initialNavigation","relativeLinkResolution","moment","code","module","PreFooterComponent","ApiModule","parentModule","configurationFactory","ngModule","LanguageHeaderInterceptor","addEventListener","bootstrapModule","webpackEmptyAsyncContext","req","Promise","resolve"],"mappings":"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","file":"main-es5.js","sourcesContent":["/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { SampleTypes } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SampleTypesService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public sampleTypesList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<SampleTypes>>;\n    public sampleTypesList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<SampleTypes>>>;\n    public sampleTypesList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<SampleTypes>>>;\n    public sampleTypesList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<SampleTypes>>(`${this.configuration.basePath}/backend/masterdata/sample-types/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface UserAssessmentProductRecommendation { \n    readonly product: string;\n    text: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Mycotoxins } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MycotoxinsService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public mycotoxinsList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<Mycotoxins>>;\n    public mycotoxinsList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<Mycotoxins>>>;\n    public mycotoxinsList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<Mycotoxins>>>;\n    public mycotoxinsList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<Mycotoxins>>(`${this.configuration.basePath}/backend/masterdata/mycotoxins/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {Observable, ReplaySubject} from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ValidAccessTokenHolderService {\n\n    private readonly currentValidAccessToken$ = new ReplaySubject<string | null>(1);\n\n    constructor() {\n    }\n\n    get currentValidAccessToken(): Observable<string | null> {\n        return this.currentValidAccessToken$;\n    }\n\n    setAccessToken(token: string | null) {\n        this.currentValidAccessToken$.next(token);\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ChangePasswordComponent } from './change-password.component';\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {ComponentsModule} from \"../../components/components.module\";\n\n\n\n@NgModule({\n  declarations: [ChangePasswordComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatProgressSpinnerModule,\n    ComponentsModule\n  ]\n})\nexport class ChangePasswordModule { }\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface TokenVerify { \n    token: string;\n}\n\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, FormGroupDirective, NgForm, Validators} from \"@angular/forms\";\nimport {Observable, of, Subject} from \"rxjs\";\nimport {takeUntil} from \"rxjs/operators\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {ApiService} from \"../../../../generated/api\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {ErrorStateMatcher} from \"@angular/material/core\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\n\n@Component({\n    selector: 'app-lost-password',\n    templateUrl: './lost-password.component.html',\n    styleUrls: ['./lost-password.component.scss']\n})\nexport class LostPasswordComponent implements OnInit, OnDestroy {\n\n    private readonly destroyed$ = new Subject();\n\n    loading = false;\n    submitted = false;\n    error: Observable<string> | null = null;\n\n    controls = {\n        email: new FormControl(null, [Validators.required, Validators.email])\n    } as const;\n    formGroup = new FormGroup(this.controls);\n\n    emailErrorMatcher: ErrorStateMatcher;\n\n    constructor(\n        private readonly matDialog: MatDialog,\n        private readonly apiService: ApiService,\n        private readonly translateService: TranslateService\n    ) {\n        const component = this;\n        this.emailErrorMatcher = new class extends ErrorStateMatcher {\n            isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n                return super.isErrorState(control, form) || component.error != null;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n    }\n\n    submit() {\n        if (this.formGroup.valid) {\n            this.loading = true;\n            this.error = null;\n            this.apiService.apiPasswordResetCreate({\n                email: this.controls.email.value\n            }).pipe(\n                takeUntil(this.destroyed$),\n            ).subscribe({\n                next: () => {\n                    this.loading = false;\n                    this.submitted = true;\n                },\n                error: err => {\n                    this.loading = false;\n                    console.error('Lost Password failed', err);\n                    if (err instanceof HttpErrorResponse && Math.floor(err.status / 100) === 4 && typeof err.error === 'object' && Array.isArray(err.error.password)) {\n                        this.error = of(err.error.password.map(p => String(p)).join(', '));\n                    } else {\n                        this.error = this.translateService.get('LOSTPASSWORD_FAILED');\n                    }\n                }\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n\n}\n","<div class=\"registration-container\">\n    <h2 ngx-translate>Forgot your password?</h2>\n    <ng-container *ngIf=\"!submitted\">\n        <div [innerHTML]=\"'To reset your password, please enter your email address. MasterRisk will send you a new password for your account. If you do not know the email address that is linked to your account or it is no longer valid, please contact leila.martincarrasco@ew-nutrition.com for further assistance.'|translate\"></div>\n        <form [formGroup]=\"formGroup\" (ngSubmit)=\"submit()\" class=\"form-container\">\n            <mat-form-field appearance=\"standard\">\n                <mat-label><span ngx-translate>Please enter the email address of your account:</span></mat-label>\n                <input matInput [formControl]=\"controls.email\" [errorStateMatcher]=\"emailErrorMatcher\">\n                <mat-error>\n                    <ng-container *ngIf=\"error != null\">\n                        <span>{{ error|async }}</span>\n                    </ng-container>\n                    <ng-container *ngIf=\"error == null && controls.email.errors?.required\">\n                        <span ngx-translate>Please enter your email.</span>\n                    </ng-container>\n                    <ng-container *ngIf=\"error == null && controls.email.errors?.email\">\n                        <span ngx-translate>Please re-check your email.</span>\n                    </ng-container>\n                </mat-error>\n            </mat-form-field>\n\n            <div class=\"button-container\">\n                <button mat-flat-button color=\"primary\" type=\"submit\" [disabled]=\"loading\">\n                    <app-button-spinner [spinning]=\"loading\"></app-button-spinner>\n                    <span ngx-translate>Generate a new password</span>\n                </button>\n            </div>\n        </form>\n    </ng-container>\n    <ng-container *ngIf=\"submitted\">\n        <p [innerHTML]=\"'LOSTPASSWORD_SUCCESSTEXT'|translate\"></p>\n    </ng-container>\n</div>","export * from './api.service';\nimport { ApiService } from './api.service';\nexport * from './assessment.service';\nimport { AssessmentService } from './assessment.service';\nexport * from './backend.service';\nimport { BackendService } from './backend.service';\nexport * from './components.service';\nimport { ComponentsService } from './components.service';\nexport * from './countries.service';\nimport { CountriesService } from './countries.service';\nexport * from './customers.service';\nimport { CustomersService } from './customers.service';\nexport * from './database.service';\nimport { DatabaseService } from './database.service';\nexport * from './laboratories.service';\nimport { LaboratoriesService } from './laboratories.service';\nexport * from './languages.service';\nimport { LanguagesService } from './languages.service';\nexport * from './levels.service';\nimport { LevelsService } from './levels.service';\nexport * from './mycotoxins.service';\nimport { MycotoxinsService } from './mycotoxins.service';\nexport * from './products.service';\nimport { ProductsService } from './products.service';\nexport * from './register.service';\nimport { RegisterService } from './register.service';\nexport * from './sampleTypes.service';\nimport { SampleTypesService } from './sampleTypes.service';\nexport * from './sendReport.service';\nimport { SendReportService } from './sendReport.service';\nexport * from './species.service';\nimport { SpeciesService } from './species.service';\nexport * from './translations.service';\nimport { TranslationsService } from './translations.service';\nexport * from './user.service';\nimport { UserService } from './user.service';\nexport * from './sampleform.service';\nimport { SampleFormService } from './sampleform.service';\nexport const APIS = [ApiService, AssessmentService, BackendService, ComponentsService, CountriesService, CustomersService, DatabaseService, LaboratoriesService, LanguagesService, LevelsService, MycotoxinsService, ProductsService, RegisterService, SampleTypesService, SendReportService, SpeciesService, TranslationsService, UserService, SampleFormService];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ImprintComponent } from './imprint.component';\nimport {TranslateModule} from \"@ngx-translate/core\";\n\n\n@NgModule({\n  declarations: [ImprintComponent],\n    imports: [\n        CommonModule,\n        TranslateModule\n    ]\n})\nexport class ImprintModule { }\n","import { Injectable } from '@angular/core';\nimport { AbstractControl, FormArray, FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { LoginService } from \"./login.service\";\nimport { ApiData, ApiDataIdx, DataService, makeIndex, ProcessedProduct } from \"./data.service\";\nimport {\n    catchError,\n    defaultIfEmpty,\n    distinctUntilChanged,\n    filter,\n    first,\n    map,\n    shareReplay,\n    startWith,\n    switchMap,\n    tap,\n    throttleTime\n} from \"rxjs/operators\";\nimport {\n    Components,\n    Country,\n    Customer,\n    Level,\n    SampleTypes,\n    Species,\n    User,\n    UserAssessmentInput,\n    UserAssessmentMovingRisk\n} from \"../../generated/api\";\nimport { BehaviorSubject, combineLatest, forkJoin, Observable, of, ReplaySubject, Subject } from \"rxjs\";\nimport { ResultService } from \"./result.service\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { MovingRiskData, ResultInput, ResultOutput } from \"../util/data\";\nimport { LanguageService } from \"./language.service\";\nimport { AlertComponent, AlertData, AlertResult } from \"../modules/components/alert/alert.component\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { Router } from \"@angular/router\";\n\nexport interface ConcentrationUnit {\n    readonly text: string;\n    readonly toPPB: (input: number) => number;\n}\n\nexport interface SampleFormInfo {\n    sampleName: string | null;\n    component: Components | null;\n    inclusionRate: any;\n}\n\nexport const concentrationUnits: ReadonlyArray<ConcentrationUnit> = [\n    {\n        text: 'ppb (µg/kg)',\n        toPPB: input => input\n    },\n    {\n        text: 'ppm (mg/kg)',\n        toPPB: input => input * 1000\n    }\n];\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FormDataService {\n\n    readonly speciesNewFormControls = {\n        speciesNew: new FormControl(null, Validators.required)\n    } as const;\n    readonly speciesNewForm = new FormGroup(this.speciesNewFormControls);\n\n    readonly generalFormControls = {\n        customerName: new FormControl(null),\n        country: new FormControl(null, Validators.required),\n        species: new FormControl(null, Validators.required),\n        laboratory: new FormControl(null),\n        sampleType: new FormControl(null, Validators.required),\n        recipients: new FormArray([FormDataService.createRecipientControl()])\n    } as const;\n    readonly generalForm = new FormGroup(this.generalFormControls);\n\n    readonly samplesFormArray: FormArray = new FormArray([FormDataService.createSamplesRow(true)]);\n    readonly samplesFormControls = {\n        formArray: this.samplesFormArray\n    } as const;\n    readonly samplesForm = new FormGroup(this.samplesFormControls);\n\n    readonly concentrationForms = new FormArray([FormDataService.createConcentrationForm()]);\n    readonly completeConcentrationForm = new FormGroup({\n        entries: this.concentrationForms\n    });\n\n    readonly productSelectionControls = {\n        selectedProduct: new FormControl(null, Validators.required)\n    } as const;\n    readonly productSelectionForm = new FormGroup(this.productSelectionControls);\n\n    readonly allControls = {\n        generalForm: this.generalForm,\n        speciesNewForm: this.speciesNewForm,\n        samplesForm: this.samplesForm,\n        concentrationForm: this.completeConcentrationForm,\n        productSelectionForm: this.productSelectionForm\n    } as const;\n    readonly completeForm = new FormGroup(this.allControls);\n\n    readonly sampleFormInfo: Observable<SampleFormInfo[]>;\n\n    readonly sampleType: Observable<SampleTypes | null>;\n    readonly species: Observable<Species | null>;\n    readonly country: Observable<Country | null>;\n\n    readonly processedProducts: Observable<ProcessedProduct[]>;\n    readonly validComponents: Observable<Components[] | null>;\n    readonly validComponentsIdx: Observable<Map<string, Components> | null>;\n\n    readonly apiOutput: Observable<UserAssessmentInput | null>;\n    readonly resultOutput: Observable<ResultOutput | null>;\n\n    readonly onResultStep: Observable<boolean>;\n    readonly onProductSelectStep: Observable<boolean>;\n\n    private readonly reset$ = new Subject<void>();\n    private readonly currentStep$ = new BehaviorSubject<number>(0);\n    private data: ApiData | null = null;\n    private loggedIn = false;\n    private currentUser: User | null = null;\n    private currentSampleType: SampleTypes | null = null;\n    private readonly apiErrors$ = new ReplaySubject<unknown | null>(1);\n\n    constructor(\n        private readonly matDialog: MatDialog,\n        private readonly router: Router,\n        private readonly dataService: DataService,\n        private readonly resultService: ResultService,\n        private readonly loginService: LoginService,\n        private readonly languageService: LanguageService,\n        private readonly translateService: TranslateService,\n    ) {\n        this.sampleType = this.observeIdSelection(this.generalFormControls.sampleType, d => d.sampleTypes);\n        this.species = this.observeIdSelection(this.generalFormControls.species, d => d.species);\n        this.country = this.observeIdSelection(this.generalFormControls.country, d => d.countries);\n        this.validComponents = combineLatest([this.sampleType, this.species]).pipe(\n            switchMap(([sampleType, species]) => {\n                if (sampleType == null || species == null) {\n                    return [null];\n                } else {\n                    return this.dataService.getComponents(sampleType.id, species.id);\n                }\n            }),\n            shareReplay(1)\n        );\n        this.validComponentsIdx = this.validComponents.pipe(\n            map(components => components == null ? null : makeIndex(components)),\n            shareReplay(1)\n        );\n\n        this.onResultStep = combineLatest([this.currentStep$, this.loginService.loggedIn]).pipe(\n            map(([currentStep, loggedIn]) => currentStep === (loggedIn ? 4 : 3))\n        );\n\n        this.onProductSelectStep = combineLatest([this.currentStep$, this.loginService.loggedIn]).pipe(\n            map(([currentStep, loggedIn]) => loggedIn && currentStep === 3)\n        );\n\n        this.processedProducts = combineLatest([this.country, this.species]).pipe(\n            switchMap(([country, species]) => {\n                if (country == null || species == null) {\n                    return of<ProcessedProduct[]>([]);\n                } else {\n                    return this.dataService.get('products').pipe(\n                        map(products => {\n                            return this.dataService.processProducts(country.id, products).filter(product => {\n                                // OpenAPI generator is broken\n                                return (species.has_products as unknown as (string[] | undefined))?.includes(product.id)\n                            })\n                        })\n                    );\n                }\n            })\n        );\n\n        this.sampleFormInfo = combineLatest([this.samplesFormArray.valueChanges, this.validComponents]).pipe(\n            map<[unknown, Components[] | null], SampleFormInfo[]>(([, components]) => {\n\n                return this.samplesFormArray.controls.map(sampleForm => {\n                    return {\n                        component: components?.find(c => c.id === sampleForm.get('component').value),\n                        sampleName: sampleForm.get('name').value ?? null,\n                        inclusionRate: components?.find(c => c.id === sampleForm.get('inclusionRate').value)\n                    }\n                });\n            }),\n            shareReplay(1)\n        );\n\n        this.sampleType.subscribe(sampleType => {\n            this.currentSampleType = sampleType ?? null\n            this.updateInclusionRateState();\n        });\n\n        this.loginService.currentUser.subscribe(currentUser => {\n            this.loggedIn = currentUser != null;\n            this.currentUser = currentUser;\n            this.updateLoginState();\n        });\n\n        this.dataService.data.subscribe(data => {\n            this.data = data;\n            for (const concentrationForm of this.concentrationForms.controls as FormGroup[]) {\n                this.updateMycotoxinRows(concentrationForm);\n            }\n        });\n\n        this.productSelectionForm.valueChanges.pipe(\n            startWith(0),\n            switchMap(() => {\n                return this.productSelectionControls.selectedProduct.value == null ? [null] : this.loginService.loggedIn.pipe(\n                    map(loggedIn => loggedIn ? 4 : 3)\n                )\n            }),\n            distinctUntilChanged(),\n            filter(step => step != null)\n        ).subscribe(step => this.setCurrentStep(step));\n\n        this.apiOutput = combineLatest([this.completeForm.valueChanges, this.completeForm.statusChanges, this.currentStep]).pipe(\n            startWith(0),\n            switchMap(() => this.dataService.data),\n            switchMap(() => {\n                if (this.completeForm.invalid || this.currentStep$.getValue() !== (this.loggedIn ? 4 : 3)) {\n                    return [null];\n                } else {\n                    return this.getResultInput();\n                }\n            }),\n            throttleTime(500, undefined, { leading: false, trailing: true }),\n            switchMap(resultInput => {\n                if (resultInput == null) {\n                    this.apiErrors$.next(null);\n                    return [null];\n                } else {\n                    return this.resultService.getResults(resultInput).pipe(\n                        tap(() => this.apiErrors$.next(null)),\n                        catchError(err => {\n                            console.warn('Failed getting API result', err);\n                            this.apiErrors$.next(err);\n                            return of(null);\n                        })\n                    );\n                }\n            }),\n            distinctUntilChanged((a, b) => (a == null) === (b == null)),\n            shareReplay(1)\n        );\n\n        this.resultOutput = this.apiOutput.pipe(\n            switchMap(apiOutput => {\n                return this.makeResultOutput(apiOutput);\n            })\n        );\n    }\n\n    get apiErrors(): Observable<unknown | null> {\n        return this.apiErrors$;\n    }\n\n    makeMovingRiskData(apiMovingRisks: ReadonlyArray<UserAssessmentMovingRisk> | null, allLevels: Level[]): ReadonlyArray<MovingRiskData> {\n        return apiMovingRisks?.map(risk => {\n            const avgRiskFactorNumber = parseFloat(risk.avg_risk_factor);\n            const roundedLevelFactor = Math.round(avgRiskFactorNumber);\n            const matchingLevel = allLevels.find(l => l.level_factor === roundedLevelFactor);\n            return {\n                count: risk.number_of_assessments,\n                date: new Date(Date.parse(risk.month)),\n                level: matchingLevel,\n                rawLevel: avgRiskFactorNumber\n            }\n        });\n    }\n\n    makeResultOutput(apiOutput: UserAssessmentInput | null): Observable<ResultOutput | null> {\n        if (apiOutput == null) {\n            return of(null);\n        } else {\n            const date = apiOutput.created_at == null ? null : new Date(Date.parse(apiOutput.created_at));\n            return combineLatest([\n                this.dataService.getIdx('species').pipe(map(species => species.get(apiOutput.species))),\n                this.dataService.getIdx('sampleTypes').pipe(map(sampleTypes => sampleTypes.get(apiOutput.sample_type))),\n                this.languageService.currentLanguage,\n                this.dataService.get('products').pipe(\n                    map(products => this.dataService.processProducts(apiOutput.country, products))\n                ),\n                this.dataService.getIdx('levels'),\n                this.dataService.getComponentsIdx(apiOutput.sample_type, apiOutput.species),\n                this.dataService.getIdx('countries').pipe(map(countries => countries.get(apiOutput.country)))\n            ]).pipe<ResultOutput>(\n                map(([species, sampleType, currentLanguage, processedProducts, levels, components, country]: [Species, SampleTypes, string, ProcessedProduct[], Map<string, Level>, Map<string, Components>, Country]) => {\n                    const allLevels = Array.from(levels.values());\n                    const movingRiskData: ReadonlyArray<MovingRiskData> = this.makeMovingRiskData(apiOutput.moving_risks, allLevels);\n                    return {\n                        apiData: apiOutput,\n                        movingRiskData,\n                        species,\n                        sampleType,\n                        dateString: date?.toLocaleDateString(currentLanguage, {\n                            year: \"numeric\",\n                            month: \"2-digit\",\n                            day: \"2-digit\"\n                        }),\n                        country,\n                        totalBwFactor: apiOutput.total_bw_factor == null ? null : parseFloat(apiOutput.total_bw_factor),\n                        totalFcrFactor: apiOutput.total_fcr_factor == null ? null : parseFloat(apiOutput.total_fcr_factor),\n                        samples: apiOutput.samples.map(sample => {\n                            return {\n                                apiData: sample,\n                                recommendation: sample.product_recommendation == null ? null : {\n                                    product: sample.product_recommendation.product == null ? null : processedProducts.find(p => p.id === sample.product_recommendation?.product) ?? null,\n                                    text: sample.product_recommendation?.text ?? null\n                                },\n                                sampleRisk: sample.risk == null ? null : this.data.levels.find(lvl => lvl.id === sample.risk) ?? null,\n                                component: components.get(sample.component) ?? null,\n                                inclusionRateDisplay: sampleType.has_inclusion_rate ? sample.inclusion_rate?.toLocaleString(currentLanguage) ?? '--' : null,\n                                bwFactor: sample.bw_factor == null ? null : parseFloat(sample.bw_factor),\n                                fcrFactor: sample.fcr_factor == null ? null : parseFloat(sample.fcr_factor)\n                            }\n                        }),\n                        mycotoxinRows: this.data.mycotoxins.map(mycotoxin => {\n                            return {\n                                mycotoxin,\n                                values: apiOutput.samples.map(sampleEntry => {\n                                    const contaminationEntry = sampleEntry.contaminations.find(entry => entry.mycotoxin === mycotoxin.id);\n                                    const display = contaminationEntry?.value?.toLocaleString(currentLanguage) ?? 'nt';\n                                    return {\n                                        display,\n                                        level: contaminationEntry?.level == null ? null : this.data.levels.find(lvl => lvl.id === contaminationEntry.level) ?? null\n                                    }\n                                })\n                            }\n                        }),\n                        totalRecommendedProduct: apiOutput.total_product_recommendation == null ? null : {\n                            product: processedProducts.find(p => p.id === apiOutput.total_product_recommendation.product) ?? null,\n                            text: apiOutput.total_product_recommendation.text\n                        },\n                        totalRiskLevel: apiOutput.total_risk == null ? null : levels.get(apiOutput.total_risk) ?? null\n                    };\n                })\n            );\n        }\n    }\n\n    get reset(): Observable<void> {\n        return this.reset$;\n    }\n\n    get currentStep(): Observable<number> {\n        return this.currentStep$;\n    }\n\n    setCurrentStep(index: number) {\n        this.currentStep$.next(index);\n    }\n\n    goToRoot() {\n        if (this.router.url === '/') {\n            if (this.generalForm.dirty) {\n                const dialog = this.matDialog.open<AlertComponent, AlertData, AlertResult>(\n                    AlertComponent,\n                    {\n                        autoFocus: false,\n                        data: {\n                            title: 'RESET_DATA_HEADER',\n                            message: 'RESET_DATA_MESSAGE',\n                            buttons: [\n                                {\n                                    id: 'yes',\n                                    text: 'GENERAL_YES',\n                                    role: 'primary'\n                                },\n                                {\n                                    id: 'no',\n                                    text: 'GENERAL_NO'\n                                }\n                            ]\n                        }\n                    }\n                );\n                dialog.afterClosed().subscribe(result => {\n                    if (result?.button === 'yes') {\n                        this.resetAll();\n                    }\n                });\n            } else {\n                this.resetAll();\n                return of(undefined);\n            }\n        } else {\n            this.router.navigate(['/']);\n        }\n    }\n\n    resetAll() {\n        this.completeForm.reset();\n        this.samplesFormArray.clear();\n        this.samplesFormArray.push(FormDataService.createSamplesRow(true));\n        this.concentrationForms.clear();\n        const concentrationForm = FormDataService.createConcentrationForm();\n        this.concentrationForms.push(concentrationForm);\n        this.generalFormControls.recipients.clear();\n        this.generalFormControls.recipients.push(FormDataService.createRecipientControl());\n        this.updateLoginState();\n        this.updateInclusionRateState();\n        this.updateMycotoxinRows(concentrationForm)\n\n        this.reset$.next();\n        this.setCurrentStep(0);\n        // need to do this twice, because the 2nd time we potentially autofill the email\n        this.updateLoginState();\n    }\n\n    addRecipient() {\n        this.generalFormControls.recipients.push(FormDataService.createRecipientControl());\n        this.updateLoginState();\n    }\n\n    removeRecipient(index: number) {\n        this.generalFormControls.recipients.removeAt(index);\n    }\n\n    addSample() {\n        this.samplesFormArray.push(FormDataService.createSamplesRow());\n        const newConcentrationForm = FormDataService.createConcentrationForm();\n        this.concentrationForms.push(newConcentrationForm);\n        this.updateMycotoxinRows(newConcentrationForm);\n        this.updateInclusionRateState();\n    }\n\n    removeSample(index: number) {\n        this.samplesFormArray.removeAt(index);\n        this.concentrationForms.removeAt(index);\n    }\n\n    private getResultInput(): Observable<ResultInput> {\n        const sampleNames$: Observable<string>[] = this.samplesFormArray.controls.map((sampleForm, sampleIndex) => {\n            const givenName = sampleForm.get('name').value;\n            if (givenName == null || /^\\s*$/.test(givenName)) {\n                return this.translateService.get('STEPTWO_SAMPLENAME_DEFAULT', { index: sampleIndex + 1 }).pipe(first());\n            } else {\n                return of(givenName);\n            }\n        });\n\n        return forkJoin(sampleNames$).pipe(\n            defaultIfEmpty([]),\n            map((sampleNames) => {\n                return {\n                    generalForm: {\n                        customerName: typeof this.generalFormControls.customerName.value === 'string' ? this.generalFormControls.customerName.value : ((this.generalFormControls.customerName.value as Customer | null)?.name ?? ''),\n                        customerId: typeof this.generalFormControls.customerName.value === 'string' ? null : (this.generalFormControls.customerName.value as Customer | null)?.id,\n                        countryId: this.generalFormControls.country.value,\n                        speciesId: this.generalFormControls.species.value,\n                        testLaboratoryId: this.generalFormControls.laboratory.value,\n                        sampleTypeId: this.generalFormControls.sampleType.value,\n                        recipientEmails: this.loggedIn ? this.generalFormControls.recipients.controls.map(c => c.value) : []\n                    },\n                    samplesForm: {\n                        samples: this.samplesFormArray.controls.map((samplesForm, samplesIdx) => {\n                            const inclusionRateValue = samplesForm.get('inclusionRate').value;\n                            let parsedInclusionRate = null;\n                            if (inclusionRateValue == null) {\n                                parsedInclusionRate = null;\n                            } else if (typeof inclusionRateValue === 'string') {\n                                parsedInclusionRate = parseInt(inclusionRateValue);\n                            } else if (typeof inclusionRateValue === 'number') {\n                                parsedInclusionRate = inclusionRateValue\n                            }\n                            if (parsedInclusionRate != null && (!isFinite(parsedInclusionRate) || parsedInclusionRate < 0)) {\n                                parsedInclusionRate = null;\n                            }\n                            return {\n                                sampleName: sampleNames[samplesIdx],\n                                componentId: samplesForm.get('component').value,\n                                inclusionRate: parsedInclusionRate\n                            }\n                        })\n                    },\n                    concentrationForm: {\n                        entries: this.concentrationForms.controls.map(concentrationForm => {\n                            const concentrationEntries = concentrationForm.get('concentrations') as FormArray;\n                            if (this.data == null || concentrationEntries.length !== this.data.mycotoxins.length) {\n                                return {\n                                    concentrations: []\n                                }\n                            } else {\n                                return {\n                                    concentrations: concentrationEntries.controls.map((concentrationRowForm, mycotoxinIndex) => {\n                                        const value = (concentrationRowForm.get('unit').value as ConcentrationUnit).toPPB(\n                                            concentrationRowForm.get('value').value\n                                        );\n                                        return {\n                                            mycotoxinId: this.data.mycotoxins[mycotoxinIndex].id,\n                                            value: value\n                                        }\n                                    })\n                                };\n                            }\n                        })\n                    },\n                    selectedProductId: this.productSelectionControls.selectedProduct.value?.productId\n                }\n            })\n        );\n    }\n\n    private observeIdSelection<V>(control: FormControl, getter: (data: ApiDataIdx) => Map<string, V>): Observable<V> {\n        return control.valueChanges.pipe(\n            startWith(control.value as string | null),\n            switchMap((currentId: string | null) => {\n                if (currentId == null) {\n                    return of(null);\n                } else {\n                    return this.dataService.dataIdx.pipe(\n                        map(idx => getter(idx).get(currentId) ?? null)\n                    );\n                }\n            }),\n            shareReplay(1)\n        );\n    }\n\n    private updateMycotoxinRows(concentrationForm: FormGroup) {\n        const concentrations = concentrationForm.get('concentrations') as FormArray;\n        if (this.data == null) {\n            concentrations.clear();\n        } else {\n            if (concentrations.length !== this.data.mycotoxins.length) {\n                concentrations.clear();\n                for (const mycotoxin of this.data.mycotoxins) {\n                    concentrations.push(FormDataService.createConcentrationRow());\n                }\n            }\n        }\n    }\n\n    private updateInclusionRateState() {\n        const showInclusionRate = this.currentSampleType?.has_inclusion_rate ?? false;\n        for (const control of this.inclusionRateOnlyFields()) {\n            if (showInclusionRate) {\n                control.enable();\n            } else {\n                control.disable();\n            }\n        }\n    }\n\n    private * inclusionRateOnlyFields(): IterableIterator<AbstractControl> {\n        for (const row of this.samplesFormArray.controls) {\n            yield row.get('inclusionRate');\n        }\n    }\n\n    private updateLoginState() {\n        for (const ctrl of this.loginOnlyFields()) {\n            if (this.loggedIn) {\n                ctrl.enable();\n            } else {\n                ctrl.disable();\n            }\n        }\n        // console.log(\"updateLoginState\", this.currentUser, this.generalFormControls.recipients.at(0).value);\n        if (this.currentUser != null && this.generalFormControls.recipients.length === 1 && !this.generalFormControls.recipients.at(0).value) {\n            // console.log(\"updating state\")\n            this.generalFormControls.recipients.at(0).setValue(this.currentUser.email);\n        }\n    }\n\n    private * loginOnlyFields(): IterableIterator<AbstractControl> {\n        yield* [this.generalFormControls.customerName, this.generalFormControls.laboratory, this.generalFormControls.recipients];\n        // yield* this.generalFormControls.recipients.controls;\n        yield this.generalFormControls.recipients;\n        yield this.productSelectionForm;\n    }\n\n    private static createRecipientControl(): FormControl {\n        return new FormControl(null, []);\n    }\n\n    private static createSamplesRow(i = false): FormGroup {\n        let group: any;\n        // if (i) {\n        group = {\n            component: new FormControl(null, Validators.required),\n            name: new FormControl(null, Validators.required),\n            inclusionRate: new FormControl(null, Validators.required)\n        };\n        // } else {\n        //     group = {\n        //         component: new FormControl(null),\n        //         name: new FormControl(null),\n        //         inclusionRate: new FormControl(null, [\n        //             Validators.min(0), Validators.max(100),\n        //             Validators.pattern(/^\\d*$/)\n        //         ])\n        //     };\n        // }\n        return new FormGroup(group)\n\n    }\n\n    private static createConcentrationForm(): FormGroup {\n        return new FormGroup({\n            concentrations: new FormArray([])\n        });\n    }\n\n    private static createConcentrationRow(): FormGroup {\n        return new FormGroup({\n            value: new FormControl(null, [\n                Validators.min(0), Validators.pattern(/^\\d*$/)\n            ]),\n            unit: new FormControl(concentrationUnits[0])\n        });\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ProductCountryRules { \n    readonly country: string;\n    name: string;\n    logo?: string | null;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface UserAssessmentMovingRisk { \n    month: string;\n    avg_risk_factor: string;\n    number_of_assessments?: number;\n}\n\n","import { Injectable } from '@angular/core';\nimport {Observable} from \"rxjs\";\nimport type {Chart} from \"chart.js\";\nimport {shareReplay} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartJsService {\n\n  readonly chartJs = new Observable<typeof Chart>(subscriber => {\n    import(\"chart.js\").then(chartJs => {\n      subscriber.next(chartJs);\n      subscriber.complete();\n    }).catch(err => subscriber.error(err));\n  }).pipe(\n      shareReplay(1)\n  )\n\n  constructor() { }\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { ChangePassword } from '../model/models';\nimport { PatchedChangePassword } from '../model/models';\nimport { User } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * An endpoint for changing password.\n     * @param patchedChangePassword \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userChangePasswordPartialUpdate(patchedChangePassword?: PatchedChangePassword, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ChangePassword>;\n    public userChangePasswordPartialUpdate(patchedChangePassword?: PatchedChangePassword, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ChangePassword>>;\n    public userChangePasswordPartialUpdate(patchedChangePassword?: PatchedChangePassword, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ChangePassword>>;\n    public userChangePasswordPartialUpdate(patchedChangePassword?: PatchedChangePassword, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<ChangePassword>(`${this.configuration.basePath}/backend/masterdata/user/change-password/`,\n            patchedChangePassword,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * An endpoint for changing password.\n     * @param changePassword \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userChangePasswordUpdate(changePassword: ChangePassword, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ChangePassword>;\n    public userChangePasswordUpdate(changePassword: ChangePassword, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ChangePassword>>;\n    public userChangePasswordUpdate(changePassword: ChangePassword, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ChangePassword>>;\n    public userChangePasswordUpdate(changePassword: ChangePassword, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (changePassword === null || changePassword === undefined) {\n            throw new Error('Required parameter changePassword was null or undefined when calling userChangePasswordUpdate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<ChangePassword>(`${this.configuration.basePath}/backend/masterdata/user/change-password/`,\n            changePassword,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userRetrieve(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<User>;\n    public userRetrieve(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<User>>;\n    public userRetrieve(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<User>>;\n    public userRetrieve(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<User>(`${this.configuration.basePath}/backend/masterdata/user/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { RegistrationRequest } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegisterService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param registrationRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public registerCreate(registrationRequest: RegistrationRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<RegistrationRequest>;\n    public registerCreate(registrationRequest: RegistrationRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<RegistrationRequest>>;\n    public registerCreate(registrationRequest: RegistrationRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<RegistrationRequest>>;\n    public registerCreate(registrationRequest: RegistrationRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (registrationRequest === null || registrationRequest === undefined) {\n            throw new Error('Required parameter registrationRequest was null or undefined when calling registerCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<RegistrationRequest>(`${this.configuration.basePath}/backend/masterdata/register/`,\n            registrationRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Country } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountriesService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public countriesList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<Country>>;\n    public countriesList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<Country>>>;\n    public countriesList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<Country>>>;\n    public countriesList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<Country>>(`${this.configuration.basePath}/backend/masterdata/countries/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Level { \n    id: string;\n    text: string;\n    color?: string;\n    level_factor?: number;\n    marker_image?: string | null;\n    result_table_postfix?: string;\n    interpretation_text?: string;\n}\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  // api: 'http://localhost:8000'\n  // api: 'https://masterrisktool.com'\n  // api: 'https://apiewn.unilink360.com'\n  api: 'https://elsaadmin.ew-nutrition.com'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ResetPasswordComponent } from './reset-password.component';\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\n\n\n@NgModule({\n  declarations: [ResetPasswordComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatProgressSpinnerModule\n  ]\n})\nexport class ResetPasswordModule { }\n","import {Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges} from '@angular/core';\nimport {EMPTY, Subject, timer} from \"rxjs\";\nimport {debounce} from \"rxjs/operators\";\n\n@Component({\n    selector: 'app-button-spinner',\n    templateUrl: './button-spinner.component.html',\n    styleUrls: ['./button-spinner.component.scss'],\n})\nexport class ButtonSpinnerComponent implements OnInit, OnChanges, OnDestroy {\n\n    private readonly spinning$ = new Subject<boolean>();\n    debouncedSpinning: boolean = false;\n\n    @Input()\n    spinning = true;\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n        this.spinning$.pipe(\n            debounce(spinning => !spinning ? EMPTY : timer(500))\n        ).subscribe(debouncedSpinning => this.debouncedSpinning = debouncedSpinning);\n        this.debouncedSpinning = this.spinning;\n        this.spinning$.next(this.spinning);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.spinning && !changes.spinning.firstChange) {\n            this.spinning$.next(this.spinning);\n        }\n    }\n\n    ngOnDestroy() {\n        this.spinning$.complete();\n    }\n\n}\n","<mat-spinner [class.visible]=\"debouncedSpinning\" color=\"accent\" diameter=\"30\"></mat-spinner>","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface DatabaseAssessment { \n    id?: string;\n    readonly created_at: string;\n    readonly country: string;\n    readonly species: string;\n    readonly test_laboratory: string;\n    readonly sample_type: string;\n    readonly total_risk: string;\n    total_bw_factor?: string | null;\n    total_fcr_factor?: string | null;\n    readonly customer_name: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Components { \n    id: string;\n    text?: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ChangePassword { \n    old_password: string;\n    new_password: string;\n}\n\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject, fromEvent, Observable, ReplaySubject, Subscription} from \"rxjs\";\n\nexport interface LocalStorageHandle<T> {\n    readonly value: Observable<T | null>;\n    readonly currentValue: T | null;\n    setValue(newValue: T | null);\n\n    subscribe(): Subscription;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LocalStorageService {\n\n    constructor() {\n\n    }\n\n    newHandle<T>(key: string, reader: (raw: string) => T | null, writer: (T) => string): LocalStorageHandle<T> {\n        const read = (): T => {\n            const raw = localStorage.getItem(key);\n            if (raw == null) {\n                return null;\n            } else {\n                return reader(raw);\n            }\n        }\n\n        const value$ = new BehaviorSubject<T | null>(read());\n\n        return {\n            get value(): Observable<T | null> {\n                return value$;\n            },\n            get currentValue(): T | null {\n                return value$.getValue();\n            },\n            setValue(newValue: T | null) {\n                value$.next(newValue);\n                if (newValue == null) {\n                    localStorage.removeItem(key);\n                } else {\n                    localStorage.setItem(key, writer(newValue));\n                }\n            },\n            subscribe(): Subscription {\n                return fromEvent(window, 'storage').subscribe(() => {\n                    value$.next(read());\n                });\n            }\n        }\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport type DatabaseAccessEnum = 'none' | 'own' | 'countries' | 'all';\n\nexport const DatabaseAccessEnum = {\n    None: 'none' as DatabaseAccessEnum,\n    Own: 'own' as DatabaseAccessEnum,\n    Countries: 'countries' as DatabaseAccessEnum,\n    All: 'all' as DatabaseAccessEnum\n};\n\n","import { Injectable } from '@angular/core';\nimport { AccessTokenService } from \"./access-token.service\";\nimport {\n    catchError,\n    distinctUntilChanged,\n    finalize,\n    first,\n    map,\n    mapTo,\n    share,\n    shareReplay,\n    switchMap,\n    tap\n} from \"rxjs/operators\";\nimport { ApiService, User, UserService } from \"../../generated/api\";\nimport { BehaviorSubject, Observable, of, throwError, timer } from \"rxjs\";\nimport { ParsedToken, TokenPair } from \"../util/data\";\nimport { ValidAccessTokenHolderService } from \"./valid-access-token-holder.service\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LoginService {\n\n    private gettingTokens$ = new BehaviorSubject<boolean>(false);\n    readonly currentValidAccessToken: Observable<ParsedToken | null>;\n    readonly currentUser: Observable<User | null>;\n    readonly loggedIn: Observable<boolean>;\n\n    constructor(\n        private readonly accessTokenService: AccessTokenService,\n        private readonly validAccessTokenHolderService: ValidAccessTokenHolderService,\n        private readonly apiService: ApiService,\n        private readonly userService: UserService,\n    ) {\n        this.currentValidAccessToken = this.accessTokenService.tokens.pipe(\n            map(tokens => tokens?.access),\n            distinctUntilChanged(),\n            switchMap(accessToken => {\n                if (accessToken == null) {\n                    // console.log('// no token: not logged in, valid token will also be null');\n                    // no token: not logged in, valid token will also be null\n                    return of(null);\n                } else if (accessToken.expires < new Date()) {\n                    // console.log('token expired');\n                    // if it is expired already, subscription below will refresh it\n                    // and we will then get the new one here\n                    // so do nothing here yet\n                    return of();\n                } else {\n                    // console.log('// we have a token that we think is valid')\n                    // we have a token that we think is valid\n                    // check that it actually is valid\n                    return this.apiService.apiTokenVerifyCreate({\n                        token: accessToken.token\n                    }).pipe(\n                        mapTo(accessToken),\n                        catchError((err) => {\n                            console.warn('Token verify failed', err);\n                            return of(null);\n                        }),\n                    );\n                }\n            }),\n            shareReplay(1)\n        );\n\n        this.currentValidAccessToken.subscribe(token => this.validAccessTokenHolderService.setAccessToken(token?.token));\n\n        this.currentUser = this.currentValidAccessToken.pipe(\n            distinctUntilChanged(),\n            switchMap(accessToken => {\n                return accessToken == null ? [null] : this.userService.userRetrieve()\n            }),\n            shareReplay(1)\n        );\n\n        this.loggedIn = this.currentUser.pipe(\n            map(user => user != null),\n            distinctUntilChanged()\n        );\n\n        this.accessTokenService.tokens.pipe(\n            switchMap(tokens => {\n                if (tokens == null) {\n                    // console.log(\"tokens are null\");\n                    return of<TokenPair<ParsedToken>>();\n                } else {\n                    return (tokens.access.expires.getTime() <= Date.now() ? of(1) : timer(tokens.access.expires)).pipe(\n                        first(),\n                        // tap(t => console.log(\"token expired\", t)),\n                        mapTo(tokens)\n                    );\n                }\n            }),\n            switchMap((tokens) => {\n                return this.gettingTokens$.pipe(\n                    first(getting => !getting),\n                    tap(() => this.gettingTokens$.next(true)),\n                    switchMap(() => this.refreshAccessToken(tokens)),\n                    tap(newTokens => this.accessTokenService.setTokens(newTokens)),\n                    finalize(() => this.gettingTokens$.next(false))\n                );\n            }),\n        ).subscribe();\n    }\n\n    get isLoggedIn(): Observable<boolean> {\n        return this.currentUser.pipe(\n            map(u => u != null)\n        );\n    }\n\n    login(email: string, password: string): Observable<string | null> {\n        return this.gettingTokens$.pipe(\n            first(getting => !getting),\n            tap(() => this.gettingTokens$.next(true)),\n            switchMap(() => {\n                return this.apiService.apiTokenCreate({\n                    email,\n                    password\n                } as any)\n            }),\n            tap((result: any) => { // OpenAPI docs are wrong\n                this.accessTokenService.setTokens({\n                    access: result.access,\n                    refresh: result.refresh\n                });\n            }),\n            mapTo(null),\n            catchError(err => {\n                if (err instanceof HttpErrorResponse && err.status === 401) {\n\n                    return of(err?.error?.detail || err.message);\n                } else {\n                    return throwError(err);\n                }\n            }),\n            finalize(() => this.gettingTokens$.next(false)),\n            share(),\n        );\n    }\n\n    logout(): Observable<void> {\n        return this.gettingTokens$.pipe(\n            first(getting => !getting),\n            tap(() => this.accessTokenService.setTokens(null)),\n            mapTo(undefined)\n        );\n    }\n\n    private refreshAccessToken(tokens: TokenPair<ParsedToken>): Observable<TokenPair<string> | null> {\n        return this.apiService.apiTokenRefreshCreate({\n            refresh: tokens.refresh.token\n        } as any).pipe(\n            map((apiResponse: any) => { // OpenAPI docs are wrong\n                return {\n                    access: apiResponse.access,\n                    refresh: tokens.refresh.token\n                }\n            }),\n            catchError(err => {\n                console.error('Failed refreshing token', err);\n                return of(null);\n            }),\n        );\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {\n    Components,\n    ComponentsService,\n    CountriesService,\n    Country,\n    LaboratoriesService,\n    Laboratory,\n    Level,\n    LevelsService,\n    Mycotoxins,\n    MycotoxinsService,\n    Products,\n    ProductsService,\n    SampleTypes,\n    SampleTypesService,\n    Species,\n    SpeciesService\n} from '../../generated/api';\nimport {BehaviorSubject, combineLatest, forkJoin, Observable, of} from 'rxjs';\nimport {catchError, distinctUntilChanged, filter, finalize, first, map, mapTo, shareReplay, single, skipWhile, startWith, switchMap, tap, throttleTime} from 'rxjs/operators';\nimport {LanguageService} from './language.service';\nimport {LoginService} from './login.service';\n\nexport interface ApiData {\n    readonly countries: Country[];\n    readonly species: Species[];\n    readonly laboratories: Laboratory[];\n    readonly sampleTypes: SampleTypes[];\n    readonly mycotoxins: Mycotoxins[];\n    readonly products: Products[];\n    readonly levels: Level[];\n    readonly components: Components[];\n}\n\nexport type HasId = {\n    id: string;\n}\n\nexport interface ApiDataIdx {\n    readonly sampleTypes: Map<string, SampleTypes>;\n    readonly species: Map<string, Species>;\n    readonly countries: Map<string, Country>;\n    readonly levels: Map<string, Level>;\n    readonly products: Map<string, Products>;\n    readonly components: Map<string, Components>;\n}\n\nexport interface ProcessedProduct {\n    id: string;\n    name: string;\n    logo?: string | null;\n}\n\ntype LoadState = 'initial' | 'loading' | 'loaded' | 'error';\n\ninterface ComponentsCache {\n    sampleTypeId: string;\n    speciesId: string;\n    languageId: string;\n    components: Components[];\n}\n\nexport function makeIndex<T extends HasId>(input: T[]): Map<string, T> {\n    return new Map(input.map(value => [value.id, value]))\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DataService {\n\n    private readonly state$ = new BehaviorSubject<LoadState>('initial');\n    private readonly data$ = new BehaviorSubject<ApiData | null>(null);\n    private readonly componentsLoading$ = new BehaviorSubject<boolean>(false);\n    private readonly lastComponents$ = new BehaviorSubject<ComponentsCache | null>(null);\n    private readonly dataIdx$: Observable<ApiDataIdx | null>;\n\n    loading = this.state$.pipe(\n        map(state => state === 'loading' || state === 'initial'),\n        distinctUntilChanged()\n    );\n\n    constructor(\n        private readonly countryService: CountriesService,\n        private readonly speciesService: SpeciesService,\n        private readonly laboratoriesService: LaboratoriesService,\n        private readonly sampleTypesService: SampleTypesService,\n        private readonly componentsService: ComponentsService,\n        private readonly mycotoxinsService: MycotoxinsService,\n        private readonly productsService: ProductsService,\n        private readonly levelsService: LevelsService,\n        private readonly loginService: LoginService,\n        private readonly languageService: LanguageService,\n    ) {\n        this.dataIdx$ = this.data$.pipe(\n            map<ApiData | null, ApiDataIdx | null>(apiData => {\n                if (apiData == null) return null;\n                return {\n                    sampleTypes: makeIndex(apiData.sampleTypes),\n                    species: makeIndex(apiData.species),\n                    countries: makeIndex(apiData.countries),\n                    levels: makeIndex(apiData.levels),\n                    products: makeIndex(apiData.products),\n                    components: makeIndex(apiData.components),\n                }\n            }),\n            shareReplay(1)\n        );\n\n        const languageChange = this.languageService.currentLanguage.pipe(\n            distinctUntilChanged()\n        );\n        const tokenChange = this.loginService.currentValidAccessToken.pipe(\n            distinctUntilChanged((a, b) => a?.userId === b?.userId)\n        );\n        combineLatest([languageChange, tokenChange]).pipe(\n            throttleTime(400, undefined, {leading: true, trailing: true}),\n            switchMap(() => this.reload()),\n        ).subscribe();\n    }\n\n    get data(): Observable<ApiData> {\n        return this.data$.pipe(filter(d => d != null));\n    }\n\n    get dataIdx(): Observable<ApiDataIdx> {\n        return this.dataIdx$.pipe(filter(d => d != null));\n    }\n\n    get<T extends keyof ApiData>(key: T): Observable<ApiData[T]> {\n        return this.data.pipe(\n            map(data => data[key])\n        );\n    }\n\n    getIdx<T extends keyof ApiDataIdx>(key: T): Observable<ApiDataIdx[T]> {\n        return this.dataIdx.pipe(\n            map(data => data[key])\n        );\n    }\n\n    getComponents(sampleTypeId: string, speciesId: string): Observable<Components[]> {\n        return this.doGetComponents(sampleTypeId, speciesId).pipe(shareReplay(1));\n    }\n\n    getComponentsIdx(sampleTypeId: string, speciesId: string): Observable<Map<string, Components>> {\n        return this.doGetComponents(sampleTypeId, speciesId).pipe(\n            map(components => makeIndex(components)),\n            shareReplay(1)\n        );\n    }\n\n    reload(): Observable<void> {\n        return this.awaitNotLoading().pipe(\n            switchMap(() => this.doReload())\n        );\n    }\n\n    processProducts(countryId: string, products: Products[]): ProcessedProduct[] {\n        return products.map(product => {\n            const countryRule = product.product_country_rules.find(rule => rule.country === countryId);\n            if (countryRule == null) {\n                return product;\n            } else {\n                return {\n                    id: product.id,\n                    ...countryRule\n                };\n            }\n        })\n    }\n\n    private doGetComponents(sampleTypeId: string, speciesId: string): Observable<Components[]> {\n        return this.languageService.currentLanguage.pipe(\n            switchMap(languageId => this.getComponentsOnce(languageId, sampleTypeId, speciesId)),\n        );\n    }\n\n    private getComponentsOnce(languageId: string, sampleTypeId: string, speciesId: string): Observable<Components[]> {\n        return this.awaitComponentsNotLoading().pipe(\n            tap(() => this.componentsLoading$.next(true)),\n            switchMap(() => this.maybeGetComponentsFromCache(languageId, sampleTypeId, speciesId)),\n            finalize(() => this.componentsLoading$.next(false)),\n        );\n    }\n\n    private maybeGetComponentsFromCache(languageId: string, sampleTypeId: string, speciesId: string): Observable<Components[]> {\n        const current = this.lastComponents$.getValue();\n        if (current == null || current.sampleTypeId !== sampleTypeId || current.speciesId !== speciesId || current.languageId !== languageId) {\n            return this.componentsService.componentsList2(sampleTypeId, speciesId).pipe(\n                tap(components => this.lastComponents$.next({languageId, sampleTypeId, speciesId, components})),\n                single()\n            );\n        } else {\n            return of(current.components)\n        }\n    }\n\n    private awaitComponentsNotLoading(): Observable<void> {\n        return this.componentsLoading$.pipe(\n            skipWhile(loading => loading),\n            first(),\n            mapTo(undefined)\n        );\n    }\n\n    private awaitNotLoading(): Observable<void> {\n        return this.state$.pipe(\n            skipWhile(state => state === 'loading'),\n            first(),\n            mapTo(undefined)\n        );\n    }\n\n    private doReload(): Observable<void> {\n        return forkJoin({\n            countries: this.countryService.countriesList(),\n            species: this.speciesService.speciesList(),\n            laboratories: this.laboratoriesService.laboratoriesList(),\n            sampleTypes: this.sampleTypesService.sampleTypesList(),\n            mycotoxins: this.mycotoxinsService.mycotoxinsList(),\n            products: this.productsService.productsList(),\n            levels: this.levelsService.levelsList(),\n            components: this.componentsService.componentsList(),\n        }).pipe(\n            tap((data) => {\n                this.data$.next(data);\n            }),\n            mapTo('loaded' as const),\n            catchError(err => {\n                console.warn('Failed loading country data', err);\n                return ['error'] as const;\n            }),\n            startWith('loading' as const),\n            tap(state => this.state$.next(state)),\n            mapTo(undefined)\n        );\n    }\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SendReportService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param assessmentId \n     * @param secretToken \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public sendReportCreate(assessmentId: string, secretToken: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public sendReportCreate(assessmentId: string, secretToken: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public sendReportCreate(assessmentId: string, secretToken: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public sendReportCreate(assessmentId: string, secretToken: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (assessmentId === null || assessmentId === undefined) {\n            throw new Error('Required parameter assessmentId was null or undefined when calling sendReportCreate.');\n        }\n        if (secretToken === null || secretToken === undefined) {\n            throw new Error('Required parameter secretToken was null or undefined when calling sendReportCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/backend/masterdata/send-report/${encodeURIComponent(String(assessmentId))}/${encodeURIComponent(String(secretToken))}/`,\n            null,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {Components, Country, Level, Mycotoxins, SampleTypes, Species, UserAssessmentInput, UserAssessmentSample} from \"../../generated/api\";\nimport {ProcessedProduct} from \"../services/data.service\";\nimport {unzip} from \"zlib\";\n\nexport interface NamedSample {\n    readonly componentId: string;\n    readonly sampleName: string;\n    readonly inclusionRate: number | null;\n}\n\nexport interface GeneralFormData {\n    readonly customerName: string | null;\n    readonly customerId: number | null;\n    readonly countryId: string;\n    readonly speciesId: string;\n    readonly testLaboratoryId: string | null;\n    readonly sampleTypeId: string;\n    readonly recipientEmails: string[] | null;\n}\n\nexport interface SamplesFormData {\n    readonly samples: ReadonlyArray<NamedSample>;\n}\n\nexport interface ConcentrationEntry {\n    readonly mycotoxinId: string;\n    readonly value: number;\n}\n\nexport interface SingleConcentrationFormData {\n    readonly concentrations: ReadonlyArray<ConcentrationEntry>;\n}\n\nexport interface ConcentrationFormData {\n    readonly entries: ReadonlyArray<SingleConcentrationFormData>;\n}\n\nexport interface TokenPair<T> {\n    readonly refresh: T;\n    readonly access: T;\n}\n\nexport function isRawTokenPair(input: unknown): input is TokenPair<string> {\n    return typeof input === 'object' && typeof input['refresh'] === 'string' && typeof input['access'] === 'string';\n}\n\nexport interface ParsedToken {\n    readonly token: string;\n    readonly expires: Date;\n    readonly userId: string | number | null;\n}\n\nexport interface ResultInput {\n    readonly generalForm: GeneralFormData;\n    readonly samplesForm: SamplesFormData;\n    readonly concentrationForm: ConcentrationFormData;\n    readonly selectedProductId: string | null;\n}\n\nexport interface ProcessedProductRecommendation {\n    product: ProcessedProduct | null;\n    text: string | null;\n}\n\nexport interface MycotoxinResultValue {\n    display: string;\n    level: Level | null;\n}\n\nexport interface MycotoxinResultRow {\n    mycotoxin: Mycotoxins;\n    values: Array<MycotoxinResultValue>;\n}\n\nexport interface ResultSampleData {\n    readonly apiData: UserAssessmentSample;\n    recommendation: ProcessedProductRecommendation | null;\n    sampleRisk: Level | null;\n    component: Components | null;\n    inclusionRateDisplay: string | null;\n    readonly bwFactor: number | null;\n    readonly fcrFactor: number | null;\n}\n\nexport interface ResultOutput {\n    readonly apiData: UserAssessmentInput;\n    readonly species: Species;\n    readonly sampleType: SampleTypes;\n    readonly country: Country;\n    readonly totalRiskLevel: Level | null;\n    readonly totalRecommendedProduct: ProcessedProductRecommendation | null;\n    readonly dateString: string;\n    readonly mycotoxinRows: MycotoxinResultRow[];\n    readonly samples: ResultSampleData[];\n    readonly totalBwFactor: number | null;\n    readonly totalFcrFactor: number | null;\n    readonly movingRiskData: ReadonlyArray<MovingRiskData> | null;\n}\n\nexport interface MovingRiskData {\n    readonly level: Level;\n    readonly rawLevel: number;\n    readonly count: number;\n    readonly date: Date;\n}\n\nexport interface ApiResultSuccess {\n    readonly type: 'success';\n    readonly response: UserAssessmentInput;\n}\n\nexport interface ApiResultError {\n    readonly type: 'error';\n    readonly error: unknown;\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import {AfterViewInit, Component, ElementRef, OnInit, ViewChild} from '@angular/core';\n\n@Component({\n    selector: 'app-tutorial-popup',\n    templateUrl: './tutorial-popup.component.html',\n    styleUrls: ['./tutorial-popup.component.scss']\n})\nexport class TutorialPopupComponent implements OnInit, AfterViewInit {\n\n    @ViewChild('videoElement')\n    videoElement: ElementRef;\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        (this.videoElement.nativeElement as HTMLVideoElement).play().catch(err => {\n            console.error('Failed playing video', err);\n        });\n    }\n\n}\n","<div class=\"tutorial\">\n    <video src=\"/assets/tutorial_en.mp4\" controls #videoElement></video>\n</div>","import {Component} from '@angular/core';\n\n@Component({\n    selector: 'app-imprint',\n    templateUrl: './imprint.component.html',\n    styleUrls: ['./imprint.component.scss']\n})\nexport class ImprintComponent {\n\n    constructor() {\n    }\n\n}\n","<h2 ngx-translate>IMPRINT_HEADER</h2>\n<div [innerHTML]=\"'IMPRINT_TEXT'|translate\"></div>","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport {\n    HttpClient, HttpHeaders, HttpParams,\n    HttpResponse, HttpEvent, HttpParameterCodec\n} from '@angular/common/http';\nimport { CustomHttpParameterCodec } from '../encoder';\nimport { Observable } from 'rxjs';\n\nimport { UserAssessmentInput } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\n\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SampleFormService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param userAssessmentInput \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public sampleFormCreate(userAssessmentInput: any, observe?: 'body', reportProgress?: boolean, options?: { httpHeaderAccept?: 'application/json' }): Observable<any>;\n    public sampleFormCreate(userAssessmentInput: any, observe?: 'response', reportProgress?: boolean, options?: { httpHeaderAccept?: 'application/json' }): Observable<HttpResponse<any>>;\n    public sampleFormCreate(userAssessmentInput: any, observe?: 'events', reportProgress?: boolean, options?: { httpHeaderAccept?: 'application/json' }): Observable<HttpEvent<any>>;\n    public sampleFormCreate(userAssessmentInput: any, observe: any = 'body', reportProgress: boolean = false, options?: { httpHeaderAccept?: 'application/json' }): Observable<any> {\n        if (userAssessmentInput === null || userAssessmentInput === undefined) {\n            throw new Error('Required parameter userAssessmentInput was null or undefined when calling sampleFormCreate.');\n        }\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n        return this.httpClient.post<any>(`${this.configuration.basePath}/backend/masterdata/axxess/`,\n            userAssessmentInput,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n}\n","import {Component, EventEmitter, OnDestroy, OnInit, Output} from '@angular/core';\nimport {FormControl, FormGroup} from \"@angular/forms\";\nimport {Subject} from \"rxjs\";\nimport {distinctUntilChanged, takeUntil} from \"rxjs/operators\";\nimport {KnownLanguage, LanguageService} from \"../../../services/language.service\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {SignInComponent} from \"../sign-in/sign-in.component\";\nimport {LoginService} from \"../../../services/login.service\";\nimport {User} from \"../../../../generated/api\";\nimport {LayoutService} from \"../../../services/layout.service\";\nimport {FormDataService} from \"../../../services/form-data.service\";\nimport {Router} from \"@angular/router\";\nimport {MovingRiskPopupComponent} from \"../moving-risk-popup/moving-risk-popup.component\";\n\n@Component({\n    selector: 'app-navigation-bar',\n    templateUrl: './navigation-bar.component.html',\n    styleUrls: ['./navigation-bar.component.scss']\n})\nexport class NavigationBarComponent implements OnInit, OnDestroy {\n\n    private readonly destroyed$ = new Subject();\n\n    @Output()\n    showTutorial = new EventEmitter<void>();\n\n    currentUser: User | null = null;\n\n    knownLanguages: ReadonlyArray<KnownLanguage> = [];\n    controls = {\n        language: new FormControl(null)\n    } as const;\n    formGroup = new FormGroup(this.controls);\n\n    desktopView: boolean = false;\n\n    constructor(\n        private readonly formDataService: FormDataService,\n        private readonly layoutService: LayoutService,\n        private readonly languageService: LanguageService,\n        private readonly loginService: LoginService,\n        private readonly matDialog: MatDialog,\n        private readonly router: Router\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.languageService.currentLanguage.pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(language => {\n            this.controls.language.setValue(language, {emitEvent: false});\n        });\n        this.controls.language.valueChanges.pipe(\n            distinctUntilChanged(),\n            takeUntil(this.destroyed$)\n        ).subscribe(newLanguage => {\n            this.languageService.setLanguage(newLanguage);\n        });\n\n        this.languageService.knownLanguages.pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(knownLanguages => {\n            this.knownLanguages = knownLanguages;\n        });\n\n        this.loginService.currentUser.pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(currentUser => {\n            this.currentUser = currentUser;\n        });\n\n        this.layoutService.stepperVerticalMode.pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(verticalMode => this.desktopView = !verticalMode);\n    }\n\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n\n    signIn() {\n        this.matDialog.open(SignInComponent, {\n            autoFocus: false\n        });\n    }\n\n    reset() {\n        this.formDataService.goToRoot();\n    }\n\n    logout() {\n        this.loginService.logout().subscribe();\n    }\n\n    openMovingRisk() {\n        this.matDialog.open(MovingRiskPopupComponent, {\n            autoFocus: false,\n        });\n    }\n\n}\n","<div class=\"nav-bar-container\">\n    <div class=\"nav-bar-inner\">\n        <form [formGroup]=\"formGroup\">\n            <mat-form-field class=\"language-selector\">\n                <mat-icon matPrefix>language</mat-icon>\n                <mat-select [formControl]=\"controls.language\">\n                    <mat-option *ngFor=\"let lang of knownLanguages\" [value]=\"lang.id\">{{lang.localName}}</mat-option>\n                </mat-select>\n            </mat-form-field>\n        </form>\n        <div class=\"right\" *ngIf=\"currentUser == null\">\n            <ng-container *ngIf=\"desktopView\">\n                <button mat-stroked-button class=\"ew-stroke-button ew-small-button\" (click)=\"signIn()\"><span ngx-translate>Sign In</span></button>\n                <button mat-stroked-button class=\"ew-stroke-button ew-small-button\" routerLink=\"/registration\"><span ngx-translate>Create an account</span></button>\n                <button mat-stroked-button class=\"ew-stroke-button ew-small-button\" (click)=\"showTutorial.emit()\"><span ngx-translate>Tutorial</span></button>\n            </ng-container>\n            <ng-container *ngIf=\"!desktopView\">\n                <button mat-icon-button color=\"accent\" [matMenuTriggerFor]=\"signInMenu\">\n                    <mat-icon>menu</mat-icon>\n                </button>\n                <mat-menu #signInMenu=\"matMenu\">\n                    <button mat-menu-item (click)=\"signIn()\">\n                        <span ngx-translate>Sign In</span>\n                    </button>\n                    <button mat-menu-item routerLink=\"/registration\">\n                        <span ngx-translate>Create an account</span>\n                    </button>\n                    <button mat-menu-item (click)=\"showTutorial.emit()\">\n                        <span ngx-translate>Tutorial</span>\n                    </button>\n                </mat-menu>\n            </ng-container>\n        </div>\n        <div class=\"right\" *ngIf=\"currentUser != null\">\n            <button mat-button [matMenuTriggerFor]=\"menu\">{{ currentUser.name || currentUser.email }}\n                <mat-icon>account_circle</mat-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\">\n                <button mat-menu-item routerLink=\"/data\" *ngIf=\"currentUser.database_access != null && currentUser.database_access !== 'none'\">\n                    <mat-icon>table_chart</mat-icon>\n                    <span ngx-translate>DATA_VIEW_NAVLINKTITLE</span>\n                </button>\n                <button mat-menu-item (click)=\"openMovingRisk()\" *ngIf=\"currentUser.customer_database_access\">\n                    <mat-icon>insights</mat-icon>\n                    <span ngx-translate>MOVING_RISK_REPORT_NAVLINKTITLE</span>\n                </button>\n                <button mat-menu-item routerLink=\"/change-password\">\n                    <mat-icon>lock</mat-icon>\n                    <span ngx-translate>CHANGEPASSWORD_NAVLINKTITLE</span>\n                </button>\n                <button mat-menu-item (click)=\"showTutorial.emit()\">\n                    <mat-icon>help</mat-icon>\n                    <span ngx-translate>SIGNINBARCOMPONENT_TUTORIAL</span>\n                </button>\n                <button mat-menu-item (click)=\"logout()\">\n                    <mat-icon>logout</mat-icon>\n                    <span ngx-translate>SIGNINBARCOMPONENT_SIGNOUT</span>\n                </button>\n            </mat-menu>\n        </div>\n    </div>\n    <div class=\"header-cta\">\n        <button (click)=\"reset()\" (mousedown)=\"$event.preventDefault()\">\n            <img src=\"/assets/img/logo_masterrisk.png\" alt=\"MasterRisk\" class=\"logoimage\">\n        </button>\n    </div>\n</div>\n\n<style>\n    .nav-bar-container[_ngcontent-serverApp-c135] .header-cta[_ngcontent-serverApp-c135] {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding-bottom: 2.125rem !important;\n    width: 100%;\n}\n\n.nav-bar-container[_ngcontent-serverApp-c135] .header-cta[_ngcontent-serverApp-c135] img[_ngcontent-serverApp-c135] {\n    height: auto;\n    -o-object-fit: contain;\n    object-fit: contain;\n}\n\n.logoimage{\n    width: 270px;\nmargin-top: 20px;\n}\n</style>","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Customer } from '../model/models';\nimport { PaginatedCustomerList } from '../model/models';\nimport { UserAssessmentMovingRisk } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomersService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param customer \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public customersCreate(customer: Customer, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Customer>;\n    public customersCreate(customer: Customer, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Customer>>;\n    public customersCreate(customer: Customer, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Customer>>;\n    public customersCreate(customer: Customer, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (customer === null || customer === undefined) {\n            throw new Error('Required parameter customer was null or undefined when calling customersCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Customer>(`${this.configuration.basePath}/backend/masterdata/customers/`,\n            customer,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param page A page number within the paginated result set.\n     * @param pageSize Number of results to return per page.\n     * @param search A search term.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public customersList(page?: number, pageSize?: number, search?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PaginatedCustomerList>;\n    public customersList(page?: number, pageSize?: number, search?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PaginatedCustomerList>>;\n    public customersList(page?: number, pageSize?: number, search?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PaginatedCustomerList>>;\n    public customersList(page?: number, pageSize?: number, search?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (page !== undefined && page !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>page, 'page');\n        }\n        if (pageSize !== undefined && pageSize !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageSize, 'page_size');\n        }\n        if (search !== undefined && search !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>search, 'search');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<PaginatedCustomerList>(`${this.configuration.basePath}/backend/masterdata/customers/`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param customerId \n     * @param forMonths \n     * @param speciesId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public customersMovingRiskList(customerId: number, forMonths: number, speciesId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<UserAssessmentMovingRisk>>;\n    public customersMovingRiskList(customerId: number, forMonths: number, speciesId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<UserAssessmentMovingRisk>>>;\n    public customersMovingRiskList(customerId: number, forMonths: number, speciesId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<UserAssessmentMovingRisk>>>;\n    public customersMovingRiskList(customerId: number, forMonths: number, speciesId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (customerId === null || customerId === undefined) {\n            throw new Error('Required parameter customerId was null or undefined when calling customersMovingRiskList.');\n        }\n        if (forMonths === null || forMonths === undefined) {\n            throw new Error('Required parameter forMonths was null or undefined when calling customersMovingRiskList.');\n        }\n        if (speciesId === null || speciesId === undefined) {\n            throw new Error('Required parameter speciesId was null or undefined when calling customersMovingRiskList.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<UserAssessmentMovingRisk>>(`${this.configuration.basePath}/backend/masterdata/customers/${encodeURIComponent(String(customerId))}/moving-risk/${encodeURIComponent(String(speciesId))}/${encodeURIComponent(String(forMonths))}/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param customerId \n     * @param forMonths \n     * @param speciesId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public customersMovingRiskSendReportCreate(customerId: number, forMonths: number, speciesId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public customersMovingRiskSendReportCreate(customerId: number, forMonths: number, speciesId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public customersMovingRiskSendReportCreate(customerId: number, forMonths: number, speciesId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public customersMovingRiskSendReportCreate(customerId: number, forMonths: number, speciesId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (customerId === null || customerId === undefined) {\n            throw new Error('Required parameter customerId was null or undefined when calling customersMovingRiskSendReportCreate.');\n        }\n        if (forMonths === null || forMonths === undefined) {\n            throw new Error('Required parameter forMonths was null or undefined when calling customersMovingRiskSendReportCreate.');\n        }\n        if (speciesId === null || speciesId === undefined) {\n            throw new Error('Required parameter speciesId was null or undefined when calling customersMovingRiskSendReportCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/backend/masterdata/customers/${encodeURIComponent(String(customerId))}/moving-risk/${encodeURIComponent(String(speciesId))}/${encodeURIComponent(String(forMonths))}/send-report/`,\n            null,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RegistrationComponent} from './registration.component';\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\nimport {MatCheckboxModule} from \"@angular/material/checkbox\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {ComponentsModule} from \"../../components/components.module\";\n\n\n@NgModule({\n    declarations: [RegistrationComponent],\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        TranslateModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatProgressSpinnerModule,\n        MatCheckboxModule,\n        MatButtonModule,\n        ComponentsModule,\n    ]\n})\nexport class RegistrationModule {\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Token { \n    token: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface TokenObtainPair { \n    email: string;\n    password: string;\n    readonly access: string;\n    readonly refresh: string;\n}\n\n","export const socialLinks: { icon: string, link: string, name: string, class?: string }[] = [\n    {\n        icon: 'linkedin',\n        link: 'https://de.linkedin.com/company/ew-nutrition',\n        name: 'LinkedIn',\n        class: 'linkedin'\n    },\n    {\n        icon: 'twitter',\n        link: 'https://twitter.com/ewnutritiongmbh',\n        name: 'Twitter',\n        class: 'twitter'\n    },\n    {\n        icon: 'youtube',\n        link: 'https://www.youtube.com/channel/UCIvcb19uSOJXrUecTY8n_dA',\n        name: 'YouTube',\n        class: 'youtube'\n    },\n    {\n        icon: 'instagram',\n        link: 'https://www.instagram.com/ewnutrition/',\n        name: 'Instagram',\n        class: 'instagram'\n    },\n];","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {Observable, of, Subject} from \"rxjs\";\nimport {first, takeUntil} from \"rxjs/operators\";\nimport {ApiService} from \"../../../../generated/api\";\nimport {FormControl, FormGroup, FormGroupDirective, NgForm, Validators} from \"@angular/forms\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {ErrorStateMatcher} from \"@angular/material/core\";\nimport {TranslateService} from \"@ngx-translate/core\";\n\n@Component({\n    selector: 'app-reset-password',\n    templateUrl: './reset-password.component.html',\n    styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit, OnDestroy {\n\n    private readonly destroyed$ = new Subject();\n\n    controls = {\n        token: new FormControl(null, Validators.required),\n        newPassword: new FormControl(null, Validators.required)\n    } as const;\n    formGroup = new FormGroup(this.controls);\n\n    passwordErrorMatcher: ErrorStateMatcher;\n    submitted: boolean = false;\n    error: Observable<string> | null = null;\n    loading: boolean = false;\n    valid: boolean = true;\n    token: string | null = null;\n\n    constructor(\n        private readonly route: ActivatedRoute,\n        private readonly apiService: ApiService,\n        private readonly translateService: TranslateService,\n    ) {\n        const component = this;\n        this.passwordErrorMatcher = new class extends ErrorStateMatcher {\n            isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n                return super.isErrorState(control, form) || component.error != null;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.route.params.pipe(\n            first(),\n            takeUntil(this.destroyed$)\n        ).subscribe(routeParams => {\n            this.token = routeParams['token'];\n            if (this.token) {\n                this.controls.token.setValue(this.token);\n                this.controls.token.disable();\n            } else {\n                this.controls.token.enable();\n            }\n        })\n    }\n\n    get hasToken(): boolean {\n        return this.token != null;\n    }\n\n    submit() {\n        if (this.formGroup.valid) {\n            this.loading = true;\n            this.error = null;\n            this.apiService.apiPasswordResetConfirmCreate({\n                password: this.controls.newPassword.value,\n                token: this.controls.token.value\n            }).pipe(\n                takeUntil(this.destroyed$),\n            ).subscribe({\n                next: () => {\n                    this.loading = false;\n                    this.submitted = true;\n                },\n                error: err => {\n                    this.loading = false;\n                    console.error('Reset Password failed', err);\n                    if (err instanceof HttpErrorResponse && Math.floor(err.status / 100) === 4 && typeof err.error === 'object' && Array.isArray(err.error.password)) {\n                        this.error = of(err.error.password.map(p => String(p)).join(', '));\n                    } else {\n                        this.error = this.translateService.get('RESETPASSWORD_FAILED');\n                    }\n                }\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n\n}\n","<h2 ngx-translate>RESET_PASSWORD_HEADER</h2>\n<ng-container *ngIf=\"!submitted\">\n    <form [formGroup]=\"formGroup\" class=\"form-container\" (ngSubmit)=\"submit()\">\n        <mat-form-field>\n            <mat-label>\n              <span ngx-translate>RESET_PASSWORD_TOKEN_LABEL</span>\n            </mat-label>\n            <input matInput [formControl]=\"controls.token\">\n            <mat-error>\n                <ng-container *ngIf=\"controls.token.errors?.required\">\n                    <span ngx-translate>\n                      RESET_PASSWORD_TOKEN_ERROR_REQUIRED\n                    </span>\n                </ng-container>\n            </mat-error>\n        </mat-form-field>\n        <mat-form-field>\n            <mat-label>\n              <span ngx-translate>RESET_PASSWORD_NEW_PASSWORD_LABEL</span>\n            </mat-label>\n            <input matInput [formControl]=\"controls.newPassword\" [errorStateMatcher]=\"passwordErrorMatcher\">\n            <mat-error>\n                <ng-container *ngIf=\"error != null\">\n                    {{ error|async }}\n                </ng-container>\n                <ng-container *ngIf=\"error == null && controls.newPassword.errors?.required\">\n                    <span ngx-translate>\n                      RESET_PASSWORD_NEW_PASSWORD_ERROR_REQUIRED\n                    </span>\n                </ng-container>\n            </mat-error>\n        </mat-form-field>\n        <div class=\"button-container\">\n            <button mat-flat-button color=\"primary\">\n              <span ngx-translate>RESET_PASSWORD_SUBMIT</span>\n            </button>\n            <mat-spinner [style]=\"{visibility: loading ? 'visible' : 'hidden'}\" [diameter]=\"30\"></mat-spinner>\n        </div>\n    </form>\n</ng-container>\n<ng-container *ngIf=\"submitted\">\n    <p [innerHTML]=\"'LOSTPASSWORD_SUCCESSTEXT'|translate\"></p>\n</ng-container>\n","import {Component, OnInit} from '@angular/core';\nimport {socialLinks} from \"../../../util/social-links\";\nimport {Router} from \"@angular/router\";\nimport {FormDataService} from \"../../../services/form-data.service\";\n\n@Component({\n    selector: 'app-social-bar',\n    templateUrl: './social-bar.component.html',\n    styleUrls: ['./social-bar.component.scss']\n})\nexport class SocialBarComponent implements OnInit {\n\n    socialLinks = socialLinks;\n\n    constructor(\n        private readonly router: Router,\n        private readonly formDataService: FormDataService,\n    ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    goToHome() {\n        this.formDataService.goToRoot();\n    }\n\n}\n","<mat-toolbar color=\"primary\">\n    <mat-toolbar-row class=\"socialbar\">\n        <span class=\"title\" (click)=\"goToHome()\">\n            <!-- <span class=\"first-word\">Risk</span>Cloud -->\n            <img src=\"/assets/img/logo-top.png\" alt=\"MasterRisk\" class=\"logoimage\" class=\"logo-top\">\n        </span>\n    </mat-toolbar-row>\n</mat-toolbar>\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, Pipe, QueryList, SimpleChanges, ViewChild, ViewChildren } from '@angular/core';\nimport { combineLatest, Observable, ReplaySubject, Subject } from \"rxjs\";\nimport { debounceTime, distinctUntilChanged, filter, finalize, map, shareReplay, startWith, switchMap, takeUntil } from \"rxjs/operators\";\nimport { MovingRiskData, ResultOutput } from \"../../../util/data\";\nimport type { Chart } from 'chart.js';\nimport { Level, SendReportService, Species } from \"../../../../generated/api\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { AlertComponent, AlertData } from \"../alert/alert.component\";\nimport { LoginService } from \"../../../services/login.service\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { CurrentLanguageService } from \"../../../services/current-language.service\";\nimport { DataService } from \"../../../services/data.service\";\nimport { ChartJsService } from \"../../../services/chart-js.service\";\nimport jspdf from 'jspdf';\nimport html2canvas from 'html2canvas';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n    selector: 'app-result',\n    templateUrl: './result.component.html',\n    styleUrls: ['./result.component.scss']\n})\nexport class ResultComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n\n    private readonly destroyed$ = new Subject();\n    private readonly resultOutput$ = new ReplaySubject<ResultOutput | null>(1);\n    private chartJsAndData$: Observable<[typeof Chart, Chart.ChartConfiguration[]] | null>;\n    @Input()\n    resultOutput: any | null = null;\n\n    @Input()\n    apiErrors: unknown | null = null;\n\n    @Input()\n    externalReport: boolean = false;\n\n    @Input()\n    showButtons: boolean = true;\n\n    @Output()\n    restart = new EventEmitter<void>();\n    @ViewChild('pdfElement')\n    pdfElement: ElementRef;\n    htmlData: any;\n    joinedEmailRecipients: string | null = null;\n\n    private sending$ = new Subject<boolean>();\n    summary: any;\n    loggedIn = false;\n    haveCharts = false;\n    chartsLoaded = false;\n    species: Species | null;\n\n    movingRiskData: ReadonlyArray<MovingRiskData> | null;\n\n    sending = false;\n    reportSent = false;\n\n    fillerColumns: number[] = [];\n\n    @ViewChildren('canvasElement')\n    canvasElements: QueryList<ElementRef<HTMLCanvasElement>>;\n    levels: Level[] | null = null;\n\n    constructor(\n        private readonly chartJsService: ChartJsService,\n        private readonly sendReportService: SendReportService,\n        private readonly loginService: LoginService,\n        private readonly matDialog: MatDialog,\n        private readonly translateService: TranslateService,\n        private readonly languageService: CurrentLanguageService,\n        private readonly dataService: DataService,\n        private readonly httpCLient: HttpClient,\n    ) {\n    }\n    ngOnInit(): void {\n        this.dataService.get('levels').pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(levels => this.levels = levels);\n        this.resultOutput$.pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(resultOutput => {\n            this.summary = this.resultOutput?.pop();\n            this.joinedEmailRecipients = resultOutput?.apiData?.email_recipients?.join(', ') ?? null;\n            this.species = resultOutput?.species;\n            this.fillerColumns = resultOutput == null ? [] : Array.from({ length: 5 - resultOutput.samples.length });\n        });\n\n\n        this.resultOutput = {\n            \"sampleType\": [\n                {\n                    \"id\": \"feeds\",\n                    \"text\": \"Complete Feeds\",\n                    \"has_inclusion_rate\": false,\n                    \"has_total_risk\": false,\n                    \"has_bw_loss_and_fcr_graph\": true\n                },\n                {\n                    \"id\": \"diet\",\n                    \"text\": \"Diet Components\",\n                    \"has_inclusion_rate\": true,\n                    \"has_total_risk\": true,\n                    \"has_bw_loss_and_fcr_graph\": true\n                },\n                {\n                    \"id\": \"materials\",\n                    \"text\": \"Raw Materials\",\n                    \"has_inclusion_rate\": false,\n                    \"has_total_risk\": false,\n                    \"has_bw_loss_and_fcr_graph\": false\n                }\n            ],\n            \"species\": [\n                {\n                    \"id\": \"shrimp\",\n                    \"text\": \"Aqua Shrimp\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\"\n                    ]\n                },\n                {\n                    \"id\": \"tilapia\",\n                    \"text\": \"Aqua Tilapia\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\"\n                    ]\n                },\n                {\n                    \"id\": \"breeders\",\n                    \"text\": \"Poultry Breeders\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"SL\",\n                        \"SLM\",\n                        \"SLM2\",\n                        \"SLP\",\n                        \"SLP2.0\"\n                    ]\n                },\n                {\n                    \"id\": \"broilers\",\n                    \"text\": \"Poultry Broilers\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"SL\",\n                        \"SLM\",\n                        \"SLM2\",\n                        \"SLP\",\n                        \"SLP2.0\"\n                    ]\n                },\n                {\n                    \"id\": \"layers\",\n                    \"text\": \"Poultry Layers\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"SL\",\n                        \"SLM\",\n                        \"SLM2\",\n                        \"SLP\",\n                        \"SLP2.0\"\n                    ]\n                },\n                {\n                    \"id\": \"pullets\",\n                    \"text\": \"Poultry Pullets\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"SL\",\n                        \"SLM\",\n                        \"SLM2\",\n                        \"SLP\",\n                        \"SLP2.0\"\n                    ]\n                },\n                {\n                    \"id\": \"chicks\",\n                    \"text\": \"Poultry Starters\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"SL\",\n                        \"SLM\",\n                        \"SLM2\",\n                        \"SLP\",\n                        \"SLP2.0\"\n                    ]\n                },\n                {\n                    \"id\": \"beef\",\n                    \"text\": \"Ruminants Beef Cattle\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsP\"\n                    ]\n                },\n                {\n                    \"id\": \"calves\",\n                    \"text\": \"Ruminants Calves\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"MsP\"\n                    ]\n                },\n                {\n                    \"id\": \"dairy\",\n                    \"text\": \"Ruminants Dairy Cows\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"MsP\"\n                    ]\n                },\n                {\n                    \"id\": \"fattening\",\n                    \"text\": \"Swine Growing-Finisher\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"SL\",\n                        \"SLM\",\n                        \"SLM2\",\n                        \"SLP\",\n                        \"SLP2.0\"\n                    ]\n                },\n                {\n                    \"id\": \"piglets\",\n                    \"text\": \"Swine Piglets\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"SL\",\n                        \"SLM\",\n                        \"SLM2\",\n                        \"SLP\",\n                        \"SLP2.0\"\n                    ]\n                },\n                {\n                    \"id\": \"sows\",\n                    \"text\": \"Swine Sows\",\n                    \"has_products\": [\n                        \"MsFm\",\n                        \"MsGld\",\n                        \"SL\",\n                        \"SLM\",\n                        \"SLM2\",\n                        \"SLP\",\n                        \"SLP2.0\"\n                    ]\n                }\n\n            ],\n            \"apiData\": {\n                \"author\": \"xxx\"\n            },\n            \"sampleTypes\":\n            {\n                \"id\": \"feeds\",\n                \"text\": \"Complete Feeds\",\n                \"has_inclusion_rate\": false,\n                \"has_total_risk\": false,\n                \"has_bw_loss_and_fcr_graph\": true\n            }\n        }\n\n        // this.loginService.loggedIn.pipe(\n        //     takeUntil(this.destroyed$)\n        // ).subscribe(loggedIn => this.loggedIn = loggedIn);\n\n        // this.sending$.pipe(\n        //     debounceTime(200),\n        //     takeUntil(this.destroyed$)\n        // ).subscribe(sending => this.sending = sending);\n\n        const chartJsData = combineLatest([this.resultOutput$, this.translateService.get('SAMPLE')]).pipe(\n            map<[ResultOutput | null, string], Chart.ChartConfiguration[] | null>(([resultOutput, sampleText]) => {\n                if (resultOutput == null || !resultOutput?.sampleType?.has_bw_loss_and_fcr_graph) {\n                    return null;\n                } else if (!resultOutput.samples.some(s => s.fcrFactor != null || s.bwFactor != null) && resultOutput.totalBwFactor == null && resultOutput.totalFcrFactor == null) {\n                    return null;\n                } else {\n                    const defaultDatasetProps: Partial<Chart.ChartDataSets> = {\n                        backgroundColor: [\n                            'rgba(255, 99, 132, 0.2)',\n                            'rgba(54, 162, 235, 0.2)',\n                            'rgba(255, 206, 86, 0.2)',\n                            'rgba(75, 192, 192, 0.2)',\n                            'rgba(153, 102, 255, 0.2)',\n                            'rgba(255, 159, 64, 0.2)'\n                        ],\n                        borderColor: [\n                            'rgba(255, 99, 132, 1)',\n                            'rgba(54, 162, 235, 1)',\n                            'rgba(255, 206, 86, 1)',\n                            'rgba(75, 192, 192, 1)',\n                            'rgba(153, 102, 255, 1)',\n                            'rgba(255, 159, 64, 1)'\n                        ],\n                        borderWidth: 1,\n                        maxBarThickness: 60\n                    };\n                    const defaultOptions = {\n                        legend: {\n                            display: false\n                        }\n                    } as const;\n                    const labels = resultOutput.sampleType.has_total_risk ? [sampleText] : resultOutput.apiData.samples.map(sample => sample.name);\n                    return [\n                        {\n                            type: 'bar',\n                            data: {\n                                labels: labels,\n                                datasets: [{\n                                    data: resultOutput.sampleType.has_total_risk ? [resultOutput.totalBwFactor ?? 0] : resultOutput.samples.map(sample => sample.bwFactor ?? 0),\n                                    ...defaultDatasetProps\n                                }],\n                            },\n                            options: {\n                                ...defaultOptions,\n                                scales: {\n                                    yAxes: [{\n                                        ticks: {\n                                            suggestedMax: 0,\n                                        }\n                                    }],\n                                },\n\n                            }\n                        },\n                        {\n                            type: 'bar',\n                            data: {\n                                labels: labels,\n                                datasets: [{\n                                    data: resultOutput.sampleType.has_total_risk ? [resultOutput.totalFcrFactor ?? 0] : resultOutput.samples.map(sample => sample.fcrFactor ?? 0),\n                                    ...defaultDatasetProps\n                                }],\n                            },\n                            options: {\n                                ...defaultOptions,\n                                scales: {\n                                    yAxes: [{\n                                        ticks: {\n                                            suggestedMin: 0,\n                                        }\n                                    }],\n                                },\n\n                            }\n                        },\n                    ]\n                }\n            }),\n            shareReplay(1),\n            takeUntil(this.destroyed$)\n        );\n\n        this.chartJsAndData$ = chartJsData.pipe(\n            switchMap(data => {\n                return data == null ? [null] : this.chartJsService.chartJs.pipe(map(chartJs => ([chartJs, data])))\n            }),\n            shareReplay(1),\n            takeUntil(this.destroyed$)\n        );\n\n        this.chartJsAndData$.subscribe(chartJsAndData => {\n            this.chartsLoaded = chartJsAndData != null;\n        });\n\n        chartJsData.subscribe(chartJsData => {\n            this.haveCharts = chartJsData != null;\n        });\n\n        this.resultOutput$.subscribe(resultOutput => {\n            this.reportSent = false;\n            this.movingRiskData = (resultOutput?.movingRiskData?.length ?? 0) > 1 ? resultOutput.movingRiskData : null;\n        })\n    }\n\n\n    ngAfterViewInit() {\n        const latestCanvas = this.canvasElements.changes.pipe(\n            startWith(0),\n            map(() => this.canvasElements.toArray().map(c => c.nativeElement)),\n            distinctUntilChanged((a, b) => {\n                if (a.length !== b.length) {\n                    return false;\n                } else {\n                    return !a.some((v, idx) => b[idx] !== v);\n                }\n            })\n        );\n\n        combineLatest([latestCanvas, this.chartJsAndData$]).pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(([canvasElements, chartJsAndData]) => {\n            if (chartJsAndData != null) {\n                ResultComponent.renderCharts(canvasElements, chartJsAndData[0], chartJsAndData[1])\n            }\n        });\n    }\n\n    ready(): boolean {\n        return (this.resultOutput != null && this.levels != null) || this.apiErrors != null\n    }\n\n    restartClick() {\n        this.restart.emit();\n    }\n\n    sendClick() {\n        if (this.resultOutput != null) {\n            this.sending$.next(true);\n            this.sendReportService.sendReportCreate(this.resultOutput.apiData.id, this.resultOutput.apiData.secret_token).pipe(\n                finalize(() => this.sending$.next(false)),\n                takeUntil(this.destroyed$)\n            ).subscribe({\n                next: () => {\n                    this.reportSent = true;\n                },\n                error: err => {\n                    console.error('Failed sending report', err);\n                    this.matDialog.open<AlertComponent, AlertData>(AlertComponent, {\n                        autoFocus: false,\n                        data: {\n                            icon: 'error',\n                            iconColor: 'warn',\n                            title: 'Failed sending report',\n                            message: 'Your report could not be sent. Please try again later.',\n                            buttons: [\n                                {\n                                    id: '',\n                                    text: 'GENERAL_OK'\n                                }\n                            ]\n                        }\n                    });\n                }\n            })\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.resultOutput) {\n            this.resultOutput$.next(this.resultOutput);\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n        this.resultOutput$.complete();\n    }\n\n    private static renderCharts(canvasElements: HTMLCanvasElement[], chartJs: typeof Chart, charts: Chart.ChartConfiguration[]) {\n        if (canvasElements.length !== charts.length) {\n            return;\n        } else {\n            for (let idx = 0; idx < canvasElements.length; idx++) {\n                new chartJs.Chart(canvasElements[idx], charts[idx]);\n            }\n        }\n    }\n    convetToPDF() {\n        this.httpCLient.get('/assets/result.html', { responseType: 'text' }).subscribe(data => {\n            let tr = ``;\n            this.resultOutput.forEach(element => {\n                tr = `${tr}  <tr>\n                <td width=\"50%\" valign=\"top\"\n                style=\"font-size:9px;color:#000; font-weight:500; font-family:Inter, sans-serif; text-align:left; padding:0px 0px 0px 20px; line-height: 25px; \">\n                ${element?.ingredients}</td>\n                <td width=\"20%\" valign=\"top\"\n                style=\"font-size:9px;color:#000; font-weight:500; font-family:Inter, sans-serif; text-align:center; padding:0px 0px 0px 0px; line-height: 25px; \">\n                ${element?.inclusion_percentage}</td>\n                <td width=\"30%\" valign=\"top\"\n              style=\"font-size:9px;color:#000; font-weight:500; font-family:Inter, sans-serif; text-align:center; padding:0px 0px 0px 0px; line-height: 25px; \">\n              ${element?.me_kcal}</td>\n            </tr>`;\n            });\n\n            this.htmlData = data\n            .replace('__species', this.resultOutput[0]?.species)\n                .replace('__Total_Sol_AX_percent', this.summary?.Total_Sol_AX_percent)\n                .replace('__Total_Formulation_Insol_AX_percentage', this.summary?.Total_Formulation_Insol_AX_percentage)\n                .replace('__Total_Sol_AX_percent', this.summary?.Total_Sol_AX_percent)\n                .replace('__Total_Improved_ME_Kcal_per_kg', this.summary?.Total_Improved_ME_Kcal_per_kg)\n                .replace('__Axxess_XY', this.summary?.Axxess_XY)\n                .replace('__FORMULATUION', tr)\n                .replace('__AX_free_ingredients', this.summary?.AX_free_ingredients)\n                .replace('__Total_Formulation_Inclusion_percentage', this.summary?.Total_Formulation_Inclusion_percentage)\n                .replace('__Total_Formulation_ME_KCALperkg', this.summary?.Total_Formulation_ME_KCALperkg)\n\n            const iframe = document.createElement(\"iframe\");\n            document.body.appendChild(iframe); // 👈 still required\n            iframe.contentWindow.document.open();\n            iframe.contentWindow.document.write(this.htmlData);\n            iframe.contentWindow.document.close();\n            html2canvas(iframe.contentWindow.document.body).then(canvas => {\n                // Few necessary setting options\n                var imgWidth = 208;\n                var pageHeight = 295;\n                var imgHeight = canvas.height * imgWidth / canvas.width;\n                var heightLeft = imgHeight;\n\n                const contentDataURL = canvas.toDataURL('image/png')\n                let pdf = new jspdf('p', 'mm', 'a4'); // A4 size page of PDF\n                var position = 0;\n                pdf.addImage(contentDataURL, 'PNG', 0, position, imgWidth, imgHeight)\n                pdf.save('new-file.pdf'); // Generated PDF\n            });\n        });\n    }\n}\n","<ng-container *ngIf=\"ready(); else: spinner\">\n    <ng-container *ngIf=\"apiErrors == null\">\n        <table class=\"results-table\" style=\"width: 100%;\">\n            <thead>\n                <tr class=\"sample-header--first\">\n                    <th scope=\"row\" class=\"sample-header__head bgnone\"> <span ngx-translate>Species</span></th>\n                    <th scope=\"row\" class=\"sample-header__head bgnone\" > <span ngx-translate>{{ resultOutput[0]?.species }}</span></th>\n                    <th scope=\"row\" class=\"ample-header__head bgnone\" > <span ngx-translate>Energy Uplift By AxxessXY in Complete Diet:</span></th>\n                </tr>\n            </thead>\n            <tbody>\n            <tr class=\"sample-header--second\">\n                <th scope=\"row\" ngx-translate>Total Sol AX%</th>\n                <td class=\"bgnone\">{{summary?.Total_Sol_AX_percent}}</td>\n                <td  class=\"bgnone\">&nbsp;</td>\n            </tr>\n            <tr>\n                <th scope=\"row\" ngx-translate>Total Sol AX%</th>\n                <td  class=\"bgnone\">{{summary?.Total_Formulation_Insol_AX_percentage}}</td>\n                <td  class=\"bgnone bdrtop\">&nbsp;</td>\n            </tr>\n            <tr>\n                <th scope=\"row\" ngx-translate>Total Sol AX%</th>\n                <td  class=\"bgnone\">{{summary?.Total_Improved_ME_Kcal_per_kg}}</td>\n                <td  class=\"bgnone bdrtop\">&nbsp;</td>\n            </tr>\n            <tr>\n                <th scope=\"row\"  class=\"bgnone\" ngx-translate>&nbsp;</th>\n                <th scope=\"row\"  class=\"bgnone\" ngx-translate>&nbsp;</th>\n                <td  class=\"bgnone\">{{summary?.Axxess_XY}}</td>\n            </tr>\n            </tbody>\n        </table>\n        <ng-container>\n            <p class=\"small-disclaimer heading\">\n                <span ngx-translate>Formulation</span>\n            </p>\n            <table class=\"generaltable\" cellPadding=\"0\" cellSpacing=\"0\" border=\"0\">\n                <thead>\n                    <tr  class=\"sample-header sample-header--first\">\n                        <th scope=\"row\" class=\"sample-header__head leftalign\"> <span ngx-translate>Ingredients</span></th>\n                        <th scope=\"row\" class=\"sample-header__head centeralign\"> <span ngx-translate>Inclusion</span></th>\n                        <th scope=\"row\" class=\"sample-header__head centeralign\"> <span ngx-translate>ME, Kcal/Kg</span></th>\n                    </tr>\n                </thead>\n                <tbody>\n                <tr  *ngFor=\"let row of resultOutput; let i = index\">\n                    <th scope=\"row\" ngx-translate class=\"leftalign bgbdrnone\">{{row?.ingredients}}</th>\n                    <td>{{row?.inclusion_percentage}}</td>\n                    <td>{{row?.me_kcal}}</td>\n                </tr>\n                </tbody>\n            </table>\n        </ng-container>\n\n        <ng-container>\n        \n            <table class=\"btable\" cellPadding=\"0\" cellSpacing=\"10\" border=\"0\">\n                <tbody>\n                <tr>\n                    <th colspan=\"2\" scope=\"row\" ngx-translate>Ax Free Ingredient</th>\n                    <td colspan=\"2\">{{summary?.AX_free_ingredients}}</td>\n                </tr>\n                <!-- <tr>\n                    <th colspan=\"2\" scope=\"row\" ngx-translate>Total Sol AX%</th>\n                    <td>{{summary?.Total_Sol_AX_percent}}</td>\n                    <td>{{summary?.Total_Insol_AX_percent}}</td>\n                </tr> -->\n                <tr>\n                    <th scope=\"row\"  colspan=\"2\">Total Formulation</th>\n                    <td>{{summary?.Total_Formulation_Inclusion_percentage}}</td>\n                    <td>{{summary?.Total_Formulation_ME_KCALperkg}}</td>\n                </tr>\n\n                </tbody>\n            </table>\n\n        </ng-container>\n      \n\n        <div class=\"button-container\" *ngIf=\"showButtons\">\n            <button mat-flat-button color=\"primary\" (click)=\"sendClick()\" *ngIf=\"loggedIn\" [disabled]=\"reportSent\">\n                <ng-container *ngIf=\"!sending\">\n                    <span ngx-translate *ngIf=\"!reportSent\">STEPFOUR_SEND</span>\n                    <span ngx-translate *ngIf=\"reportSent\">STEPFOUR_POPUP_HEADING</span>\n                </ng-container>\n                <mat-spinner *ngIf=\"sending\" color=\"accent\" [diameter]=\"20\"></mat-spinner>\n            </button>\n            <button mat-flat-button color=\"primary\" (click)=\"restartClick()\">\n                <span ngx-translate>Make New Assignment</span>\n            </button>\n            <button mat-flat-button color=\"primary\" (click)=\"convetToPDF()\">\n              <span ngx-translate>Download</span>\n          </button>\n        </div>\n      </ng-container>\n    <ng-container *ngIf=\"apiErrors != null\">\n        <div ngx-translate>STEPFOUR_API_ERROR</div>\n    </ng-container>\n</ng-container>\n<ng-template #spinner>\n    <div class=\"spinner\">\n        <mat-spinner color=\"primary\"></mat-spinner>\n    </div>\n</ng-template>\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface PasswordToken { \n    password: string;\n    token: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BackendService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json\n     * @param format \n     * @param lang \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public backendApiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'de' | 'en' | 'es' | 'fr' | 'pt' | 'ru' | 'zh-tw', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.oai.openapi' | 'application/yaml' | 'application/vnd.oai.openapi+json' | 'application/json'}): Observable<{ [key: string]: any; }>;\n    public backendApiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'de' | 'en' | 'es' | 'fr' | 'pt' | 'ru' | 'zh-tw', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.oai.openapi' | 'application/yaml' | 'application/vnd.oai.openapi+json' | 'application/json'}): Observable<HttpResponse<{ [key: string]: any; }>>;\n    public backendApiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'de' | 'en' | 'es' | 'fr' | 'pt' | 'ru' | 'zh-tw', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.oai.openapi' | 'application/yaml' | 'application/vnd.oai.openapi+json' | 'application/json'}): Observable<HttpEvent<{ [key: string]: any; }>>;\n    public backendApiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'de' | 'en' | 'es' | 'fr' | 'pt' | 'ru' | 'zh-tw', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.oai.openapi' | 'application/yaml' | 'application/vnd.oai.openapi+json' | 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (format !== undefined && format !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>format, 'format');\n        }\n        if (lang !== undefined && lang !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>lang, 'lang');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/vnd.oai.openapi',\n                'application/yaml',\n                'application/vnd.oai.openapi+json',\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<{ [key: string]: any; }>(`${this.configuration.basePath}/backend/api/schema/`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {LostPasswordComponent} from './lost-password.component';\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\nimport {ComponentsModule} from \"../../components/components.module\";\n\n\n@NgModule({\n    declarations: [LostPasswordComponent],\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        TranslateModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatButtonModule,\n        MatProgressSpinnerModule,\n        ComponentsModule\n    ]\n})\nexport class LostPasswordModule {\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class Configuration {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n\n        // init default jwtAuth credential\n        if (!this.credentials['jwtAuth']) {\n            this.credentials['jwtAuth'] = () => {\n                return typeof this.accessToken === 'function'\n                    ? this.accessToken()\n                    : this.accessToken;\n            };\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { RegisterService } from \"../../../../generated/api\";\nimport { first, takeUntil } from \"rxjs/operators\";\nimport { forkJoin, Subject } from \"rxjs\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { AlertComponent, AlertData } from \"../../components/alert/alert.component\";\nimport { TranslateService } from \"@ngx-translate/core\";\n\n@Component({\n    selector: 'app-registration',\n    templateUrl: './registration.component.html',\n    styleUrls: ['./registration.component.scss']\n})\nexport class RegistrationComponent implements OnInit, OnDestroy {\n\n    private readonly destroyed$ = new Subject();\n\n    loading = false;\n    submitted = false;\n    error = false;\n    dialog: any;\n    controls = {\n        name: new FormControl('', Validators.required),\n        password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n        email: new FormControl('', [Validators.required, Validators.email]),\n        country: new FormControl('', Validators.required),\n        companyName: new FormControl('', Validators.required),\n        companyAddress: new FormControl('', Validators.required),\n        privacyAccept: new FormControl(false, Validators.requiredTrue),\n        dataSendAccept: new FormControl(false)\n    } as const;\n    formGroup = new FormGroup(this.controls);\n\n    constructor(\n        private readonly registerService: RegisterService,\n        private readonly translateService: TranslateService,\n        private readonly matDialog: MatDialog\n    ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    submit() {\n        this.submitted = true;\n\n        if (this.formGroup.valid) {\n            this.loading = true;\n            this.registerService.registerCreate({\n                name: this.controls.name.value,\n                email: this.controls.email.value,\n                country_name: this.controls.country.value,\n                company_name: this.controls.companyName.value,\n                company_address: this.controls.companyAddress.value,\n                password: this.controls.password.value,\n                privacy_policy: this.controls.privacyAccept.value,\n                nutrition_verification: this.controls.dataSendAccept.value\n            }).pipe(\n                takeUntil(this.destroyed$),\n            ).subscribe({\n                next: () => {\n                    this.loading = false;\n                    const dialog = this.matDialog.open<AlertComponent, AlertData>(AlertComponent, {\n                        data: {\n                            icon: 'error',\n                            iconColor: 'primary',\n                            title: 'Thank You',\n                            message: 'Your message has been successfully sent. we will contact you very soon',\n                            buttons: [\n                                {\n                                    id: '1',\n                                    text: 'OK'\n                                }\n                            ]\n                        },\n                        autoFocus: false\n                    });\n\n\n                    dialog.afterClosed().subscribe(result => {\n                        if (result?.button === '1') {\n                            this.formGroup.reset();\n                            this.controls.name.setErrors(null);\n                            this.controls.email.setErrors(null);\n                            this.controls.country.setErrors(null);\n                            this.controls.companyName.setErrors(null);\n                            this.controls.password.setErrors(null);\n                            this.controls.privacyAccept.setErrors(null);\n                            this.controls.dataSendAccept.setErrors(null);\n                            this.controls.companyAddress.setErrors(null);\n                            this.formGroup.markAsUntouched();\n                            this.formGroup.markAsPristine();\n                        }\n                    });\n                },\n                error: err => {\n                    this.loading = false;\n                    console.error('Registration failed', err);\n                    this.dialog = this.matDialog.open<AlertComponent, AlertData>(AlertComponent, {\n                        data: {\n                            icon: 'error',\n                            iconColor: 'warn',\n                            title: 'Registration Failed',\n                            message: err?.error?.email ? err?.error?.email?.join(',') : 'Something Went wrong, please check with adminstrator',\n                            buttons: [\n                                {\n                                    id: '2',\n                                    text: 'OK'\n                                }\n                            ]\n                        },\n                        autoFocus: false\n                    });\n                }\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n\n}\n","<div class=\"registration-container\">\n    <h2 ngx-translate>Registration</h2>\n    <ng-container>\n        <p ngx-translate>Use the form below to register. After we have successfully verified your registration, you will receive an email containing your Master Risk user data.</p>\n        <form [formGroup]=\"formGroup\" (ngSubmit)=\"submit()\">\n            <mat-form-field appearance=\"standard\">\n                <mat-label><span ngx-translate>Name*:</span></mat-label>\n                <input matInput [formControl]=\"controls.name\">\n                <mat-error *ngIf=\"controls.name.invalid\">\n                    <ng-container *ngIf=\"controls.name.errors.required\">\n                        <span ngx-translate>Please enter your Name.</span>\n                    </ng-container>\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"standard\">\n                <mat-label><span ngx-translate>Email*:</span></mat-label>\n                <input matInput type=\"email\" [formControl]=\"controls.email\">\n                <mat-error *ngIf=\"controls.email.invalid\">\n                    <ng-container *ngIf=\"controls.email.errors.required\">\n                        <span ngx-translate>Please enter your Email.</span>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"controls.email.errors.email\">\n                        <span ngx-translate>Please re-check your Email.</span>\n                    </ng-container>\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"standard\">\n                <mat-label><span ngx-translate>Password*:</span></mat-label>\n                <input matInput [formControl]=\"controls.password\">\n                <mat-error *ngIf=\"controls.password.invalid\">\n                    <ng-container *ngIf=\"controls.password.errors.required\">\n                        <span ngx-translate>Please enter your Password.</span>\n                    </ng-container>\n                    <ng-container *ngIf=\"controls.password.errors.minlength\">\n                        <span ngx-translate>Password should be at least 6 characters.</span>\n                    </ng-container>\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"standard\">\n                <mat-label><span ngx-translate>Country*:</span></mat-label>\n                <input matInput [formControl]=\"controls.country\">\n                <mat-error *ngIf=\"controls.country.invalid\">\n                    <ng-container *ngIf=\"controls.country.errors.required\">\n                        <span ngx-translate>Please enter your Country.</span>\n                    </ng-container>\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"standard\">\n                <mat-label><span ngx-translate>Company name*:</span></mat-label>\n                <input matInput [formControl]=\"controls.companyName\">\n                <mat-error *ngIf=\"controls.companyName.invalid\">\n                    <ng-container *ngIf=\"controls.companyName.errors.required\">\n                        <span ngx-translate>Please enter your Company Name.</span>\n                    </ng-container>\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"standard\">\n                <mat-label><span ngx-translate>Address of company*:</span></mat-label>\n                <textarea matInput [formControl]=\"controls.companyAddress\"></textarea>\n                <mat-error *ngIf=\"controls.companyAddress.invalid\">\n                    <ng-container *ngIf=\"controls.companyAddress.errors.required\">\n                        <span ngx-translate>Please enter your Company Address.</span>\n                    </ng-container>\n                </mat-error>\n            </mat-form-field>\n\n            <mat-checkbox [formControl]=\"controls.privacyAccept\">\n                <span ngx-translate>I have read the privacy policy*</span>\n                <mat-error *ngIf=\"submitted && controls.privacyAccept.invalid\">\n                    <ng-container *ngIf=\"controls.privacyAccept.errors.required\">\n                        <span ngx-translate>Please accept the privacy policy.</span>\n                    </ng-container>\n                </mat-error>\n            </mat-checkbox>\n\n            <mat-checkbox [formControl]=\"controls.dataSendAccept\">\n                <span ngx-translate>I accept that my data will be sent to EW Nutrition to verify the registration</span>\n            </mat-checkbox>\n\n            <div class=\"button-container\">\n                <button mat-flat-button color=\"primary\" type=\"submit\" [disabled]=\"loading\">\n                    <app-button-spinner [spinning]=\"loading\"></app-button-spinner>\n                    <span ngx-translate>Register</span>\n                </button>\n                <mat-spinner [style]=\"{visibility: loading ? 'visible' : 'hidden'}\" [diameter]=\"30\"></mat-spinner>\n            </div>\n        </form>\n    </ng-container>\n    <!-- <ng-container *ngIf=\"submitted\">\n        <p [innerHTML]=\"'REGISTRATION_SUBMITTED'|translate\"></p>\n    </ng-container> -->\n</div>","import {AfterViewInit, Component, ElementRef, Input, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges, ViewChildren} from '@angular/core';\nimport {MovingRiskData, ResultOutput} from \"../../../util/data\";\nimport {combineLatest, fromEvent, Observable, Subject} from \"rxjs\";\nimport {distinctUntilChanged, filter, map, shareReplay, startWith, switchMap, takeUntil} from \"rxjs/operators\";\nimport type {Chart} from \"chart.js\";\nimport {LanguageService} from \"../../../services/language.service\";\nimport {DataService} from \"../../../services/data.service\";\nimport {ChartJsService} from \"../../../services/chart-js.service\";\nimport {Level, Species} from \"../../../../generated/api\";\nimport {TranslateService} from \"@ngx-translate/core\";\n\n@Component({\n    selector: 'app-moving-risk-display',\n    templateUrl: './moving-risk-display.component.html',\n    styleUrls: ['./moving-risk-display.component.scss']\n})\nexport class MovingRiskDisplayComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n\n    @Input()\n    movingRiskData: ReadonlyArray<MovingRiskData>;\n\n    @Input()\n    species: Species;\n\n    @Input()\n    reportMode: boolean = false;\n\n    @ViewChildren('movingCanvasElement')\n    movingCanvasElements: QueryList<ElementRef<HTMLCanvasElement>>;\n\n    haveMovingCharts = false;\n    movingChartsLoaded = false;\n    movingRiskHeaderText: string | null = null;\n    reportHtml: string | null = null;\n\n\n    private chartJsAndMovingRiskData$: Observable<[typeof Chart, Chart.ChartConfiguration] | null>;\n    private readonly movingRiskData$ = new Subject<ReadonlyArray<MovingRiskData>>();\n    private readonly species$ = new Subject<Species>();\n    private readonly destroyed$ = new Subject();\n\n    constructor(\n        private readonly languageService: LanguageService,\n        private readonly translateService: TranslateService,\n        private readonly dataService: DataService,\n        private readonly chartJsService: ChartJsService,\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.species$.pipe(\n            switchMap(species => {\n                if (species == null) {\n                    return [null];\n                } else {\n                    return this.translateService.get('MOVING_RISKS', {species: species.text});\n                }\n            }),\n            takeUntil(this.destroyed$)\n        ).subscribe(text => this.movingRiskHeaderText = text);\n\n        const maxLevel$ = this.dataService.get('levels').pipe(\n            map(levels => Math.max(...levels.map(l => l.level_factor ?? 0)))\n        );\n\n        const movingChartData = combineLatest([this.languageService.currentLanguage, this.movingRiskData$, maxLevel$]).pipe(\n            map<[string, MovingRiskData[], number], Chart.ChartConfiguration | null>(([currentLanguage, movingRiskData, maxLevel]) => {\n                console.log(\"in compo mrd\", movingRiskData);\n                if ((movingRiskData?.length ?? 0) === 0) {\n                    return null;\n                } else {\n                    const rawLevels = movingRiskData.map(data => data.rawLevel);\n                    return {\n                        type: 'bar',\n                        data: {\n                            labels: movingRiskData.map(data => {\n                              const dateString = data.date.toLocaleDateString(currentLanguage, {month: 'long'});\n                              let countString = data.count.toLocaleString(currentLanguage, {\n                                maximumFractionDigits: 0\n                              });\n                              return `${dateString}, ${data.level.text} (${countString})`\n                            }),\n                            datasets: [{\n                                data: rawLevels,\n                                backgroundColor: movingRiskData.map(data => data.level.color ?? 'black'),\n                                borderColor: movingRiskData.map(data => data.level.color ?? 'black'),\n                                borderWidth: 1,\n                                maxBarThickness: 60\n                            }],\n                        },\n                        options: {\n                            legend: {\n                                display: false\n                            },\n                            scales: {\n                                yAxes: [{\n                                    display: false,\n                                    ticks: {\n                                        min: 0,\n                                        max: maxLevel\n                                    }\n                                }],\n                            },\n\n                        }\n                    };\n                }\n            })\n        );\n\n        this.chartJsAndMovingRiskData$ = movingChartData.pipe(\n            switchMap(data => {\n                return data == null ? [null] : this.chartJsService.chartJs.pipe(map(chartJs => ([chartJs, data])))\n            }),\n            shareReplay(1),\n            takeUntil(this.destroyed$)\n        );\n\n        this.chartJsAndMovingRiskData$.subscribe(chartJsAndData => {\n            this.movingChartsLoaded = chartJsAndData != null;\n        });\n\n        movingChartData.subscribe(chartJsData => {\n            this.haveMovingCharts = chartJsData != null;\n        });\n\n        combineLatest([this.movingRiskData$, this.languageService.currentLanguage]).pipe(\n            switchMap(([data, currentLanguage]) => {\n                if (data == null || data.length === 0) {\n                    return null;\n                }\n                const cmpLevels = (ref: Level, other: Level): number => {\n                    if (ref.level_factor < other.level_factor) {\n                        return -1;\n                    } else if (ref.level_factor > other.level_factor) {\n                        return 1;\n                    } else {\n                        return 0;\n                    }\n                };\n\n                const currentMonthLevel = data[data.length - 1].level;\n                let text;\n                if (data.length > 1) {\n                    const prevMonthLevel = data[data.length - 2].level;\n                    const cmp = cmpLevels(currentMonthLevel, prevMonthLevel);\n                    let monthsCount = 1;\n                    for (let idx = data.length - 3; idx >= 0; idx--) {\n                        const earlyMonthLevel = data[idx].level;\n                        const earlyCmp = cmpLevels(currentMonthLevel, earlyMonthLevel);\n                        if (earlyCmp !== cmp) {\n                            break;\n                        }\n                        monthsCount++;\n                    }\n                    const compareText = cmp === -1 ? 'MOVING_RISK_COMPARE_HIGHER' : cmp === 1 ? 'MOVING_RISK_COMPARE_LOWER' : 'MOVING_RISK_COMPARE_SAME';\n                    const monthsText = monthsCount === 1 ? 'MOVING_RISK_MONTHS_ONE' : 'MOVING_RISK_MONTHS_MANY';\n\n                    const adjustText = cmp === -1 ? 'MOVING_RISK_ADJUST_YES' : 'MOVING_RISK_ADJUST_NO';\n\n                    return combineLatest([\n                        this.translateService.get(monthsText, {months: monthsCount.toLocaleString(currentLanguage)}),\n                        this.translateService.get(adjustText),\n                    ]).pipe(\n                        switchMap(([monthsTranslation, adjustTranslation]) => {\n                            return this.translateService.get(compareText, {\n                                months: monthsTranslation,\n                                currentLevel: currentMonthLevel.text,\n                                adjustText: adjustTranslation\n                            })\n                        })\n                    );\n                } else {\n                    return this.translateService.get('MOVING_RISK_COMPARE_NONE', {\n                        currentLevel: currentMonthLevel.text\n                    });\n                }\n            }),\n            takeUntil(this.destroyed$)\n        ).subscribe(reportHtml => {\n            this.reportHtml = reportHtml;\n        })\n\n\n        this.movingRiskData$.next(this.movingRiskData);\n        this.species$.next(this.species);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.movingRiskData && !changes.movingRiskData.firstChange) {\n            this.movingRiskData$.next(this.movingRiskData);\n        }\n        if (changes.species && !changes.species.firstChange) {\n            this.species$.next(this.species);\n        }\n    }\n\n    ngAfterViewInit() {\n        const latestMovingCanvas = this.movingCanvasElements.changes.pipe(\n            startWith(0),\n            filter(() => this.movingCanvasElements.length === 1),\n            map(() => this.movingCanvasElements.toArray()[0].nativeElement),\n            distinctUntilChanged(),\n        );\n\n        combineLatest([latestMovingCanvas, this.chartJsAndMovingRiskData$]).pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(([movingCanvas, chartJsAndMovingRiskData]) => {\n            if (chartJsAndMovingRiskData != null) {\n                const chartJs = chartJsAndMovingRiskData[0];\n                new chartJs.Chart(movingCanvas, chartJsAndMovingRiskData[1]);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.movingRiskData$.complete();\n        this.species$.complete();\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n\n}\n","<h3 *ngIf=\"!reportMode\">{{ movingRiskHeaderText }}</h3>\n<h1 *ngIf=\"reportMode\">{{ movingRiskHeaderText }}</h1>\n<mat-spinner *ngIf=\"!movingChartsLoaded\"></mat-spinner>\n<ng-container *ngIf=\"movingChartsLoaded\">\n    <div [class.print-chart-container]=\"reportMode\">\n        <div>\n            <canvas #movingCanvasElement></canvas>\n        </div>\n    </div>\n    <div *ngIf=\"reportMode\">\n        {{reportHtml}}\n    </div>\n</ng-container>","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Products } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductsService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public productsList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<Products>>;\n    public productsList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<Products>>>;\n    public productsList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<Products>>>;\n    public productsList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<Products>>(`${this.configuration.basePath}/backend/masterdata/products/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './changePassword';\nexport * from './components';\nexport * from './contactPerson';\nexport * from './country';\nexport * from './customer';\nexport * from './database';\nexport * from './databaseAccessEnum';\nexport * from './databaseAssessment';\nexport * from './email';\nexport * from './ewStatusEnum';\nexport * from './laboratory';\nexport * from './level';\nexport * from './mycotoxins';\nexport * from './paginatedCustomerList';\nexport * from './paginatedDatabaseList';\nexport * from './passwordToken';\nexport * from './patchedChangePassword';\nexport * from './productCountryRules';\nexport * from './products';\nexport * from './registrationRequest';\nexport * from './sampleTypes';\nexport * from './species';\nexport * from './token';\nexport * from './tokenObtainPair';\nexport * from './tokenRefresh';\nexport * from './tokenVerify';\nexport * from './user';\nexport * from './userAssessmentInput';\nexport * from './userAssessmentMovingRisk';\nexport * from './userAssessmentProductRecommendation';\nexport * from './userAssessmentRecipient';\nexport * from './userAssessmentSample';\nexport * from './userAssessmentSampleContamination';\n","import {Injectable} from '@angular/core';\nimport {\n    HttpRequest,\n    HttpHandler,\n    HttpEvent,\n    HttpInterceptor\n} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {ValidAccessTokenHolderService} from \"../services/valid-access-token-holder.service\";\nimport {environment} from \"../../environments/environment\";\nimport {first, switchMap} from \"rxjs/operators\";\n\n@Injectable()\nexport class AuthHeaderInterceptor implements HttpInterceptor {\n\n    constructor(\n        private readonly validAccessTokenHolderService: ValidAccessTokenHolderService\n    ) {\n    }\n\n    intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n        if (!AuthHeaderInterceptor.needsAuthHeader(request)) {\n            return next.handle(request);\n        } else {\n            // console.log(\"waiting for access token for \", request.url);\n            return this.validAccessTokenHolderService.currentValidAccessToken.pipe(\n                first(),\n                switchMap(token => {\n                    // console.log(\"got access token for \", request.url)\n                    const newRequest = token == null ? request : request.clone({\n                        setHeaders: {\n                            'Authorization': `Bearer ${token}`\n                        }\n                    });\n                    return next.handle(newRequest);\n                })\n            );\n        }\n    }\n\n    private static needsAuthHeader(request: HttpRequest<unknown>): boolean {\n        return request.url.startsWith(environment.api) && !request.url.substr(environment.api.length).startsWith('/backend/masterdata/api/');\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Level } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LevelsService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public levelsList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<Level>>;\n    public levelsList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<Level>>>;\n    public levelsList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<Level>>>;\n    public levelsList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<Level>>(`${this.configuration.basePath}/backend/masterdata/levels/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguagesService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public languagesRetrieve(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public languagesRetrieve(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public languagesRetrieve(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public languagesRetrieve(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/backend/masterdata/languages/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","<table role=\"presentation\">\n    <thead><tr><td>\n        <span>\n            <img alt=\"masterRisk\" src=\"/assets/img/logo_masterrisk_black.svg\">\n            <img alt=\"ew nutrition\" src=\"/assets/img/logo_ew-nutrition.svg\">\n        </span>\n    </td></tr></thead>\n    <tbody>\n    <tr><td>\n        <div class=\"appContainer\">\n            <app-social-bar></app-social-bar>\n<!--            <div class=\"content\">-->\n<!--                <h2 style=\"margin: 2rem;\">-->\n<!--                    The ELSA is currently down for maintenance. Please come back later.-->\n<!--                </h2>-->\n<!--            </div>-->\n            <app-navigation-bar (showTutorial)=\"showTutorial()\"></app-navigation-bar>\n\n            <div class=\"content\" [class.loading]=\"loading\">\n                <ng-container *ngIf=\"!loading; else: spinner\">\n                    <router-outlet></router-outlet>\n                </ng-container>\n            </div>\n\n            <app-pre-footer></app-pre-footer>\n            <app-footer></app-footer>\n        </div>\n    </td></tr>\n    </tbody>\n    <tfoot><tr><td>&nbsp;</td></tr></tfoot>\n</table>\n\n<ng-template #spinner>\n    <mat-spinner></mat-spinner>\n</ng-template>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { DataService } from \"./services/data.service\";\nimport { Subject } from \"rxjs\";\nimport { debounceTime, takeUntil } from \"rxjs/operators\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { TutorialPopupComponent } from \"./modules/components/tutorial-popup/tutorial-popup.component\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { LanguageService } from \"./services/language.service\";\nimport { LoginService } from './services/login.service';\nimport { AccessTokenService } from './services/access-token.service';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n\n    private readonly destroyed$ = new Subject();\n\n    loading: boolean = false;\n    loggedIn: string | null = null;\n    constructor(\n        private readonly dataService: DataService,\n        private readonly languageService: LanguageService,\n        private readonly matDialog: MatDialog,\n        private readonly route: ActivatedRoute,\n        private readonly loginService: LoginService,\n        private readonly accessTokenService: AccessTokenService,\n        private readonly router: Router,\n    ) {\n    }\n\n    async ngOnInit() {\n        this.dataService.loading.pipe(\n            debounceTime(200),\n            takeUntil(this.destroyed$)\n        ).subscribe(loading => {\n            this.loading = loading;\n        });\n\n        this.loggedIn = this.accessTokenService.currentAccessToken()\n\n        this.route.queryParamMap.pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(queryParams => {\n            const forcedLanguage = queryParams.get('forceLanguage');\n            const user = queryParams.get('user');\n            const pass = queryParams.get('pass');\n            if (forcedLanguage != null) {\n                this.languageService.setLanguage(forcedLanguage);\n            }\n            if (!this.loggedIn && user && pass) {\n                this.signIn(atob(user), atob(pass));\n            }\n        })\n\n\n    }\n    signIn(email: string, password: string) {\n        this.loginService.login(\n            email, password\n        ).pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(loginResult => {\n            this.router.navigate([], {\n                queryParams: {\n                    'user': null,\n                    'pass': null,\n                },\n                queryParamsHandling: 'merge'\n            })\n        });\n    }\n\n    showTutorial() {\n        this.matDialog.open(TutorialPopupComponent);\n    }\n\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n\n\n}\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {Customer, CustomersService, Species} from \"../../../../generated/api\";\nimport {ObservableInput, Subject} from \"rxjs\";\nimport {catchError, debounceTime, distinctUntilChanged, filter, map, startWith, switchMap, takeUntil} from \"rxjs/operators\";\nimport {LoginService} from \"../../../services/login.service\";\nimport {MatDialogRef} from \"@angular/material/dialog\";\nimport {DataService} from \"../../../services/data.service\";\n\nfunction isCustomer(value: unknown): value is Customer {\n    return value != null && typeof value === 'object' && typeof value['id'] === 'number' && typeof value['name'] === 'string';\n}\n\n@Component({\n    selector: 'app-moving-risk-popup',\n    templateUrl: './moving-risk-popup.component.html',\n    styleUrls: ['./moving-risk-popup.component.scss']\n})\nexport class MovingRiskPopupComponent implements OnInit, OnDestroy {\n\n    private readonly destroyed$ = new Subject();\n\n    readonly controls = {\n        customer: new FormControl(null, [Validators.required, control => {\n            if (!Validators.required(control) && !isCustomer(control.value)) {\n                return {'notCustomer': true}\n            }\n        }]),\n        speciesId: new FormControl(null, Validators.required),\n        months: new FormControl(6, [Validators.required, control => {\n            if (Validators.required(control)) {\n                return;\n            }\n            const float = parseFloat(control.value);\n            const int = parseInt(control.value);\n            if (float != int || int <= 0 || int > 12) {\n                return {'monthsInvalid': true}\n            }\n        }])\n    } as const;\n    readonly formGroup = new FormGroup(this.controls);\n\n    sending = false;\n    species: Species[] = [];\n    searchResults: Customer[] = [];\n\n    constructor(\n        private readonly dialogRef: MatDialogRef<MovingRiskPopupComponent>,\n        private readonly customerService: CustomersService,\n        private readonly loginService: LoginService,\n        private readonly dataService: DataService,\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.loginService.currentUser.pipe(\n            filter(user => !(user?.customer_database_access)),\n            takeUntil(this.destroyed$)\n        ).subscribe(() => this.dialogRef.close());\n\n        this.loginService.currentUser.pipe(\n            map(user => user?.customer_database_access ?? false),\n            distinctUntilChanged(),\n            switchMap<boolean, ObservableInput<Customer[]>>(customerDbAccess => {\n                if (!customerDbAccess) {\n                    return [[]];\n                } else {\n                    return this.controls.customer.valueChanges.pipe(\n                        startWith(0),\n                        map(() => this.controls.customer.value ?? ''),\n                        map(searchObj => typeof searchObj === 'string' ? searchObj : (searchObj?.name ?? '')),\n                        map(searchTerm => searchTerm.trim()),\n                        distinctUntilChanged(),\n                        debounceTime(500),\n                        switchMap(searchTerm => {\n                            return this.customerService.customersList(1, 10, searchTerm === '' ? undefined : searchTerm).pipe(\n                                map(response => response.results ?? [])\n                            )\n                        }),\n                        catchError(err => {\n                            console.error('Failed getting autocomplete', err);\n                            return [[]];\n                        })\n                    );\n                }\n            }),\n            takeUntil(this.destroyed$)\n        ).subscribe(searchResults => {\n            this.searchResults = searchResults;\n        });\n\n        this.dataService.get('species').pipe(\n            takeUntil(this.destroyed$)\n        ).subscribe(species => {\n            this.species = species;\n        })\n\n    }\n\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n\n    submit() {\n        if (this.formGroup.valid && !this.sending) {\n            this.sending = true;\n            this.customerService.customersMovingRiskSendReportCreate(\n                this.controls.customer.value.id,\n                Number(this.controls.months.value),\n                this.controls.speciesId.value\n            ).subscribe({\n                next: () => {\n                    this.sending = false;\n                    this.dialogRef.close();\n                },\n                error: err => {\n                    console.error('Failed sending report', err);\n                    this.sending = false;\n                }\n            })\n        }\n    }\n\n    customerDisplayFn(customer: Customer): string {\n        return customer?.name ?? ''\n    }\n\n}\n","<mat-card>\n    <mat-card-title>\n        <span ngx-translate>MOVING_RISK_REPORT_TITLE</span>\n    </mat-card-title>\n    <mat-card-content>\n        <form [formGroup]=\"formGroup\" (ngSubmit)=\"submit()\">\n            <div class=\"form-fields\">\n                <mat-form-field appearance=\"standard\">\n                    <mat-label>\n                        <span ngx-translate>MOVING_RISK_REPORT_CUSTOMER_LABEL</span>\n                    </mat-label>\n                    <input matInput [matAutocomplete]=\"auto\" [formControl]=\"controls.customer\">\n                    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"customerDisplayFn\">\n                        <mat-option *ngFor=\"let c of searchResults\" [value]=\"c\">{{ c.name }}</mat-option>\n                    </mat-autocomplete>\n                    <mat-error>\n                        <ng-container *ngIf=\"controls.customer.errors?.required\">\n                            <span ngx-translate>MOVING_RISK_REPORT_ERROR_CUSTOMER_REQUIRED</span>\n                        </ng-container>\n                        <ng-container *ngIf=\"controls.customer.errors?.notCustomer\">\n                            <span ngx-translate>MOVING_RISK_REPORT_ERROR_SELECT_CUSTOMER</span>\n                        </ng-container>\n                    </mat-error>\n                </mat-form-field>\n\n                <mat-form-field appearance=\"standard\">\n                    <mat-label>\n                        <span ngx-translate>MOVING_RISK_REPORT_SPECIES_LABEL</span>\n                    </mat-label>\n                    <mat-select [formControl]=\"controls.speciesId\">\n                        <mat-option *ngFor=\"let s of species\" [value]=\"s.id\">\n                            {{ s.text }}\n                        </mat-option>\n                    </mat-select>\n                    <mat-error>\n                        <ng-container *ngIf=\"controls.speciesId.errors?.required\">\n                            <span ngx-translate>MOVING_RISK_REPORT_ERROR_SPECIES_REQUIRED</span>\n                        </ng-container>\n                    </mat-error>\n                </mat-form-field>\n\n                <mat-form-field appearance=\"standard\">\n                    <mat-label>\n                        <span ngx-translate>MOVING_RISK_REPORT_MONTHS_LABEL</span>\n                    </mat-label>\n                    <input matInput [formControl]=\"controls.months\" type=\"number\">\n                    <mat-error>\n                        <ng-container *ngIf=\"controls.months.errors?.required\">\n                            <span ngx-translate>MOVING_RISK_REPORT_ERROR_MONTHS_REQUIRED</span>\n                        </ng-container>\n                        <ng-container *ngIf=\"controls.months.errors?.monthsInvalid\">\n                            <span ngx-translate>MOVING_RISK_REPORT_ERROR_MONTHS_INVALID</span>\n                        </ng-container>\n                    </mat-error>\n                </mat-form-field>\n            </div>\n\n            <div class=\"button-container\">\n                <button mat-flat-button color=\"primary\" type=\"submit\" [disabled]=\"sending\">\n                    <app-button-spinner [spinning]=\"sending\"></app-button-spinner>\n                    <span ngx-translate>MOVING_RISK_REPORT_SUBMIT</span>\n                </button>\n            </div>\n        </form>\n    </mat-card-content>\n</mat-card>","import {Component, Input} from '@angular/core';\nimport {ProcessedProduct} from \"../../../services/data.service\";\n\n@Component({\n    selector: 'app-product-display',\n    templateUrl: './product-display.component.html',\n    styleUrls: ['./product-display.component.scss']\n})\nexport class ProductDisplayComponent {\n\n    @Input()\n    product: ProcessedProduct;\n\n}\n","<img [src]=\"product.logo\" [alt]=\"product.name\" *ngIf=\"product.logo; else: text\">\n<ng-template #text>{{product.name}}</ng-template>","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Laboratory { \n    id: string;\n    text: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Country { \n    id: string;\n    region: string;\n    text: string;\n    display_recommendations?: boolean;\n}\n\n","import {MatPaginatorIntl} from \"@angular/material/paginator\";\nimport {TranslateParser, TranslateService} from \"@ngx-translate/core\";\nimport {Subject} from \"rxjs\";\nimport {Injectable} from \"@angular/core\";\n\n@Injectable()\nexport class TranslatedPaginatorI18n extends MatPaginatorIntl {\n\n    private rangeLabelIntl: string;\n\n    readonly changes: Subject<void>;\n    itemsPerPageLabel: string;\n    nextPageLabel: string;\n    previousPageLabel: string;\n    firstPageLabel: string;\n    lastPageLabel: string;\n\n    constructor(private readonly translateService: TranslateService, private readonly translateParser: TranslateParser) {\n        super();\n        this.translateService.get([\n            'PAGINATOR_ITEMS_PER_PAGE',\n            'PAGINATOR_NEXT_PAGE',\n            'PAGINATOR_PREVIOUS_PAGE',\n            'PAGINATOR_FIRST_PAGE',\n            'PAGINATOR_LAST_PAGE',\n            'PAGINATOR_RANGE'\n        ]).subscribe(translation => {\n                this.itemsPerPageLabel = translation['PAGINATOR_ITEMS_PER_PAGE'];\n                this.nextPageLabel = translation['PAGINATOR_NEXT_PAGE'];\n                this.previousPageLabel = translation['PAGINATOR_PREVIOUS_PAGE'];\n                this.firstPageLabel = translation['PAGINATOR_FIRST_PAGE'];\n                this.lastPageLabel = translation['PAGINATOR_LAST_PAGE'];\n                this.rangeLabelIntl = translation['PAGINATOR_RANGE'];\n                this.changes.next();\n            });\n    }\n\n    getRangeLabel = (page: number, pageSize: number, length: number): string => {\n        length = Math.max(length, 0);\n        const startIndex = page * pageSize;\n        const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n        return this.translateParser.interpolate(this.rangeLabelIntl, { startIndex, endIndex, length });\n    }\n}","import { Component, OnInit } from '@angular/core';\nimport {Observable, of, Subject} from \"rxjs\";\nimport {FormControl, FormGroup, FormGroupDirective, NgForm, Validators} from \"@angular/forms\";\nimport {ErrorStateMatcher} from \"@angular/material/core\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {ApiService, UserService} from \"../../../../generated/api\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {delay, first, takeUntil} from \"rxjs/operators\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\n\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.scss']\n})\nexport class ChangePasswordComponent implements OnInit {\n\n  private readonly destroyed$ = new Subject();\n\n  controls = {\n    oldPassword: new FormControl(null, Validators.required),\n    newPassword: new FormControl(null, Validators.required),\n    newPasswordRepeat: new FormControl(null, Validators.required),\n  } as const;\n  formGroup = new FormGroup(this.controls, group => {\n    const newPassword = String(this.controls.newPassword.value ?? '');\n    const newPasswordRepeat = String(this.controls.newPasswordRepeat.value ?? '');\n    if (newPassword.trim() === '' || newPasswordRepeat.trim() === '') {\n      return null;\n    }\n    return newPassword === newPasswordRepeat ? null : {noMatch: true};\n  });\n\n  passwordErrorMatcher: ErrorStateMatcher;\n  oldPasswordErrorMatcher: ErrorStateMatcher;\n  submitted: boolean = false;\n  oldPasswordError: Observable<string> | null = null;\n  error: Observable<string> | null = null;\n  loading: boolean = false;\n  valid: boolean = true;\n  token: string | null = null;\n\n  constructor(\n    private readonly route: ActivatedRoute,\n    private readonly apiService: ApiService,\n    private readonly userService: UserService,\n    private readonly translateService: TranslateService,\n  ) {\n    const component = this;\n    this.passwordErrorMatcher = new class extends ErrorStateMatcher {\n      isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return super.isErrorState(control, form) || component.error != null || form.hasError('noMatch');\n      }\n    }\n    this.oldPasswordErrorMatcher = new class extends ErrorStateMatcher {\n      isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return super.isErrorState(control, form) || component.oldPasswordError != null;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n  }\n\n  submit() {\n    if (this.formGroup.valid) {\n      this.loading = true;\n      this.error = null;\n      this.oldPasswordError = null;\n      this.userService.userChangePasswordUpdate({\n        old_password: this.controls.oldPassword.value,\n        new_password: this.controls.newPassword.value\n      }).pipe(\n        takeUntil(this.destroyed$),\n      ).subscribe({\n        next: () => {\n          this.loading = false;\n          this.submitted = true;\n        },\n        error: err => {\n          this.loading = false;\n          console.error('Change Password failed', err);\n          if (err instanceof HttpErrorResponse && Math.floor(err.status / 100) === 4 && typeof err.error === 'object') {\n            if (Array.isArray(err.error.password) && err.error.password.length !== 0) {\n              this.error = of(err.error.password.map(p => String(p)).join(', '));\n            } else if (Array.isArray(err.error.old_password) && err.error.old_password.length !== 0) {\n              this.oldPasswordError = of(err.error.old_password.map(p => String(p)).join(', '));\n            }\n          }\n          if (this.error == null && this.oldPasswordError == null) {\n            this.error = this.translateService.get('CHANGEPASSWORD_ERROR');\n          }\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n}\n","<h2 ngx-translate>CHANGEPASSWORD_HEADING</h2>\n<ng-container *ngIf=\"!submitted\">\n  <form [formGroup]=\"formGroup\" class=\"form-container\" (ngSubmit)=\"submit()\">\n    <mat-form-field>\n      <mat-label>\n        <span ngx-translate>CHANGE_PASSWORD_OLD_PASSWORD_LABEL</span>\n      </mat-label>\n      <input matInput type=\"password\" [formControl]=\"controls.oldPassword\" [errorStateMatcher]=\"oldPasswordErrorMatcher\">\n      <mat-error>\n        <ng-container *ngIf=\"oldPasswordError == null && controls.oldPassword.errors?.required\">\n          <span ngx-translate>\n            CHANGE_PASSWORD_OLD_PASSWORD_ERROR_REQUIRED\n          </span>\n        </ng-container>\n        <ng-container *ngIf=\"oldPasswordError != null\">\n          {{oldPasswordError|async}}\n        </ng-container>\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>\n        <span ngx-translate>CHANGEPASSWORD_FIELDS_PASSWORD</span>\n      </mat-label>\n      <input matInput type=\"password\" [formControl]=\"controls.newPassword\">\n      <mat-error>\n        <ng-container *ngIf=\"controls.newPassword.errors?.required\">\n          <span ngx-translate>\n            CHANGE_PASSWORD_PASSWORD_ERROR_REQUIRED\n          </span>\n        </ng-container>\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>\n        <span ngx-translate>CHANGEPASSWORD_FIELDS_PASSWORD_RPT</span>\n      </mat-label>\n      <input matInput type=\"password\" [formControl]=\"controls.newPasswordRepeat\" [errorStateMatcher]=\"passwordErrorMatcher\">\n      <mat-error>\n        <ng-container *ngIf=\"error != null\">\n          {{ error|async }}\n        </ng-container>\n        <ng-container *ngIf=\"error == null && controls.newPasswordRepeat.errors?.required\">\n          <span ngx-translate>\n            CHANGE_PASSWORD_PASSWORD2_ERROR_REQUIRED\n          </span>\n        </ng-container>\n        <ng-container *ngIf=\"error == null && formGroup.errors?.noMatch\">\n          <span ngx-translate>\n            CHANGE_PASSWORD_ERROR_NO_MATCH\n          </span>\n        </ng-container>\n      </mat-error>\n    </mat-form-field>\n    <div class=\"button-container\">\n      <button mat-flat-button color=\"primary\" [disabled]=\"loading\">\n        <app-button-spinner [spinning]=\"loading\"></app-button-spinner>\n        <span ngx-translate>CHANGEPASSWORD_FIELDS_SUBMIT</span>\n      </button>\n    </div>\n  </form>\n</ng-container>\n<ng-container *ngIf=\"submitted\">\n  <p [innerHTML]=\"'CHANGEPASSWORD_COMPLETED'|translate\"></p>\n</ng-container>\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {ApiModule, Configuration} from \"../generated/api\";\nimport {environment} from \"../environments/environment\";\nimport {HTTP_INTERCEPTORS, HttpClient, HttpClientModule} from \"@angular/common/http\";\nimport {LanguageHeaderInterceptor} from \"./interceptors/language-header.interceptor\";\nimport {ComponentsModule} from \"./modules/components/components.module\";\nimport {AuthHeaderInterceptor} from \"./interceptors/auth-header.interceptor\";\nimport {TranslateLoader, TranslateModule} from \"@ngx-translate/core\";\nimport {Observable} from \"rxjs\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {MatSelectModule} from \"@angular/material/select\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatCardModule} from \"@angular/material/card\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\nimport {MatMenuModule} from \"@angular/material/menu\";\nimport {RegistrationModule} from \"./modules/pages/registration/registration.module\";\nimport {ImprintModule} from \"./modules/pages/imprint/imprint.module\";\nimport {LostPasswordModule} from \"./modules/pages/lost-password/lost-password.module\";\nimport {ResetPasswordModule} from \"./modules/pages/reset-password/reset-password.module\";\nimport {MatPaginatorIntl} from \"@angular/material/paginator\";\nimport {TranslatedPaginatorI18n} from \"./util/pagination-i18n\";\nimport {MatNativeDateModule} from \"@angular/material/core\";\nimport {ChangePasswordModule} from \"./modules/pages/change-password/change-password.module\";\n\nexport function apiModuleConfigurationFactory(): Configuration {\n    return new Configuration({\n        basePath: environment.api,\n        credentials: {\n            'Bearer': () => undefined // dummy entry, we add this token manually using an interceptor, because we need observable support\n        }\n    })\n}\n\nexport function httpLoaderFactory(http: HttpClient): TranslateLoader {\n    return new class extends TranslateLoader {\n        getTranslation(lang: string): Observable<any> {\n            return http.get(`${environment.api}/backend/masterdata/translations/`, {\n                headers: {\n                    'Accept-Language': lang\n                }\n            })\n        }\n    }\n}\n\n@NgModule({\n    declarations: [\n        AppComponent\n    ],\n    imports: [\n        BrowserModule.withServerTransition({appId: 'serverApp'}),\n        HttpClientModule,\n        BrowserAnimationsModule,\n\n        ReactiveFormsModule,\n\n        MatToolbarModule,\n        MatIconModule,\n        MatInputModule,\n        MatButtonModule,\n        MatDialogModule,\n        MatSelectModule,\n        MatFormFieldModule,\n        MatCardModule,\n        MatProgressSpinnerModule,\n        MatMenuModule,\n        MatNativeDateModule,\n\n        ApiModule,\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: httpLoaderFactory,\n                deps: [HttpClient]\n            }\n        }),\n\n        AppRoutingModule,\n        ComponentsModule,\n        RegistrationModule,\n        ImprintModule,\n        LostPasswordModule,\n        ResetPasswordModule,\n        ChangePasswordModule\n    ],\n    providers: [\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: LanguageHeaderInterceptor,\n            multi: true\n        },\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: AuthHeaderInterceptor,\n            multi: true\n        },\n        {\n            provide: MatPaginatorIntl,\n            useClass: TranslatedPaginatorI18n\n        },\n        {\n            provide: Configuration,\n            useFactory: apiModuleConfigurationFactory,\n        }\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, FormGroupDirective, NgForm, Validators} from \"@angular/forms\";\nimport {Subject} from \"rxjs\";\nimport {finalize, first, takeUntil} from \"rxjs/operators\";\nimport {MatDialog, MatDialogRef} from \"@angular/material/dialog\";\nimport {LoginService} from \"../../../services/login.service\";\nimport {ErrorStateMatcher} from \"@angular/material/core\";\n\n@Component({\n    selector: 'app-sign-in',\n    templateUrl: './sign-in.component.html',\n    styleUrls: ['./sign-in.component.scss']\n})\nexport class SignInComponent implements OnInit, OnDestroy {\n\n    private readonly destroyed$ = new Subject();\n\n    controls = {\n        email: new FormControl('', [Validators.required, Validators.email]),\n        password: new FormControl('', [Validators.required])\n    } as const;\n\n    formGroup = new FormGroup(this.controls);\n    loginError: string | null = null;\n    signingIn: boolean = false;\n    readonly emailErrorMatcher: ErrorStateMatcher;\n\n    constructor(\n        private readonly matDialog: MatDialog,\n        private readonly dialogRef: MatDialogRef<SignInComponent>,\n        private readonly loginService: LoginService,\n    ) {\n        const component = this;\n        this.emailErrorMatcher = new class extends ErrorStateMatcher {\n            isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n                return super.isErrorState(control, form) || component.loginError != null;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n    }\n\n    close() {\n        this.dialogRef.close();\n    }\n\n    signIn() {\n        if (this.formGroup.valid) {\n            this.signingIn = true;\n            this.loginError = null;\n            this.loginService.login(\n                this.controls.email.value, this.controls.password.value\n            ).pipe(\n                first(),\n                finalize(() => this.signingIn = false),\n                takeUntil(this.destroyed$)\n            ).subscribe(loginResult => {\n                if (loginResult == null) {\n                    this.dialogRef.close();\n                } else {\n                    this.loginError = loginResult;\n                }\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n\n}\n","<mat-card>\n    <mat-card-title>\n        <span ngx-translate>Sign In</span>\n    </mat-card-title>\n    <mat-card-content>\n        <form novalidate [formGroup]=\"formGroup\" (ngSubmit)=\"signIn()\">\n            <mat-form-field appearance=\"standard\">\n                <mat-label>\n                    <span ngx-translate>E-Mail*</span>\n                </mat-label>\n                <mat-icon matSuffix>alternate_email</mat-icon>\n                <input matInput type=\"email\" [formControl]=\"controls.email\" [errorStateMatcher]=\"emailErrorMatcher\">\n                <mat-error>\n                    <ng-container *ngIf=\"loginError == null && controls.email.errors?.required\">\n                        <span ngx-translate>Please enter your Email.</span>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"loginError == null && controls.email.errors?.email\">\n                        <span ngx-translate>Please re-check your Email.</span>\n                    </ng-container>\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"standard\">\n                <mat-label>\n                    <span ngx-translate>Password*</span>\n                </mat-label>\n                <mat-icon matSuffix>lock</mat-icon>\n                <input matInput type=\"password\" [formControl]=\"controls.password\">\n                <mat-error>\n                    <ng-container *ngIf=\"controls.password.errors?.required\">\n                        <span ngx-translate>Please enter your Password</span>\n                    </ng-container>\n                </mat-error>\n            </mat-form-field>\n            <mat-error>\n                <ng-container *ngIf=\"loginError != null\">\n                    {{ loginError|translate }}\n                </ng-container>\n            </mat-error>\n            \n            <div class=\"button-container\">\n                <button mat-flat-button color=\"primary\" type=\"submit\" [disabled]=\"signingIn\">\n                    <app-button-spinner [spinning]=\"signingIn\"></app-button-spinner>\n                    <span ngx-translate>LOGIN</span>\n                </button>\n                <button mat-stroked-button type=\"button\" routerLink=\"/forgot-password\" (click)=\"close()\">\n                    <span ngx-translate>You have lost your password?</span>\n                </button>\n            </div>\n        </form>\n    </mat-card-content>\n</mat-card>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SignInComponent } from './sign-in/sign-in.component';\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { AlertComponent } from './alert/alert.component';\nimport { TranslateModule } from \"@ngx-translate/core\";\nimport { RouterModule } from \"@angular/router\";\nimport { ResultComponent } from \"./result/result.component\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\nimport { SocialBarComponent } from \"./social-bar/social-bar.component\";\nimport { NavigationBarComponent } from \"./navigation-bar/navigation-bar.component\";\nimport { FooterComponent } from \"./footer/footer.component\";\nimport { HeaderCtaComponent } from \"./header-cta/header-cta.component\";\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\nimport { MatSelectModule } from \"@angular/material/select\";\nimport { MatMenuModule } from \"@angular/material/menu\";\nimport { ProductDisplayComponent } from \"./product-display/product-display.component\";\nimport { PreFooterComponent } from \"./pre-footer/pre-footer.component\";\nimport { MatRippleModule } from \"@angular/material/core\";\nimport { ButtonSpinnerComponent } from \"./button-spinner/button-spinner.component\";\nimport { MovingRiskDisplayComponent } from \"./moving-risk-display/moving-risk-display.component\";\nimport { MovingRiskPopupComponent } from \"./moving-risk-popup/moving-risk-popup.component\";\nimport { MatAutocompleteModule } from \"@angular/material/autocomplete\";\n\nconst components = [\n    SignInComponent,\n    AlertComponent,\n    ResultComponent,\n    SocialBarComponent,\n    NavigationBarComponent,\n    FooterComponent,\n    HeaderCtaComponent,\n    ProductDisplayComponent,\n    PreFooterComponent,\n    ButtonSpinnerComponent,\n    MovingRiskDisplayComponent,\n    MovingRiskPopupComponent\n]\n\n@NgModule({\n    declarations: components,\n    exports: components,\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        TranslateModule,\n        RouterModule,\n        MatCardModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatIconModule,\n        MatButtonModule,\n        MatProgressSpinnerModule,\n        MatToolbarModule,\n        MatSelectModule,\n        MatMenuModule,\n        MatRippleModule,\n        MatAutocompleteModule,\n    ]\n})\nexport class ComponentsModule {\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Species } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpeciesService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public speciesList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<Species>>;\n    public speciesList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<Species>>>;\n    public speciesList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<Species>>>;\n    public speciesList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<Species>>(`${this.configuration.basePath}/backend/masterdata/species/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\nimport {ThemePalette} from \"@angular/material/core\";\n\nexport interface AlertButton {\n    readonly id: string;\n    readonly text: string;\n    readonly role?: 'primary' | 'default';\n}\n\nexport interface AlertData {\n    readonly title: string;\n    readonly message: string;\n    readonly icon?: string;\n    readonly iconColor?: ThemePalette;\n    readonly buttons?: ReadonlyArray<AlertButton>;\n}\n\nexport interface AlertResult {\n    readonly button?: string;\n}\n\n@Component({\n    selector: 'app-alert',\n    templateUrl: './alert.component.html',\n    styleUrls: ['./alert.component.scss']\n})\nexport class AlertComponent {\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) readonly data: AlertData,\n        private readonly dialogRef: MatDialogRef<AlertComponent, AlertResult>\n    ) {\n    }\n\n    btn(id: string) {\n        this.dialogRef.close({\n            button: id\n        });\n    }\n}\n","<h2>\n    <mat-icon *ngIf=\"data.icon\" [color]=\"data.iconColor || 'warn'\">{{data.icon}}</mat-icon>\n    {{ data.title|translate }}\n</h2>\n<p>{{ data.message|translate }}</p>\n<div class=\"button-container\">\n    <ng-container *ngFor=\"let button of data.buttons\" [ngSwitch]=\"button.role || 'default'\">\n        <button *ngSwitchCase=\"'primary'\" mat-flat-button color=\"primary\" (click)=\"btn(button.id)\">{{button.text|translate}}</button>\n        <button *ngSwitchCase=\"'default'\" mat-stroked-button (click)=\"btn(button.id)\">{{button.text|translate}}</button>\n    </ng-container>\n</div>\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface TokenRefresh { \n    readonly access: string;\n    refresh: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport type EwStatusEnum = 'intern' | 'extern';\n\nexport const EwStatusEnum = {\n    Intern: 'intern' as EwStatusEnum,\n    Extern: 'extern' as EwStatusEnum\n};\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface PatchedChangePassword { \n    old_password?: string;\n    new_password?: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Customer { \n    readonly id: number;\n    name: string;\n}\n\n","import {Component, OnInit} from '@angular/core';\nimport {socialLinks} from \"../../../util/social-links\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\n@Component({\n    selector: 'app-footer',\n    templateUrl: './footer.component.html',\n    styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent implements OnInit {\n\n    socialLinks = socialLinks;\n\n    constructor(\n        private readonly translateService: TranslateService\n    ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    contactFirstWord(): Observable<string> {\n        return this.translateService.get('LEGAL_CONNECT').pipe(\n            map((result: string) => {\n                const idx = result.indexOf(' ');\n                return idx < 0 ? result : result.substring(0, idx);\n            })\n        );\n    }\n\n    contactRest(): Observable<string> {\n        return this.translateService.get('LEGAL_CONNECT').pipe(\n            map((result: string) => {\n                const idx = result.indexOf(' ');\n                return idx < 0 ? '' : result.substring(idx);\n            })\n        );\n    }\n\n}\n","<div class=\"footer-container\">\n    <div class=\"footer\">\n        <div class=\"footer-inner\">\n            <div class=\"contact-us\">\n                <div class=\"head\">\n                    <span class=\"first-word\">{{contactFirstWord()|async}}</span>\n                    {{contactRest()|async}}\n                </div>\n                <div class=\"socialIcons\">\n                    <a mat-ripple *ngFor=\"let element of socialLinks\" [href]=\"element.link\" target=\"_blank\" [ngClass]=\"element.class == null ? [] : element.class\">\n                        <img src=\"/assets/img/{{element.icon}}.svg\" [alt]=\"element.name\">\n                    </a>\n                </div>\n            </div>\n\n            <ul class=\"links\">\n                <li><a target=\"_blank\" href=\"https://ew-nutrition.com/about-us/\" ngx-translate>LEGAL_ABOUT</a></li>\n                <li><a routerLink=\"/imprint\" ngx-translate>LEGAL_IMPRINT</a></li>\n                <li><a ngx-translate>LEGAL_PRIVACY</a></li>\n            </ul>\n        </div>\n    </div>\n</div>","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Components } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComponentsService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public componentsList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<Components>>;\n    public componentsList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<Components>>>;\n    public componentsList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<Components>>>;\n    public componentsList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<Components>>(`${this.configuration.basePath}/backend/masterdata/components/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param sampleTypeId \n     * @param speciesId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public componentsList2(sampleTypeId: string, speciesId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<Components>>;\n    public componentsList2(sampleTypeId: string, speciesId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<Components>>>;\n    public componentsList2(sampleTypeId: string, speciesId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<Components>>>;\n    public componentsList2(sampleTypeId: string, speciesId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (sampleTypeId === null || sampleTypeId === undefined) {\n            throw new Error('Required parameter sampleTypeId was null or undefined when calling componentsList2.');\n        }\n        if (speciesId === null || speciesId === undefined) {\n            throw new Error('Required parameter speciesId was null or undefined when calling componentsList2.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<Components>>(`${this.configuration.basePath}/backend/masterdata/components/${encodeURIComponent(String(speciesId))}/${encodeURIComponent(String(sampleTypeId))}/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface UserAssessmentSampleContamination { \n    mycotoxin: string;\n    value: number | null;\n    readonly level: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ContactPerson { \n    text: string;\n}\n\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {isRawTokenPair, ParsedToken, TokenPair} from \"../util/data\";\nimport {LocalStorageHandle, LocalStorageService} from \"./local-storage.service\";\nimport jwtDecode from \"jwt-decode\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AccessTokenService {\n\n    private readonly username$ = new BehaviorSubject<string | null>(null);\n    private readonly storedToken: LocalStorageHandle<TokenPair<ParsedToken>>;\n\n    constructor(\n        private readonly localStorageService: LocalStorageService,\n    ) {\n        this.storedToken = this.localStorageService.newHandle<TokenPair<ParsedToken>>(\n            'risk.token',\n            raw => {\n                const jwts = AccessTokenService.readToken(raw);\n                if (jwts == null) {\n                    return null;\n                } else {\n                   return AccessTokenService.parseJwts(jwts);\n                }\n            },\n            (token) => JSON.stringify({refresh: token.refresh.token, access: token.access.token})\n        );\n        this.storedToken.subscribe();\n    }\n\n    currentAccessToken(): string | null {\n        return this.storedToken.currentValue?.access?.token;\n    }\n\n    get tokens(): Observable<TokenPair<ParsedToken> | null> {\n        return this.storedToken.value;\n    }\n\n    setTokens(pair: TokenPair<string> | null) {\n        this.storedToken.setValue(pair == null ? null : AccessTokenService.parseJwts(pair));\n    }\n\n    private static readToken(raw: string): TokenPair<string> | null {\n        try {\n            const parsed = JSON.parse(raw);\n            return isRawTokenPair(parsed) ? parsed : null;\n        } catch (e) {\n            console.error('Failed parsing token from local storage', e);\n            return null;\n        }\n    }\n\n    private static parseJwts(pair: TokenPair<string>): TokenPair<ParsedToken> | null {\n        const access = AccessTokenService.parseJwt(pair.access);\n        const refresh = AccessTokenService.parseJwt(pair.refresh);\n        return access == null || refresh == null ? null : {access, refresh};\n    }\n\n    private static parseJwt(token: string): ParsedToken | null {\n        try {\n            const decoded = jwtDecode(token);\n            const exp = decoded['exp'];\n            if (typeof exp !== 'number') {\n                console.error('JWT has no valid exp', exp);\n                return null;\n            }\n            const expires = new Date(exp * 1000);\n            const rawUserId = decoded['user_id'];\n            const userId = rawUserId == null || (typeof rawUserId !== 'string' && typeof rawUserId !== 'number') ? null : rawUserId;\n            return {\n                expires,\n                token,\n                userId\n            };\n        } catch (e) {\n            console.error('Failed decoding JWT', e);\n            return null;\n        }\n    }\n\n\n}\n","import {Injectable} from '@angular/core';\nimport {distinctUntilChanged, map, publishReplay, single, startWith, switchMap, tap} from \"rxjs/operators\";\nimport {combineLatest, ConnectableObservable, fromEvent, Observable} from \"rxjs\";\nimport {LanguagesService} from \"../../generated/api\";\nimport {CurrentLanguageService} from \"./current-language.service\";\nimport {TranslateService} from \"@ngx-translate/core\";\n\nexport interface KnownLanguage {\n    readonly id: string;\n    readonly englishName: string;\n    readonly localName: string;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LanguageService {\n\n    readonly knownLanguages: Observable<ReadonlyArray<KnownLanguage>>;\n    readonly currentLanguage: Observable<string>;\n\n    constructor(\n        private readonly languagesService: LanguagesService,\n        private readonly currentLanguageService: CurrentLanguageService,\n        private readonly translateService: TranslateService\n    ) {\n        const languages = this.languagesService.languagesRetrieve().pipe(\n            single(),\n            map(apiLang => LanguageService.parseApiLanguages(apiLang)),\n            publishReplay(1)\n        ) as ConnectableObservable<ReadonlyArray<KnownLanguage>>;\n        languages.connect();\n        this.knownLanguages = languages;\n\n        this.currentLanguage = this.currentLanguageService.currentLanguage.pipe(\n            switchMap(currentLanguage => {\n                if (currentLanguage == null) {\n                    const languageChange = fromEvent(window, 'languagechange').pipe(startWith(0));\n                    return combineLatest([this.knownLanguages, languageChange]).pipe(\n                        map(([knownLanguages]) => {\n                            const browserLanguages = LanguageService.getBrowserLanguagePreferences();\n                            for (const bl of browserLanguages) {\n                                const foundLanguage = knownLanguages.find(kl => LanguageService.languageMatch(bl, kl.id, true));\n                                if (foundLanguage != null) {\n                                    return foundLanguage.id;\n                                }\n                            }\n                            for (const bl of browserLanguages) {\n                                const foundLanguage = knownLanguages.find(kl => LanguageService.languageMatch(bl, kl.id, false));\n                                if (foundLanguage != null) {\n                                    return foundLanguage.id;\n                                }\n                            }\n                            return knownLanguages[0].id;\n                        })\n                    );\n                } else {\n                    return [currentLanguage];\n                }\n            }),\n            distinctUntilChanged()\n        );\n        this.currentLanguage.subscribe(currentLanguage => {\n            this.translateService.use(currentLanguage)\n        });\n    }\n\n    public setLanguage(language: string) {\n        this.currentLanguageService.setLanguage(language);\n    }\n\n    private static languageMatch(browserLang: string, apiLang: string, strict: boolean): boolean {\n        if (strict) {\n            return browserLang.toLowerCase() === apiLang.toLowerCase();\n        }\n        const browserIdx = browserLang.indexOf('-');\n        const apiIdx = apiLang.indexOf('-');\n        if (browserIdx >= 0 && apiIdx >= 0) {\n            return browserLang.toLowerCase() === apiLang.toLowerCase();\n        } else {\n            const browserSub = browserIdx >= 0 ? browserLang.substring(0, browserIdx) : browserLang;\n            const apiSub = apiIdx >= 0 ? apiLang.substring(0, apiIdx) : apiLang;\n            return browserSub.toLowerCase() === apiSub.toLowerCase();\n        }\n    }\n\n    private static getBrowserLanguagePreferences(): ReadonlyArray<string> {\n        if (window.navigator.languages) {\n            return window.navigator.languages;\n        } else if (window.navigator.language) {\n            return [window.navigator.language];\n        } else {\n            return [];\n        }\n    }\n\n    private static parseApiLanguages(apiLang: unknown): ReadonlyArray<KnownLanguage> {\n        if (!Array.isArray(apiLang)) {\n            throw new Error('Cannot parse API languages');\n        }\n        return apiLang.map(el => {\n            if (!Array.isArray(el) || el.length !== 3 || el.some(l => typeof l !== 'string')) {\n                throw new Error('Cannot parse API languages');\n            }\n            return {\n                id: el[0],\n                englishName: el[1],\n                localName: el[2]\n            }\n        });\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Email } from '../model/models';\nimport { PasswordToken } from '../model/models';\nimport { Token } from '../model/models';\nimport { TokenObtainPair } from '../model/models';\nimport { TokenRefresh } from '../model/models';\nimport { TokenVerify } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * An Api View which provides a method to reset a password based on a unique token\n     * @param passwordToken \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiPasswordResetConfirmCreate(passwordToken: PasswordToken, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PasswordToken>;\n    public apiPasswordResetConfirmCreate(passwordToken: PasswordToken, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PasswordToken>>;\n    public apiPasswordResetConfirmCreate(passwordToken: PasswordToken, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PasswordToken>>;\n    public apiPasswordResetConfirmCreate(passwordToken: PasswordToken, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (passwordToken === null || passwordToken === undefined) {\n            throw new Error('Required parameter passwordToken was null or undefined when calling apiPasswordResetConfirmCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PasswordToken>(`${this.configuration.basePath}/backend/masterdata/api/password_reset/confirm/`,\n            passwordToken,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * An Api View which provides a method to request a password reset token based on an e-mail address  Sends a signal reset_password_token_created when a reset token was created\n     * @param email \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiPasswordResetCreate(email: Email, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Email>;\n    public apiPasswordResetCreate(email: Email, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Email>>;\n    public apiPasswordResetCreate(email: Email, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Email>>;\n    public apiPasswordResetCreate(email: Email, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (email === null || email === undefined) {\n            throw new Error('Required parameter email was null or undefined when calling apiPasswordResetCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Email>(`${this.configuration.basePath}/backend/masterdata/api/password_reset/`,\n            email,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * An Api View which provides a method to verify that a token is valid\n     * @param token \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiPasswordResetValidateTokenCreate(token: Token, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Token>;\n    public apiPasswordResetValidateTokenCreate(token: Token, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Token>>;\n    public apiPasswordResetValidateTokenCreate(token: Token, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Token>>;\n    public apiPasswordResetValidateTokenCreate(token: Token, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (token === null || token === undefined) {\n            throw new Error('Required parameter token was null or undefined when calling apiPasswordResetValidateTokenCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Token>(`${this.configuration.basePath}/backend/masterdata/api/password_reset/validate_token/`,\n            token,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.\n     * @param tokenObtainPair \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiTokenCreate(tokenObtainPair: TokenObtainPair, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<TokenObtainPair>;\n    public apiTokenCreate(tokenObtainPair: TokenObtainPair, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<TokenObtainPair>>;\n    public apiTokenCreate(tokenObtainPair: TokenObtainPair, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<TokenObtainPair>>;\n    public apiTokenCreate(tokenObtainPair: TokenObtainPair, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (tokenObtainPair === null || tokenObtainPair === undefined) {\n            throw new Error('Required parameter tokenObtainPair was null or undefined when calling apiTokenCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<TokenObtainPair>(`${this.configuration.basePath}/backend/masterdata/api/token/`,\n            tokenObtainPair,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.\n     * @param tokenRefresh \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiTokenRefreshCreate(tokenRefresh: TokenRefresh, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<TokenRefresh>;\n    public apiTokenRefreshCreate(tokenRefresh: TokenRefresh, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<TokenRefresh>>;\n    public apiTokenRefreshCreate(tokenRefresh: TokenRefresh, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<TokenRefresh>>;\n    public apiTokenRefreshCreate(tokenRefresh: TokenRefresh, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (tokenRefresh === null || tokenRefresh === undefined) {\n            throw new Error('Required parameter tokenRefresh was null or undefined when calling apiTokenRefreshCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<TokenRefresh>(`${this.configuration.basePath}/backend/masterdata/api/token/refresh/`,\n            tokenRefresh,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Takes a token and indicates if it is valid.  This view provides no information about a token\\&#39;s fitness for a particular use.\n     * @param tokenVerify \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiTokenVerifyCreate(tokenVerify: TokenVerify, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<TokenVerify>;\n    public apiTokenVerifyCreate(tokenVerify: TokenVerify, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<TokenVerify>>;\n    public apiTokenVerifyCreate(tokenVerify: TokenVerify, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<TokenVerify>>;\n    public apiTokenVerifyCreate(tokenVerify: TokenVerify, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (tokenVerify === null || tokenVerify === undefined) {\n            throw new Error('Required parameter tokenVerify was null or undefined when calling apiTokenVerifyCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<TokenVerify>(`${this.configuration.basePath}/backend/masterdata/api/token/verify/`,\n            tokenVerify,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface SampleTypes { \n    id: string;\n    text: string;\n    has_inclusion_rate?: boolean;\n    has_total_risk?: boolean;\n    has_bw_loss_and_fcr_graph?: boolean;\n}\n\n","import {Injectable} from '@angular/core';\nimport {BreakpointObserver, Breakpoints} from \"@angular/cdk/layout\";\nimport {Observable} from \"rxjs\";\nimport {map, shareReplay} from \"rxjs/operators\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LayoutService {\n\n    readonly stepperVerticalMode: Observable<boolean>;\n\n    constructor(\n        private readonly breakpointObserver: BreakpointObserver\n    ) {\n        this.stepperVerticalMode = breakpointObserver.observe([Breakpoints.Small, Breakpoints.XSmall]).pipe(\n            map(result => result.matches),\n            shareReplay(1)\n        );\n    }\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { PaginatedDatabaseList } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatabaseService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param assessmentCreatedAtGt \n     * @param assessmentCreatedAtGte \n     * @param assessmentCreatedAtLt \n     * @param assessmentCreatedAtLte \n     * @param ordering Which field to use when ordering the results.\n     * @param page A page number within the paginated result set.\n     * @param pageSize Number of results to return per page.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public databaseList(assessmentCreatedAtGt?: string, assessmentCreatedAtGte?: string, assessmentCreatedAtLt?: string, assessmentCreatedAtLte?: string, ordering?: string, page?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PaginatedDatabaseList>;\n    public databaseList(assessmentCreatedAtGt?: string, assessmentCreatedAtGte?: string, assessmentCreatedAtLt?: string, assessmentCreatedAtLte?: string, ordering?: string, page?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PaginatedDatabaseList>>;\n    public databaseList(assessmentCreatedAtGt?: string, assessmentCreatedAtGte?: string, assessmentCreatedAtLt?: string, assessmentCreatedAtLte?: string, ordering?: string, page?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PaginatedDatabaseList>>;\n    public databaseList(assessmentCreatedAtGt?: string, assessmentCreatedAtGte?: string, assessmentCreatedAtLt?: string, assessmentCreatedAtLte?: string, ordering?: string, page?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (assessmentCreatedAtGt !== undefined && assessmentCreatedAtGt !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>assessmentCreatedAtGt, 'assessment__created_at__gt');\n        }\n        if (assessmentCreatedAtGte !== undefined && assessmentCreatedAtGte !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>assessmentCreatedAtGte, 'assessment__created_at__gte');\n        }\n        if (assessmentCreatedAtLt !== undefined && assessmentCreatedAtLt !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>assessmentCreatedAtLt, 'assessment__created_at__lt');\n        }\n        if (assessmentCreatedAtLte !== undefined && assessmentCreatedAtLte !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>assessmentCreatedAtLte, 'assessment__created_at__lte');\n        }\n        if (ordering !== undefined && ordering !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>ordering, 'ordering');\n        }\n        if (page !== undefined && page !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>page, 'page');\n        }\n        if (pageSize !== undefined && pageSize !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageSize, 'page_size');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<PaginatedDatabaseList>(`${this.configuration.basePath}/backend/masterdata/database/`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {LocalStorageHandle, LocalStorageService} from \"./local-storage.service\";\nimport {Observable} from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CurrentLanguageService {\n\n    private readonly languageHandle: LocalStorageHandle<string>;\n\n    constructor(\n        private readonly localStorageService: LocalStorageService,\n    ) {\n        this.languageHandle = this.localStorageService.newHandle('risk.language', raw => raw, language => language);\n        this.languageHandle.subscribe();\n    }\n\n    get currentLanguage(): Observable<string | null> {\n        return this.languageHandle.value;\n    }\n\n    setLanguage(language: string) {\n        this.languageHandle.setValue(language);\n    }\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Species { \n    id: string;\n    text: string;\n    readonly has_products: Array<string>;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Email { \n    email: string;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TranslationsService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public translationsRetrieve(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public translationsRetrieve(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public translationsRetrieve(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public translationsRetrieve(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/backend/masterdata/translations/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {AssessmentService, UserAssessmentInput} from \"../../generated/api\";\nimport {ResultInput} from \"../util/data\";\nimport {Observable} from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ResultService {\n\n    constructor(\n        private readonly assessmentService: AssessmentService\n    ) {\n    }\n\n    getResults({generalForm, samplesForm, concentrationForm, selectedProductId}: ResultInput): Observable<UserAssessmentInput> {\n        if (samplesForm.samples.length !== concentrationForm.entries.length) {\n            console.error('samplesForm and concentrationForm mismatch: ', samplesForm, concentrationForm);\n            throw new Error('samples.length must be concentrations.length');\n        }\n        const apiInput: UserAssessmentInput = {\n            customer_name: generalForm.customerName ?? undefined,\n            customer: generalForm.customerId ?? null,\n            country: generalForm.countryId,\n            species: generalForm.speciesId,\n            test_laboratory: generalForm.testLaboratoryId ?? undefined,\n            sample_type: generalForm.sampleTypeId,\n            email_recipients: generalForm.recipientEmails?.map(email => ({address: email})) ?? [],\n            samples: samplesForm.samples.map((sample, index) => {\n                const concentrationEntry = concentrationForm.entries[index];\n                return {\n                    name: sample.sampleName,\n                    inclusion_rate: sample.inclusionRate,\n                    component: sample.componentId,\n                    contaminations: concentrationEntry.concentrations.map(concentration => {\n                        return {\n                            mycotoxin: concentration.mycotoxinId,\n                            value: concentration.value,\n                            level: undefined\n                        }\n                    }),\n                    risk: undefined,\n                    product_recommendation: undefined,\n                    fcr_factor: undefined,\n                    bw_factor: undefined\n                };\n            }),\n            selected_product: selectedProductId,\n            moving_risks: undefined,\n            total_fcr_factor: undefined,\n            total_bw_factor: undefined,\n            secret_token: undefined,\n            interaction: undefined,\n            comments: undefined,\n            author: undefined,\n            total_risk: undefined,\n            total_product_recommendation: undefined,\n            created_at: undefined,\n            id: undefined\n        };\n        return this.assessmentService.assessmentCreate(apiInput);\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { UserAssessmentInput } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AssessmentService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param userAssessmentInput \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public assessmentCreate(userAssessmentInput: UserAssessmentInput, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<UserAssessmentInput>;\n    public assessmentCreate(userAssessmentInput: UserAssessmentInput, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<UserAssessmentInput>>;\n    public assessmentCreate(userAssessmentInput: UserAssessmentInput, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<UserAssessmentInput>>;\n    public assessmentCreate(userAssessmentInput: UserAssessmentInput, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (userAssessmentInput === null || userAssessmentInput === undefined) {\n            throw new Error('Required parameter userAssessmentInput was null or undefined when calling assessmentCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<UserAssessmentInput>(`${this.configuration.basePath}/backend/masterdata/assessment/`,\n            userAssessmentInput,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param id \n     * @param secretToken \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public assessmentRetrieve(id: string, secretToken: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<UserAssessmentInput>;\n    public assessmentRetrieve(id: string, secretToken: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<UserAssessmentInput>>;\n    public assessmentRetrieve(id: string, secretToken: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<UserAssessmentInput>>;\n    public assessmentRetrieve(id: string, secretToken: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling assessmentRetrieve.');\n        }\n        if (secretToken === null || secretToken === undefined) {\n            throw new Error('Required parameter secretToken was null or undefined when calling assessmentRetrieve.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<UserAssessmentInput>(`${this.configuration.basePath}/backend/masterdata/assessment/${encodeURIComponent(String(id))}/${encodeURIComponent(String(secretToken))}/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {Component, EventEmitter, OnInit, Output} from '@angular/core';\n\n@Component({\n    selector: 'app-header-cta',\n    templateUrl: './header-cta.component.html',\n    styleUrls: ['./header-cta.component.scss']\n})\nexport class HeaderCtaComponent implements OnInit {\n\n\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Laboratory } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LaboratoriesService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public laboratoriesList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<Laboratory>>;\n    public laboratoriesList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<Laboratory>>>;\n    public laboratoriesList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<Laboratory>>>;\n    public laboratoriesList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (jwtAuth) required\n        credential = this.configuration.lookupCredential('jwtAuth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<Laboratory>>(`${this.configuration.basePath}/backend/masterdata/laboratories/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {RegistrationComponent} from \"./modules/pages/registration/registration.component\";\nimport {ImprintComponent} from \"./modules/pages/imprint/imprint.component\";\nimport {LostPasswordComponent} from \"./modules/pages/lost-password/lost-password.component\";\nimport {ResetPasswordComponent} from \"./modules/pages/reset-password/reset-password.component\";\nimport {ChangePasswordComponent} from \"./modules/pages/change-password/change-password.component\";\n\nconst routes: Routes = [\n    {\n        path: 'registration',\n        component: RegistrationComponent\n    },\n    {\n        path: 'imprint',\n        component: ImprintComponent\n    },\n    {\n        path: 'forgot-password',\n        component: LostPasswordComponent\n    },\n    {\n        path: 'reset-password',\n        component: ResetPasswordComponent\n    },\n    {\n        path: 'reset-password/:token',\n        component: ResetPasswordComponent\n    },\n    {\n      path: 'change-password',\n      component: ChangePasswordComponent\n    },\n    {\n        path: 'data',\n        loadChildren: () => import('./modules/pages/data-display/data-display.module').then(m => m.DataDisplayModule)\n    },\n    {\n        path: 'moving-risk/:customer_id/:species_id/:for_months',\n        loadChildren: () => import('./modules/pages/moving-risk/moving-risk.module').then(m => m.MovingRiskModule)\n    },\n    {\n        path: '',\n        loadChildren: () => import('./modules/pages/assessment/assessment.module').then(m => m.AssessmentModule),\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forRoot(routes, {\n            initialNavigation: 'enabled',\n            relativeLinkResolution: 'corrected',\n        }),\n    ],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Mycotoxins { \n    id: string;\n    text: string;\n    val_min: number;\n    val_max: number;\n}\n\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface RegistrationRequest {\n    name: string;\n    email: string;\n    country_name: string;\n    company_name: string;\n    company_address: string;\n    password: string;\n    privacy_policy: boolean;\n    nutrition_verification: boolean;\n}\n\n","if(typeof moment === 'undefined') {var e = new Error(\"Cannot find module 'moment'\"); e.code = 'MODULE_NOT_FOUND'; throw e;}\nmodule.exports = moment;","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-pre-footer',\n  templateUrl: './pre-footer.component.html',\n  styleUrls: ['./pre-footer.component.scss']\n})\nexport class PreFooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"pre-footer-container\">\n    <div class=\"pre-footer-inner\">\n        powered by\n        <a href=\"https://ew-nutrition.com/\" target=\"_blank\"><img src=\"/assets/img/logo_ew-nutrition.svg\" alt=\"ew nutrition\"></a>\n    </div>\n</div>","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { AssessmentService } from './api/assessment.service';\nimport { BackendService } from './api/backend.service';\nimport { ComponentsService } from './api/components.service';\nimport { CountriesService } from './api/countries.service';\nimport { CustomersService } from './api/customers.service';\nimport { DatabaseService } from './api/database.service';\nimport { LaboratoriesService } from './api/laboratories.service';\nimport { LanguagesService } from './api/languages.service';\nimport { LevelsService } from './api/levels.service';\nimport { MycotoxinsService } from './api/mycotoxins.service';\nimport { ProductsService } from './api/products.service';\nimport { RegisterService } from './api/register.service';\nimport { SampleTypesService } from './api/sampleTypes.service';\nimport { SendReportService } from './api/sendReport.service';\nimport { SpeciesService } from './api/species.service';\nimport { TranslationsService } from './api/translations.service';\nimport { UserService } from './api/user.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {CurrentLanguageService} from \"../services/current-language.service\";\nimport {first, map, switchMap} from \"rxjs/operators\";\nimport {environment} from \"../../environments/environment\";\n\n@Injectable()\nexport class LanguageHeaderInterceptor implements HttpInterceptor {\n\n    constructor(\n        private readonly currentLanguageService: CurrentLanguageService\n    ) {\n    }\n\n    intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n        if (request.url.startsWith(environment.api)) {\n            return this.currentLanguageService.currentLanguage.pipe(\n                first(),\n                map(language => {\n                    if (language == null) {\n                        return request;\n                    } else {\n                        return request.clone({\n                            setHeaders: {\n                                'Accept-Language': language\n                            }\n                        });\n                    }\n                }),\n                switchMap(newRequest => next.handle(newRequest))\n            );\n        } else {\n            return next.handle(request);\n        }\n    }\n}\n","/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface UserAssessmentRecipient { \n    address: string;\n}\n\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  platformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n});\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}